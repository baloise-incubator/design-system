/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ColorTypes, ColorTypesBasic, ColorTypesExtended } from "./types/color.types";
import { BalButtonColor } from "./types";
import { SpacingCardType } from "./types/padding.types";
import { BalDateCallback } from "./components/form/bal-datepicker/bal-datepicker.type";
import { FileUploadRejectedFile } from "./components/form/bal-file-upload/bal-file-upload.type";
import { HeadingLevels } from "./components/bal-heading/bal-heading.type";
import { AutocompleteTypes, InputTypes } from "./types/interfaces";
import { ComponentProps, ComponentRef, FrameworkDelegate, OverlayEventDetail } from "./components/notice/bal-modal/bal-modal.type";
import { BalTabOption } from "./components/bal-tabs/bal-tab.type";
export namespace Components {
    interface BalAccordion {
        /**
          * If `true` the accordion is used on the bottom of a card
         */
        "card": boolean;
        /**
          * Close the accordion
         */
        "close": () => Promise<void>;
        /**
          * Bal-Icon of the close trigger button
         */
        "closeIcon": string;
        /**
          * Label of the close trigger button
         */
        "closeLabel": string;
        /**
          * Type defines the theme of the accordion toggle
         */
        "color": ColorTypesBasic;
        /**
          * Controls if the accordion is collapsed or not
         */
        "isActive": boolean;
        /**
          * Open the accordion
         */
        "open": () => Promise<void>;
        /**
          * Bal-Icon of the open trigger button
         */
        "openIcon": string;
        /**
          * Label of the open trigger button
         */
        "openLabel": string;
        /**
          * Triggers the accordion
         */
        "toggle": () => Promise<void>;
    }
    interface BalApp {
        /**
          * If `true` it adds a light background to the app
         */
        "background": boolean;
        /**
          * If `true` the bal-app can be used with header, main and footer. The footer will then be sticky to the bottom.
         */
        "hasStickyFooter": boolean;
    }
    interface BalButton {
        /**
          * If `true` the bottom corners get rounded
         */
        "bottomRounded": boolean;
        /**
          * The color to use from your application's color palette.
         */
        "color": BalButtonColor;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * If `true` the button has a full width
         */
        "expanded": boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href": string | undefined;
        /**
          * Name of the left button icon
         */
        "icon": string;
        /**
          * Size of the button
         */
        "iconPosition": 'left' | 'right';
        /**
          * Name of the right button icon
         */
        "iconRight": string;
        /**
          * If `true` the button is inverted
         */
        "inverted": boolean;
        /**
          * If `true` the button has a active theme
         */
        "isActive": boolean;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading": boolean;
        /**
          * The name of the button, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * If `true` the button is outlined
         */
        "outlined": boolean;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * Size of the button
         */
        "size": 'small' | '';
        /**
          * If `true` the width of the buttons is limited
         */
        "square": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target": '_blank' | ' _parent' | '_self' | '_top';
        /**
          * If `true` the top corners get rounded
         */
        "topRounded": boolean;
        /**
          * The type of button.
         */
        "type": 'button' | 'reset' | 'submit';
        /**
          * The value of the button, which is submitted with the form data.
         */
        "value"?: string | number;
    }
    interface BalCard {
        /**
          * If `true` a light blue border is added to the card.
         */
        "border": boolean;
        /**
          * Defines the color of the card.
         */
        "color": ColorTypes | '';
        /**
          * If `true` the card loses its shadow.
         */
        "flat": boolean;
        /**
          * If `true` a card will not have a shadow on mobile.
         */
        "flatMobile": boolean;
        /**
          * If `true` the card background color becomes blue.
         */
        "inverted": boolean;
        /**
          * Defines the size of the padding grid
         */
        "spacing": SpacingCardType;
        /**
          * If `true` the card loses its border radius.
         */
        "square": boolean;
        /**
          * If `true` the card has a limited width on desktop.
         */
        "teaser": boolean;
    }
    interface BalCardActions {
        /**
          * If `true` the buttons start form right to left.
         */
        "right": boolean;
    }
    interface BalCardButton {
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href": string | undefined;
        /**
          * Name of the icon like `edit`.
         */
        "icon": string;
        /**
          * Name of the right button icon
         */
        "iconRight": string;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target": '_blank' | ' _parent' | '_self' | '_top';
        /**
          * The type of button.
         */
        "type": 'button' | 'reset' | 'submit';
    }
    interface BalCardContent {
        /**
          * If `true` the card text color becomes white.
         */
        "inverted": boolean;
    }
    interface BalCardHead {
    }
    interface BalCardHeading {
    }
    interface BalCardSteps {
    }
    interface BalCardSubtitle {
        /**
          * If `true` the card text color becomes white.
         */
        "inverted": boolean;
    }
    interface BalCardTitle {
        /**
          * If `true` the card text color becomes white.
         */
        "inverted": boolean;
    }
    interface BalCheckbox {
        /**
          * The tabindex of the control.
         */
        "balTabindex": number;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * Defines the layout of the checkbox button
         */
        "interface": 'checkbox' | 'switch';
        /**
          * If `true`, the control works on dark background.
         */
        "inverted": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Sets the focus on the checkbox input element.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the control.
         */
        "value": string;
    }
    interface BalData {
        /**
          * If `true` a bottom border is added to the data-item.
         */
        "border": boolean;
        /**
          * If `true` the data list is horizontal instead of vertical.
         */
        "horizontal": boolean;
    }
    interface BalDataItem {
        /**
          * If `true` the item gets a lighter font color.
         */
        "disabled": boolean;
    }
    interface BalDataLabel {
        /**
          * If `true` an asterix is added after the label.
         */
        "required": boolean;
    }
    interface BalDataValue {
        /**
          * If `true` the button will get disabled.
         */
        "disabled": boolean;
        /**
          * If `true` a small button with a edit icon will be shown on the right.
         */
        "editable": boolean;
    }
    interface BalDatepicker {
        /**
          * Callback to determine which date in the datepicker should be selectable.
         */
        "allowedDates": BalDateCallback | undefined;
        /**
          * The tabindex of the control.
         */
        "balTabindex": number;
        /**
          * Closes the dropdown
         */
        "close": () => Promise<void>;
        /**
          * Closes the datepicker dropdown after selection
         */
        "closeOnSelect": boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * The date to defines where the datepicker popup starts. The prop accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "defaultDate"?: string | null;
        /**
          * If `true` the component is diabled.
         */
        "disabled": boolean;
        /**
          * If `true` the component uses the whole width.
         */
        "expanded": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * Set this to `true` when the component is placed on a dark background.
         */
        "inverted": boolean;
        /**
          * Define the locale of month and day names.
         */
        "locale": 'en' | 'de' | 'fr' | 'it';
        /**
          * The maximum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the maximum could just be the year, such as `1994`. Defaults to the end of this year.
         */
        "max"?: string;
        /**
          * Latest year available for selection
         */
        "maxYearProp": number | undefined;
        /**
          * The minimum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), such as `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the minimum could just be the year, such as `1994`. Defaults to the beginning of the year, 100 years ago from today.
         */
        "min"?: string;
        /**
          * Earliest year available for selection
         */
        "minYearProp": number | undefined;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Opens the dropdown
         */
        "open": () => Promise<void>;
        /**
          * The text to display when the select is empty.
         */
        "placeholder": string | undefined;
        /**
          * If `true` the use can only select a date.
         */
        "readonly": boolean;
        /**
          * If `true` the attribute required is added to the native input.
         */
        "required": boolean;
        /**
          * Selects an option
         */
        "select": (datestring: string) => Promise<void>;
        /**
          * Sets the focus on the input element
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true` the datepicker only open on click of the icon
         */
        "triggerIcon": boolean;
        /**
          * The value of the form field, which accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "value"?: string | null;
    }
    interface BalDocApp {
    }
    interface BalDocColor {
        "background": boolean;
        "color": string;
        "description": string;
        "inverted": boolean;
        "scssVars": string;
        "subject": string;
    }
    interface BalDocDownload {
        "iconLeft": string;
        "iconRight": string;
        "link": string;
        "subject": string;
        "subtitle": string;
    }
    interface BalDocIcons {
        "icons": string;
    }
    interface BalDocImage {
        "src": string;
        "text": string;
    }
    interface BalDropdown {
        /**
          * Closes the dropdown menu.
         */
        "close": () => Promise<void>;
        /**
          * If `true` the field spans over the whole width.
         */
        "expanded": boolean;
        /**
          * If `true` the dropdown content has a fixed width
         */
        "fixedContentWidth": boolean;
        /**
          * Returns the `HTMLDivElement` of the content element
         */
        "getContentElement": () => Promise<HTMLElement | null>;
        /**
          * If `true` the dropdown content is open.
         */
        "isActive": boolean;
        /**
          * Open the dropdown menu.
         */
        "open": () => Promise<void>;
        /**
          * Open or closes the dropdown.
         */
        "toggle": () => Promise<void>;
    }
    interface BalDropdownMenu {
        /**
          * Limit the height of the dropdown content. Pass the amount of pixel.
         */
        "scrollable": number;
    }
    interface BalDropdownTrigger {
    }
    interface BalField {
        /**
          * If `true` the field loses opacity
         */
        "disabled": boolean;
        /**
          * If `true` the component takes the whole width
         */
        "expanded": boolean;
        /**
          * If `true` the component gets a invalid style. Only use this if there is no live validation.
         */
        "invalid": boolean;
        /**
          * If `true` the field can be used on blue background.
         */
        "inverted": boolean;
        /**
          * If `true` a loading spinner is visible at the end of the input
         */
        "loading": boolean;
    }
    interface BalFieldControl {
        /**
          * Baloise icon for the left side of the input
         */
        "iconLeft": string;
        /**
          * Baloise icon for the right side of the input
         */
        "iconRight": string;
        /**
          * If `true` the field can be used on blue background.
         */
        "inverted": boolean;
        /**
          * If `true` a loading spinner is visible at the end of the input
         */
        "loading": boolean;
    }
    interface BalFieldHint {
        /**
          * Text of the inputs label
         */
        "subject": string;
    }
    interface BalFieldLabel {
        /**
          * If `true` the component takes the whole width
         */
        "expanded": boolean;
        /**
          * If `true` a asterix (*) is added to the label text
         */
        "required": boolean;
    }
    interface BalFieldMessage {
        /**
          * Defines the color of the message.
         */
        "color": '' | ColorTypesExtended;
        /**
          * If `true` the component takes the whole width
         */
        "expanded": boolean;
    }
    interface BalFileUpload {
        /**
          * Accepted MIME-Types like `image/png,image/jpeg`.
         */
        "accept": string;
        /**
          * Sets the file list to an empty list
         */
        "clear": () => Promise<void>;
        /**
          * If `true` the button is disabled
         */
        "disabled": boolean;
        /**
          * If `true` below the drop-down area it generates a file list.
         */
        "hasFileList": boolean;
        /**
          * Label of the drop area.
         */
        "label": string;
        /**
          * Allowed max bundle size in bytes.
         */
        "maxBundleSize": number | undefined;
        /**
          * Allowed max file size in bytes.
         */
        "maxFileSize": number | undefined;
        /**
          * Allowed number of files in the bundle.
         */
        "maxFiles": number | undefined;
        /**
          * If `true` multiple file upload is possible.
         */
        "multiple": boolean;
        /**
          * Overrides the default subtitle filesize
         */
        "subTitle": ((file: File) => string) | undefined;
        /**
          * Input value.
         */
        "value": File[];
    }
    interface BalFooter {
        /**
          * If `true` the footer shows a track line at the bottom.
         */
        "hasTrackLine": boolean;
        /**
          * If `true` the default Baloise links will be hidden.
         */
        "hideLinks": boolean;
        /**
          * The languages in which the links will appear.
         */
        "locale": 'en' | 'de' | 'fr' | 'it';
    }
    interface BalHeading {
        /**
          * The theme type of the toast. Given by bulma our css framework.
         */
        "color": ColorTypes | '';
        /**
          * If `true` the button is inverted
         */
        "inverted": boolean;
        /**
          * The actual heading level used in the HTML markup.
         */
        "level": HeadingLevels;
        /**
          * Defines at which position the heading has spacing.
         */
        "space": 'all' | 'none' | 'top' | 'bottom';
        /**
          * If `true` the heading gets displayed slimmer.
         */
        "subtitle": boolean;
        /**
          * Make the visual style mimic a specific heading level. This option allows you to make e.g. h1 visually look like h3, but still keep it h1 in the markup.
         */
        "visualLevel": HeadingLevels | undefined;
    }
    interface BalHint {
        /**
          * Closes the hint box.
         */
        "close": () => Promise<void>;
        /**
          * Text for the close button.
         */
        "closeLabel": string;
        /**
          * Opens the hint box.
         */
        "open": () => Promise<void>;
        /**
          * Disables the close button for tablet and desktop
         */
        "small": boolean;
        /**
          * Toggles the hint box.
         */
        "toggle": () => Promise<void>;
    }
    interface BalHintText {
    }
    interface BalHintTitle {
    }
    interface BalIcon {
        /**
          * The theme type of the button. Given by bulma our css framework.
         */
        "color": BalButtonColor;
        /**
          * If `true` the button is inverted
         */
        "inverted": boolean;
        /**
          * Name of the baloise icon.
         */
        "name": string;
        /**
          * If `true` the icon rotates like for a loading spinner
         */
        "rotate": boolean;
        /**
          * Defines the size of the icon.
         */
        "size": 'xsmall' | 'small' | 'medium' | 'large' | '';
        /**
          * Svg content.
         */
        "svg": string;
        /**
          * If `true` the icon is rotated 180deg
         */
        "turn": boolean;
    }
    interface BalInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * The tabindex of the control.
         */
        "balTabindex": number;
        /**
          * If `true` the input gets a clickable cursor style
         */
        "clickable": boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * Defins the allowed decimal points for the `number-input`.
         */
        "decimal"?: number;
        /**
          * If `true` the input is disabled
         */
        "disabled": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        "hasIconRight": boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * If `true` this component can be placed on dark background
         */
        "inverted": boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * Defines the max length of the value.
         */
        "maxLength": number | undefined;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * Defines the min length of the value.
         */
        "minLength": number | undefined;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true` on mobile device the number keypad is active
         */
        "numberInput": boolean;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string | undefined;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets focus on the native `input` in `bal-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Adds a suffix the the inputvalue after blur.
         */
        "suffix"?: string;
        /**
          * Defines the type of the input (text, number, email ...).
         */
        "type": InputTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number;
    }
    interface BalList {
        /**
          * If `true` each list item has a bottom border
         */
        "border": boolean;
        /**
          * If `true` the list item can be hovered
         */
        "disabled": boolean;
        /**
          * If `true` the list can be used on a dark backround
         */
        "inverted": boolean;
    }
    interface BalListItem {
        /**
          * If `true` the list item shows that it is clickable
         */
        "clickable": boolean;
        /**
          * If `true` the list item can be hovered
         */
        "disabled": boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href": string;
        /**
          * If `true` the list item has a selected theme
         */
        "selected": boolean;
        /**
          * Specifies where to open the linked document
         */
        "target": '_blank' | ' _parent' | '_self' | '_top';
    }
    interface BalListItemContent {
    }
    interface BalListItemIcon {
        /**
          * If `true` the icon is on the right side of the list item. Default is the left side.
         */
        "right": boolean;
    }
    interface BalListItemSubtitle {
    }
    interface BalListItemTitle {
    }
    interface BalModal {
        /**
          * Closes the modal.
         */
        "close": () => Promise<void>;
        /**
          * The component to display inside of the modal.
         */
        "component": ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "dataTestId"?: string;
        "delegate"?: FrameworkDelegate;
        /**
          * Closes the presented modal with the modal controller
         */
        "dismiss": (data?: any, role?: string | undefined) => Promise<boolean>;
        /**
          * If `true`, a backdrop will be displayed behind the modal.
         */
        "hasBackdrop": boolean;
        /**
          * Defines the look of the modal. The card interface should be used for scrollable content in the modal.
         */
        "interface": 'light' | 'card';
        /**
          * If `true`, the modal can be closed with the escape key or the little close button.
         */
        "isClosable": boolean;
        /**
          * Defines the width of the modal body
         */
        "modalWidth": number;
        /**
          * Returns a promise that resolves when the modal did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the modal will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Opens the modal.
         */
        "open": () => Promise<void>;
        "overlayIndex": number;
        /**
          * Presents the modal through the modal controller
         */
        "present": () => Promise<void>;
    }
    interface BalModalActions {
    }
    interface BalModalBody {
    }
    interface BalModalFooter {
    }
    interface BalModalHeader {
    }
    interface BalNavbar {
        /**
          * It `true` the component uses the whole width
         */
        "expanded": boolean;
        /**
          * It `true` the navbar has a white background
         */
        "light": boolean;
        /**
          * It `true` the burger button is hidden
         */
        "noBurger": boolean;
    }
    interface BalNavbarBrand {
        /**
          * Link of the logo / title.
         */
        "href": string;
    }
    interface BalNavbarMenu {
        "toggle": (isMenuActive: boolean) => Promise<void>;
    }
    interface BalNavbarMenuEnd {
    }
    interface BalNavbarMenuStart {
    }
    interface BalNotices {
        /**
          * The interface tells the notice where to show the notice.
         */
        "interface": 'toast' | 'snackbar';
    }
    interface BalNotification {
        /**
          * Defines the color of the element
         */
        "color": '' | ColorTypes;
    }
    interface BalPagination {
        /**
          * Disables component
         */
        "disabled": boolean;
        /**
          * Go to the next page
         */
        "next": () => Promise<void>;
        /**
          * Specify the max visible pages before and after the selected page
         */
        "pageRange": number;
        /**
          * Go to the prvious page
         */
        "previous": () => Promise<void>;
        /**
          * The total amount of pages
         */
        "totalPages": number;
        /**
          * Current selected page
         */
        "value": number;
    }
    interface BalRadio {
        /**
          * The tabindex of the control.
         */
        "balTabindex": number;
        /**
          * If `true`, the radio is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        /**
          * Defines the layout of the radio button
         */
        "interface": 'radio' | 'select-button';
        /**
          * If `true`, the control works on dark background.
         */
        "inverted": boolean;
        /**
          * If `true` the radio has no label
         */
        "isEmpty": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Sets the focus on the input element.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the control.
         */
        "value": string;
    }
    interface BalRadioGroup {
        /**
          * If `true`, the user cannot interact with the radios.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the radio button
         */
        "interface": 'radio' | 'select-button';
        /**
          * If `true` the component can be used on dark background
         */
        "inverted": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        "setValue": (value: string) => Promise<void>;
        /**
          * The value of the control.
         */
        "value": string;
    }
    interface BalSelect {
        /**
          * The tabindex of the control.
         */
        "balTabindex": number;
        /**
          * Cancel the dropdown
         */
        "cancel": () => Promise<void>;
        /**
          * Sets the value to `[]`, the input value to ´''´ and the focus index to ´0´.
         */
        "clear": () => Promise<void>;
        /**
          * Closes the dropdown
         */
        "close": () => Promise<void>;
        /**
          * If `true` the component is diabled.
         */
        "disabled": boolean;
        /**
          * If `true` the component uses the whole width.
         */
        "expanded": boolean;
        /**
          * Sets the focus on the input element
         */
        "getValue": () => Promise<string[] | undefined>;
        /**
          * Enables the slide in animation for the option items.
         */
        "hasMovement": boolean;
        /**
          * Set this to `true` when the component is placed on a dark background.
         */
        "inverted": boolean;
        /**
          * Defines if the select is in a loading state.
         */
        "loading": boolean;
        /**
          * If `true` multiple option can be selected
         */
        "multiple": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Removes the border of the input.
         */
        "noBorder": boolean;
        /**
          * This label is shown if typeahead is active and all the options are filtered out.
         */
        "noDataLabel": string | undefined;
        /**
          * Opens the dropdown
         */
        "open": () => Promise<void>;
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string;
        /**
          * Defines the height of the dropdown list.
         */
        "scrollable": number;
        /**
          * Select option by passed value
         */
        "select": (value: string) => Promise<void>;
        /**
          * Sets the focus on the input element
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true` the user can search by typing into the input field.
         */
        "typeahead": boolean;
        /**
          * Selected option values. Could also be passed as a string, which gets transformed.
         */
        "value": string | string[] | undefined;
    }
    interface BalSelectOption {
        /**
          * If `true`, the user cannot interact with the option.
         */
        "disabled": boolean;
        /**
          * Label will be shown in the input element when it got selected
         */
        "label": string | undefined;
        /**
          * The value of the select option. This value will be returned by the parent `<bal-select>` element.
         */
        "value": string | undefined;
    }
    interface BalSheet {
    }
    interface BalSlider {
        /**
          * The tabindex of the control.
         */
        "balTabindex": number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true` the input is disabled
         */
        "disabled": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * If `true`, small ticks for the steps are shown.
         */
        "hasTicks": boolean;
        /**
          * Max value of the model.
         */
        "max": number;
        /**
          * Min value of the model.
         */
        "min": number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets focus on the native `input` in `bal-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The step size. 0 means no steps.
         */
        "step": number;
        /**
          * The value of the input.
         */
        "value"?: string | number;
    }
    interface BalSnackbar {
        /**
          * Label text for the action button
         */
        "action": string;
        "actionHandler": () => void;
        /**
          * Closes this snackbar
         */
        "close": () => Promise<void>;
        "closeHandler": () => void;
        /**
          * Closes the snackbar after the given duration in ms
         */
        "closeIn": (duration: number) => Promise<void>;
        /**
          * The theme type of the snackbar. Given by bulma our css framework.
         */
        "color": ColorTypes | '';
        /**
          * The duration of the snackbar
         */
        "duration": number;
        /**
          * The icon of the snackbar header
         */
        "icon": string;
        /**
          * The message of the snackbar
         */
        "message": string;
        /**
          * The subject of the snackbar header
         */
        "subject": string;
    }
    interface BalSpinner {
        /**
          * If `true` the component can be used on dark background
         */
        "inverted": boolean;
        /**
          * If `true` the component is smaller
         */
        "small": boolean;
    }
    interface BalTabItem {
        /**
          * Tell's if the tab is active and the content is visible.
         */
        "active": boolean;
        /**
          * If `true` a small red bubble is added to the tab.
         */
        "bubble": boolean;
        /**
          * If `true` the tab is disabled.
         */
        "disabled": boolean;
        /**
          * If `true` the step is marked as done.
         */
        "done": boolean;
        /**
          * If `true` the step is marked as failed.
         */
        "failed": boolean;
        /**
          * Options of the tab like label, value etc.
         */
        "getOptions": () => Promise<BalTabOption>;
        /**
          * Link to path.
         */
        "href": string;
        /**
          * Label for the tab.
         */
        "label": string;
        /**
          * Tell's if the linking is done by a router.
         */
        "prevent": boolean;
        /**
          * Sets the tab active.
         */
        "setActive": (active: boolean) => Promise<void>;
        /**
          * This is the key of the tab.
         */
        "value": string;
    }
    interface BalTable {
        /**
          * If `true` the table has a full width
         */
        "expanded": boolean;
    }
    interface BalTabs {
        /**
          * If `true` a acation button is added to the right
         */
        "action": boolean;
        /**
          * Label for the action button
         */
        "actionLabel": string;
        /**
          * If `true` the tabs or steps can be clicked.
         */
        "clickable": boolean;
        /**
          * If `true` the field expands over the whole width.
         */
        "expanded": boolean;
        /**
          * Defines the layout of the tabs.
         */
        "interface": 'tabs' | 'steps' | 'o-steps';
        /**
          * If you want the rounded tab style.
         */
        "rounded": boolean;
        /**
          * Go to tab with the given value
         */
        "select": (tab: BalTabOption) => Promise<void>;
        "sync": () => Promise<void>;
    }
    interface BalTag {
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "closable": boolean;
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "color": ColorTypes | '';
        "dense": boolean;
        /**
          * The size of the tag element
         */
        "size": 'small' | 'medium' | 'large' | '';
        "transparent": boolean;
    }
    interface BalText {
        /**
          * If `true` the text is bold
         */
        "bold": boolean;
        /**
          * Defines the color of the text.
         */
        "color": ColorTypes | 'hint' | '';
        /**
          * If `true` the text has a small size
         */
        "small": boolean;
    }
    interface BalTextarea {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize": string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * The tabindex of the control.
         */
        "balTabindex": number;
        /**
          * If `true` the input gets a clickable cursor style
         */
        "clickable": boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled": boolean;
        /**
          * Returns the native `<textarea>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLTextAreaElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * If `true` this component can be placed on dark background
         */
        "inverted": boolean;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxLength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minLength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the textarea.
         */
        "value"?: string;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface BalTimeinput {
        /**
          * If `true` the button is disabled
         */
        "disabled": boolean;
        /**
          * If `true` the timeinput can be used on blue background.
         */
        "inverted": boolean;
        /**
          * Latest date available for selection
         */
        "maxTime": string;
        /**
          * Earliest date available for selection
         */
        "minTime": string;
        /**
          * The value of the datepicker with the format `hh:mm`.
         */
        "value": string;
    }
    interface BalToast {
        /**
          * Closes this toast
         */
        "close": () => Promise<void>;
        "closeHandler": () => void;
        /**
          * Closes the toast after the given duration in ms
         */
        "closeIn": (duration: number) => Promise<void>;
        /**
          * The theme type of the toast. Given by bulma our css framework.
         */
        "color": ColorTypes | '';
        /**
          * The duration of the toast in milliseconds.
         */
        "duration": number;
        /**
          * Content message
         */
        "message": string;
    }
}
declare global {
    interface HTMLBalAccordionElement extends Components.BalAccordion, HTMLStencilElement {
    }
    var HTMLBalAccordionElement: {
        prototype: HTMLBalAccordionElement;
        new (): HTMLBalAccordionElement;
    };
    interface HTMLBalAppElement extends Components.BalApp, HTMLStencilElement {
    }
    var HTMLBalAppElement: {
        prototype: HTMLBalAppElement;
        new (): HTMLBalAppElement;
    };
    interface HTMLBalButtonElement extends Components.BalButton, HTMLStencilElement {
    }
    var HTMLBalButtonElement: {
        prototype: HTMLBalButtonElement;
        new (): HTMLBalButtonElement;
    };
    interface HTMLBalCardElement extends Components.BalCard, HTMLStencilElement {
    }
    var HTMLBalCardElement: {
        prototype: HTMLBalCardElement;
        new (): HTMLBalCardElement;
    };
    interface HTMLBalCardActionsElement extends Components.BalCardActions, HTMLStencilElement {
    }
    var HTMLBalCardActionsElement: {
        prototype: HTMLBalCardActionsElement;
        new (): HTMLBalCardActionsElement;
    };
    interface HTMLBalCardButtonElement extends Components.BalCardButton, HTMLStencilElement {
    }
    var HTMLBalCardButtonElement: {
        prototype: HTMLBalCardButtonElement;
        new (): HTMLBalCardButtonElement;
    };
    interface HTMLBalCardContentElement extends Components.BalCardContent, HTMLStencilElement {
    }
    var HTMLBalCardContentElement: {
        prototype: HTMLBalCardContentElement;
        new (): HTMLBalCardContentElement;
    };
    interface HTMLBalCardHeadElement extends Components.BalCardHead, HTMLStencilElement {
    }
    var HTMLBalCardHeadElement: {
        prototype: HTMLBalCardHeadElement;
        new (): HTMLBalCardHeadElement;
    };
    interface HTMLBalCardHeadingElement extends Components.BalCardHeading, HTMLStencilElement {
    }
    var HTMLBalCardHeadingElement: {
        prototype: HTMLBalCardHeadingElement;
        new (): HTMLBalCardHeadingElement;
    };
    interface HTMLBalCardStepsElement extends Components.BalCardSteps, HTMLStencilElement {
    }
    var HTMLBalCardStepsElement: {
        prototype: HTMLBalCardStepsElement;
        new (): HTMLBalCardStepsElement;
    };
    interface HTMLBalCardSubtitleElement extends Components.BalCardSubtitle, HTMLStencilElement {
    }
    var HTMLBalCardSubtitleElement: {
        prototype: HTMLBalCardSubtitleElement;
        new (): HTMLBalCardSubtitleElement;
    };
    interface HTMLBalCardTitleElement extends Components.BalCardTitle, HTMLStencilElement {
    }
    var HTMLBalCardTitleElement: {
        prototype: HTMLBalCardTitleElement;
        new (): HTMLBalCardTitleElement;
    };
    interface HTMLBalCheckboxElement extends Components.BalCheckbox, HTMLStencilElement {
    }
    var HTMLBalCheckboxElement: {
        prototype: HTMLBalCheckboxElement;
        new (): HTMLBalCheckboxElement;
    };
    interface HTMLBalDataElement extends Components.BalData, HTMLStencilElement {
    }
    var HTMLBalDataElement: {
        prototype: HTMLBalDataElement;
        new (): HTMLBalDataElement;
    };
    interface HTMLBalDataItemElement extends Components.BalDataItem, HTMLStencilElement {
    }
    var HTMLBalDataItemElement: {
        prototype: HTMLBalDataItemElement;
        new (): HTMLBalDataItemElement;
    };
    interface HTMLBalDataLabelElement extends Components.BalDataLabel, HTMLStencilElement {
    }
    var HTMLBalDataLabelElement: {
        prototype: HTMLBalDataLabelElement;
        new (): HTMLBalDataLabelElement;
    };
    interface HTMLBalDataValueElement extends Components.BalDataValue, HTMLStencilElement {
    }
    var HTMLBalDataValueElement: {
        prototype: HTMLBalDataValueElement;
        new (): HTMLBalDataValueElement;
    };
    interface HTMLBalDatepickerElement extends Components.BalDatepicker, HTMLStencilElement {
    }
    var HTMLBalDatepickerElement: {
        prototype: HTMLBalDatepickerElement;
        new (): HTMLBalDatepickerElement;
    };
    interface HTMLBalDocAppElement extends Components.BalDocApp, HTMLStencilElement {
    }
    var HTMLBalDocAppElement: {
        prototype: HTMLBalDocAppElement;
        new (): HTMLBalDocAppElement;
    };
    interface HTMLBalDocColorElement extends Components.BalDocColor, HTMLStencilElement {
    }
    var HTMLBalDocColorElement: {
        prototype: HTMLBalDocColorElement;
        new (): HTMLBalDocColorElement;
    };
    interface HTMLBalDocDownloadElement extends Components.BalDocDownload, HTMLStencilElement {
    }
    var HTMLBalDocDownloadElement: {
        prototype: HTMLBalDocDownloadElement;
        new (): HTMLBalDocDownloadElement;
    };
    interface HTMLBalDocIconsElement extends Components.BalDocIcons, HTMLStencilElement {
    }
    var HTMLBalDocIconsElement: {
        prototype: HTMLBalDocIconsElement;
        new (): HTMLBalDocIconsElement;
    };
    interface HTMLBalDocImageElement extends Components.BalDocImage, HTMLStencilElement {
    }
    var HTMLBalDocImageElement: {
        prototype: HTMLBalDocImageElement;
        new (): HTMLBalDocImageElement;
    };
    interface HTMLBalDropdownElement extends Components.BalDropdown, HTMLStencilElement {
    }
    var HTMLBalDropdownElement: {
        prototype: HTMLBalDropdownElement;
        new (): HTMLBalDropdownElement;
    };
    interface HTMLBalDropdownMenuElement extends Components.BalDropdownMenu, HTMLStencilElement {
    }
    var HTMLBalDropdownMenuElement: {
        prototype: HTMLBalDropdownMenuElement;
        new (): HTMLBalDropdownMenuElement;
    };
    interface HTMLBalDropdownTriggerElement extends Components.BalDropdownTrigger, HTMLStencilElement {
    }
    var HTMLBalDropdownTriggerElement: {
        prototype: HTMLBalDropdownTriggerElement;
        new (): HTMLBalDropdownTriggerElement;
    };
    interface HTMLBalFieldElement extends Components.BalField, HTMLStencilElement {
    }
    var HTMLBalFieldElement: {
        prototype: HTMLBalFieldElement;
        new (): HTMLBalFieldElement;
    };
    interface HTMLBalFieldControlElement extends Components.BalFieldControl, HTMLStencilElement {
    }
    var HTMLBalFieldControlElement: {
        prototype: HTMLBalFieldControlElement;
        new (): HTMLBalFieldControlElement;
    };
    interface HTMLBalFieldHintElement extends Components.BalFieldHint, HTMLStencilElement {
    }
    var HTMLBalFieldHintElement: {
        prototype: HTMLBalFieldHintElement;
        new (): HTMLBalFieldHintElement;
    };
    interface HTMLBalFieldLabelElement extends Components.BalFieldLabel, HTMLStencilElement {
    }
    var HTMLBalFieldLabelElement: {
        prototype: HTMLBalFieldLabelElement;
        new (): HTMLBalFieldLabelElement;
    };
    interface HTMLBalFieldMessageElement extends Components.BalFieldMessage, HTMLStencilElement {
    }
    var HTMLBalFieldMessageElement: {
        prototype: HTMLBalFieldMessageElement;
        new (): HTMLBalFieldMessageElement;
    };
    interface HTMLBalFileUploadElement extends Components.BalFileUpload, HTMLStencilElement {
    }
    var HTMLBalFileUploadElement: {
        prototype: HTMLBalFileUploadElement;
        new (): HTMLBalFileUploadElement;
    };
    interface HTMLBalFooterElement extends Components.BalFooter, HTMLStencilElement {
    }
    var HTMLBalFooterElement: {
        prototype: HTMLBalFooterElement;
        new (): HTMLBalFooterElement;
    };
    interface HTMLBalHeadingElement extends Components.BalHeading, HTMLStencilElement {
    }
    var HTMLBalHeadingElement: {
        prototype: HTMLBalHeadingElement;
        new (): HTMLBalHeadingElement;
    };
    interface HTMLBalHintElement extends Components.BalHint, HTMLStencilElement {
    }
    var HTMLBalHintElement: {
        prototype: HTMLBalHintElement;
        new (): HTMLBalHintElement;
    };
    interface HTMLBalHintTextElement extends Components.BalHintText, HTMLStencilElement {
    }
    var HTMLBalHintTextElement: {
        prototype: HTMLBalHintTextElement;
        new (): HTMLBalHintTextElement;
    };
    interface HTMLBalHintTitleElement extends Components.BalHintTitle, HTMLStencilElement {
    }
    var HTMLBalHintTitleElement: {
        prototype: HTMLBalHintTitleElement;
        new (): HTMLBalHintTitleElement;
    };
    interface HTMLBalIconElement extends Components.BalIcon, HTMLStencilElement {
    }
    var HTMLBalIconElement: {
        prototype: HTMLBalIconElement;
        new (): HTMLBalIconElement;
    };
    interface HTMLBalInputElement extends Components.BalInput, HTMLStencilElement {
    }
    var HTMLBalInputElement: {
        prototype: HTMLBalInputElement;
        new (): HTMLBalInputElement;
    };
    interface HTMLBalListElement extends Components.BalList, HTMLStencilElement {
    }
    var HTMLBalListElement: {
        prototype: HTMLBalListElement;
        new (): HTMLBalListElement;
    };
    interface HTMLBalListItemElement extends Components.BalListItem, HTMLStencilElement {
    }
    var HTMLBalListItemElement: {
        prototype: HTMLBalListItemElement;
        new (): HTMLBalListItemElement;
    };
    interface HTMLBalListItemContentElement extends Components.BalListItemContent, HTMLStencilElement {
    }
    var HTMLBalListItemContentElement: {
        prototype: HTMLBalListItemContentElement;
        new (): HTMLBalListItemContentElement;
    };
    interface HTMLBalListItemIconElement extends Components.BalListItemIcon, HTMLStencilElement {
    }
    var HTMLBalListItemIconElement: {
        prototype: HTMLBalListItemIconElement;
        new (): HTMLBalListItemIconElement;
    };
    interface HTMLBalListItemSubtitleElement extends Components.BalListItemSubtitle, HTMLStencilElement {
    }
    var HTMLBalListItemSubtitleElement: {
        prototype: HTMLBalListItemSubtitleElement;
        new (): HTMLBalListItemSubtitleElement;
    };
    interface HTMLBalListItemTitleElement extends Components.BalListItemTitle, HTMLStencilElement {
    }
    var HTMLBalListItemTitleElement: {
        prototype: HTMLBalListItemTitleElement;
        new (): HTMLBalListItemTitleElement;
    };
    interface HTMLBalModalElement extends Components.BalModal, HTMLStencilElement {
    }
    var HTMLBalModalElement: {
        prototype: HTMLBalModalElement;
        new (): HTMLBalModalElement;
    };
    interface HTMLBalModalActionsElement extends Components.BalModalActions, HTMLStencilElement {
    }
    var HTMLBalModalActionsElement: {
        prototype: HTMLBalModalActionsElement;
        new (): HTMLBalModalActionsElement;
    };
    interface HTMLBalModalBodyElement extends Components.BalModalBody, HTMLStencilElement {
    }
    var HTMLBalModalBodyElement: {
        prototype: HTMLBalModalBodyElement;
        new (): HTMLBalModalBodyElement;
    };
    interface HTMLBalModalFooterElement extends Components.BalModalFooter, HTMLStencilElement {
    }
    var HTMLBalModalFooterElement: {
        prototype: HTMLBalModalFooterElement;
        new (): HTMLBalModalFooterElement;
    };
    interface HTMLBalModalHeaderElement extends Components.BalModalHeader, HTMLStencilElement {
    }
    var HTMLBalModalHeaderElement: {
        prototype: HTMLBalModalHeaderElement;
        new (): HTMLBalModalHeaderElement;
    };
    interface HTMLBalNavbarElement extends Components.BalNavbar, HTMLStencilElement {
    }
    var HTMLBalNavbarElement: {
        prototype: HTMLBalNavbarElement;
        new (): HTMLBalNavbarElement;
    };
    interface HTMLBalNavbarBrandElement extends Components.BalNavbarBrand, HTMLStencilElement {
    }
    var HTMLBalNavbarBrandElement: {
        prototype: HTMLBalNavbarBrandElement;
        new (): HTMLBalNavbarBrandElement;
    };
    interface HTMLBalNavbarMenuElement extends Components.BalNavbarMenu, HTMLStencilElement {
    }
    var HTMLBalNavbarMenuElement: {
        prototype: HTMLBalNavbarMenuElement;
        new (): HTMLBalNavbarMenuElement;
    };
    interface HTMLBalNavbarMenuEndElement extends Components.BalNavbarMenuEnd, HTMLStencilElement {
    }
    var HTMLBalNavbarMenuEndElement: {
        prototype: HTMLBalNavbarMenuEndElement;
        new (): HTMLBalNavbarMenuEndElement;
    };
    interface HTMLBalNavbarMenuStartElement extends Components.BalNavbarMenuStart, HTMLStencilElement {
    }
    var HTMLBalNavbarMenuStartElement: {
        prototype: HTMLBalNavbarMenuStartElement;
        new (): HTMLBalNavbarMenuStartElement;
    };
    interface HTMLBalNoticesElement extends Components.BalNotices, HTMLStencilElement {
    }
    var HTMLBalNoticesElement: {
        prototype: HTMLBalNoticesElement;
        new (): HTMLBalNoticesElement;
    };
    interface HTMLBalNotificationElement extends Components.BalNotification, HTMLStencilElement {
    }
    var HTMLBalNotificationElement: {
        prototype: HTMLBalNotificationElement;
        new (): HTMLBalNotificationElement;
    };
    interface HTMLBalPaginationElement extends Components.BalPagination, HTMLStencilElement {
    }
    var HTMLBalPaginationElement: {
        prototype: HTMLBalPaginationElement;
        new (): HTMLBalPaginationElement;
    };
    interface HTMLBalRadioElement extends Components.BalRadio, HTMLStencilElement {
    }
    var HTMLBalRadioElement: {
        prototype: HTMLBalRadioElement;
        new (): HTMLBalRadioElement;
    };
    interface HTMLBalRadioGroupElement extends Components.BalRadioGroup, HTMLStencilElement {
    }
    var HTMLBalRadioGroupElement: {
        prototype: HTMLBalRadioGroupElement;
        new (): HTMLBalRadioGroupElement;
    };
    interface HTMLBalSelectElement extends Components.BalSelect, HTMLStencilElement {
    }
    var HTMLBalSelectElement: {
        prototype: HTMLBalSelectElement;
        new (): HTMLBalSelectElement;
    };
    interface HTMLBalSelectOptionElement extends Components.BalSelectOption, HTMLStencilElement {
    }
    var HTMLBalSelectOptionElement: {
        prototype: HTMLBalSelectOptionElement;
        new (): HTMLBalSelectOptionElement;
    };
    interface HTMLBalSheetElement extends Components.BalSheet, HTMLStencilElement {
    }
    var HTMLBalSheetElement: {
        prototype: HTMLBalSheetElement;
        new (): HTMLBalSheetElement;
    };
    interface HTMLBalSliderElement extends Components.BalSlider, HTMLStencilElement {
    }
    var HTMLBalSliderElement: {
        prototype: HTMLBalSliderElement;
        new (): HTMLBalSliderElement;
    };
    interface HTMLBalSnackbarElement extends Components.BalSnackbar, HTMLStencilElement {
    }
    var HTMLBalSnackbarElement: {
        prototype: HTMLBalSnackbarElement;
        new (): HTMLBalSnackbarElement;
    };
    interface HTMLBalSpinnerElement extends Components.BalSpinner, HTMLStencilElement {
    }
    var HTMLBalSpinnerElement: {
        prototype: HTMLBalSpinnerElement;
        new (): HTMLBalSpinnerElement;
    };
    interface HTMLBalTabItemElement extends Components.BalTabItem, HTMLStencilElement {
    }
    var HTMLBalTabItemElement: {
        prototype: HTMLBalTabItemElement;
        new (): HTMLBalTabItemElement;
    };
    interface HTMLBalTableElement extends Components.BalTable, HTMLStencilElement {
    }
    var HTMLBalTableElement: {
        prototype: HTMLBalTableElement;
        new (): HTMLBalTableElement;
    };
    interface HTMLBalTabsElement extends Components.BalTabs, HTMLStencilElement {
    }
    var HTMLBalTabsElement: {
        prototype: HTMLBalTabsElement;
        new (): HTMLBalTabsElement;
    };
    interface HTMLBalTagElement extends Components.BalTag, HTMLStencilElement {
    }
    var HTMLBalTagElement: {
        prototype: HTMLBalTagElement;
        new (): HTMLBalTagElement;
    };
    interface HTMLBalTextElement extends Components.BalText, HTMLStencilElement {
    }
    var HTMLBalTextElement: {
        prototype: HTMLBalTextElement;
        new (): HTMLBalTextElement;
    };
    interface HTMLBalTextareaElement extends Components.BalTextarea, HTMLStencilElement {
    }
    var HTMLBalTextareaElement: {
        prototype: HTMLBalTextareaElement;
        new (): HTMLBalTextareaElement;
    };
    interface HTMLBalTimeinputElement extends Components.BalTimeinput, HTMLStencilElement {
    }
    var HTMLBalTimeinputElement: {
        prototype: HTMLBalTimeinputElement;
        new (): HTMLBalTimeinputElement;
    };
    interface HTMLBalToastElement extends Components.BalToast, HTMLStencilElement {
    }
    var HTMLBalToastElement: {
        prototype: HTMLBalToastElement;
        new (): HTMLBalToastElement;
    };
    interface HTMLElementTagNameMap {
        "bal-accordion": HTMLBalAccordionElement;
        "bal-app": HTMLBalAppElement;
        "bal-button": HTMLBalButtonElement;
        "bal-card": HTMLBalCardElement;
        "bal-card-actions": HTMLBalCardActionsElement;
        "bal-card-button": HTMLBalCardButtonElement;
        "bal-card-content": HTMLBalCardContentElement;
        "bal-card-head": HTMLBalCardHeadElement;
        "bal-card-heading": HTMLBalCardHeadingElement;
        "bal-card-steps": HTMLBalCardStepsElement;
        "bal-card-subtitle": HTMLBalCardSubtitleElement;
        "bal-card-title": HTMLBalCardTitleElement;
        "bal-checkbox": HTMLBalCheckboxElement;
        "bal-data": HTMLBalDataElement;
        "bal-data-item": HTMLBalDataItemElement;
        "bal-data-label": HTMLBalDataLabelElement;
        "bal-data-value": HTMLBalDataValueElement;
        "bal-datepicker": HTMLBalDatepickerElement;
        "bal-doc-app": HTMLBalDocAppElement;
        "bal-doc-color": HTMLBalDocColorElement;
        "bal-doc-download": HTMLBalDocDownloadElement;
        "bal-doc-icons": HTMLBalDocIconsElement;
        "bal-doc-image": HTMLBalDocImageElement;
        "bal-dropdown": HTMLBalDropdownElement;
        "bal-dropdown-menu": HTMLBalDropdownMenuElement;
        "bal-dropdown-trigger": HTMLBalDropdownTriggerElement;
        "bal-field": HTMLBalFieldElement;
        "bal-field-control": HTMLBalFieldControlElement;
        "bal-field-hint": HTMLBalFieldHintElement;
        "bal-field-label": HTMLBalFieldLabelElement;
        "bal-field-message": HTMLBalFieldMessageElement;
        "bal-file-upload": HTMLBalFileUploadElement;
        "bal-footer": HTMLBalFooterElement;
        "bal-heading": HTMLBalHeadingElement;
        "bal-hint": HTMLBalHintElement;
        "bal-hint-text": HTMLBalHintTextElement;
        "bal-hint-title": HTMLBalHintTitleElement;
        "bal-icon": HTMLBalIconElement;
        "bal-input": HTMLBalInputElement;
        "bal-list": HTMLBalListElement;
        "bal-list-item": HTMLBalListItemElement;
        "bal-list-item-content": HTMLBalListItemContentElement;
        "bal-list-item-icon": HTMLBalListItemIconElement;
        "bal-list-item-subtitle": HTMLBalListItemSubtitleElement;
        "bal-list-item-title": HTMLBalListItemTitleElement;
        "bal-modal": HTMLBalModalElement;
        "bal-modal-actions": HTMLBalModalActionsElement;
        "bal-modal-body": HTMLBalModalBodyElement;
        "bal-modal-footer": HTMLBalModalFooterElement;
        "bal-modal-header": HTMLBalModalHeaderElement;
        "bal-navbar": HTMLBalNavbarElement;
        "bal-navbar-brand": HTMLBalNavbarBrandElement;
        "bal-navbar-menu": HTMLBalNavbarMenuElement;
        "bal-navbar-menu-end": HTMLBalNavbarMenuEndElement;
        "bal-navbar-menu-start": HTMLBalNavbarMenuStartElement;
        "bal-notices": HTMLBalNoticesElement;
        "bal-notification": HTMLBalNotificationElement;
        "bal-pagination": HTMLBalPaginationElement;
        "bal-radio": HTMLBalRadioElement;
        "bal-radio-group": HTMLBalRadioGroupElement;
        "bal-select": HTMLBalSelectElement;
        "bal-select-option": HTMLBalSelectOptionElement;
        "bal-sheet": HTMLBalSheetElement;
        "bal-slider": HTMLBalSliderElement;
        "bal-snackbar": HTMLBalSnackbarElement;
        "bal-spinner": HTMLBalSpinnerElement;
        "bal-tab-item": HTMLBalTabItemElement;
        "bal-table": HTMLBalTableElement;
        "bal-tabs": HTMLBalTabsElement;
        "bal-tag": HTMLBalTagElement;
        "bal-text": HTMLBalTextElement;
        "bal-textarea": HTMLBalTextareaElement;
        "bal-timeinput": HTMLBalTimeinputElement;
        "bal-toast": HTMLBalToastElement;
    }
}
declare namespace LocalJSX {
    interface BalAccordion {
        /**
          * If `true` the accordion is used on the bottom of a card
         */
        "card"?: boolean;
        /**
          * Bal-Icon of the close trigger button
         */
        "closeIcon"?: string;
        /**
          * Label of the close trigger button
         */
        "closeLabel"?: string;
        /**
          * Type defines the theme of the accordion toggle
         */
        "color"?: ColorTypesBasic;
        /**
          * Controls if the accordion is collapsed or not
         */
        "isActive"?: boolean;
        /**
          * Emmited when the accordion has changed
         */
        "onBalCollapse"?: (event: CustomEvent<boolean>) => void;
        /**
          * Bal-Icon of the open trigger button
         */
        "openIcon"?: string;
        /**
          * Label of the open trigger button
         */
        "openLabel"?: string;
    }
    interface BalApp {
        /**
          * If `true` it adds a light background to the app
         */
        "background"?: boolean;
        /**
          * If `true` the bal-app can be used with header, main and footer. The footer will then be sticky to the bottom.
         */
        "hasStickyFooter"?: boolean;
    }
    interface BalButton {
        /**
          * If `true` the bottom corners get rounded
         */
        "bottomRounded"?: boolean;
        /**
          * The color to use from your application's color palette.
         */
        "color"?: BalButtonColor;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * If `true` the button has a full width
         */
        "expanded"?: boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string | undefined;
        /**
          * Name of the left button icon
         */
        "icon"?: string;
        /**
          * Size of the button
         */
        "iconPosition"?: 'left' | 'right';
        /**
          * Name of the right button icon
         */
        "iconRight"?: string;
        /**
          * If `true` the button is inverted
         */
        "inverted"?: boolean;
        /**
          * If `true` the button has a active theme
         */
        "isActive"?: boolean;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading"?: boolean;
        /**
          * The name of the button, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the button loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the button has been  rendered.
         */
        "onBalDidRender"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onBalFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the link element has clicked.
         */
        "onBalNavigate"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * If `true` the button is outlined
         */
        "outlined"?: boolean;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * Size of the button
         */
        "size"?: 'small' | '';
        /**
          * If `true` the width of the buttons is limited
         */
        "square"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target"?: '_blank' | ' _parent' | '_self' | '_top';
        /**
          * If `true` the top corners get rounded
         */
        "topRounded"?: boolean;
        /**
          * The type of button.
         */
        "type"?: 'button' | 'reset' | 'submit';
        /**
          * The value of the button, which is submitted with the form data.
         */
        "value"?: string | number;
    }
    interface BalCard {
        /**
          * If `true` a light blue border is added to the card.
         */
        "border"?: boolean;
        /**
          * Defines the color of the card.
         */
        "color"?: ColorTypes | '';
        /**
          * If `true` the card loses its shadow.
         */
        "flat"?: boolean;
        /**
          * If `true` a card will not have a shadow on mobile.
         */
        "flatMobile"?: boolean;
        /**
          * If `true` the card background color becomes blue.
         */
        "inverted"?: boolean;
        /**
          * Defines the size of the padding grid
         */
        "spacing"?: SpacingCardType;
        /**
          * If `true` the card loses its border radius.
         */
        "square"?: boolean;
        /**
          * If `true` the card has a limited width on desktop.
         */
        "teaser"?: boolean;
    }
    interface BalCardActions {
        /**
          * If `true` the buttons start form right to left.
         */
        "right"?: boolean;
    }
    interface BalCardButton {
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string | undefined;
        /**
          * Name of the icon like `edit`.
         */
        "icon"?: string;
        /**
          * Name of the right button icon
         */
        "iconRight"?: string;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target"?: '_blank' | ' _parent' | '_self' | '_top';
        /**
          * The type of button.
         */
        "type"?: 'button' | 'reset' | 'submit';
    }
    interface BalCardContent {
        /**
          * If `true` the card text color becomes white.
         */
        "inverted"?: boolean;
    }
    interface BalCardHead {
    }
    interface BalCardHeading {
    }
    interface BalCardSteps {
    }
    interface BalCardSubtitle {
        /**
          * If `true` the card text color becomes white.
         */
        "inverted"?: boolean;
    }
    interface BalCardTitle {
        /**
          * If `true` the card text color becomes white.
         */
        "inverted"?: boolean;
    }
    interface BalCheckbox {
        /**
          * The tabindex of the control.
         */
        "balTabindex"?: number;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the checkbox button
         */
        "interface"?: 'checkbox' | 'switch';
        /**
          * If `true`, the control works on dark background.
         */
        "inverted"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onBalChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * Emitted when the toggle has focus.
         */
        "onBalFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * The value of the control.
         */
        "value"?: string;
    }
    interface BalData {
        /**
          * If `true` a bottom border is added to the data-item.
         */
        "border"?: boolean;
        /**
          * If `true` the data list is horizontal instead of vertical.
         */
        "horizontal"?: boolean;
    }
    interface BalDataItem {
        /**
          * If `true` the item gets a lighter font color.
         */
        "disabled"?: boolean;
    }
    interface BalDataLabel {
        /**
          * If `true` an asterix is added after the label.
         */
        "required"?: boolean;
    }
    interface BalDataValue {
        /**
          * If `true` the button will get disabled.
         */
        "disabled"?: boolean;
        /**
          * If `true` a small button with a edit icon will be shown on the right.
         */
        "editable"?: boolean;
        /**
          * Emitted when the edit button loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the edit button has focus.
         */
        "onBalClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the edit button has focus.
         */
        "onBalFocus"?: (event: CustomEvent<void>) => void;
    }
    interface BalDatepicker {
        /**
          * Callback to determine which date in the datepicker should be selectable.
         */
        "allowedDates"?: BalDateCallback | undefined;
        /**
          * The tabindex of the control.
         */
        "balTabindex"?: number;
        /**
          * Closes the datepicker dropdown after selection
         */
        "closeOnSelect"?: boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * The date to defines where the datepicker popup starts. The prop accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "defaultDate"?: string | null;
        /**
          * If `true` the component is diabled.
         */
        "disabled"?: boolean;
        /**
          * If `true` the component uses the whole width.
         */
        "expanded"?: boolean;
        /**
          * Set this to `true` when the component is placed on a dark background.
         */
        "inverted"?: boolean;
        /**
          * Define the locale of month and day names.
         */
        "locale"?: 'en' | 'de' | 'fr' | 'it';
        /**
          * The maximum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the maximum could just be the year, such as `1994`. Defaults to the end of this year.
         */
        "max"?: string;
        /**
          * Latest year available for selection
         */
        "maxYearProp"?: number | undefined;
        /**
          * The minimum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), such as `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the minimum could just be the year, such as `1994`. Defaults to the beginning of the year, 100 years ago from today.
         */
        "min"?: string;
        /**
          * Earliest year available for selection
         */
        "minYearProp"?: number | undefined;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a option got selected.
         */
        "onBalChange"?: (event: CustomEvent<string | undefined | null>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: CustomEvent<string>) => void;
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string | undefined;
        /**
          * If `true` the use can only select a date.
         */
        "readonly"?: boolean;
        /**
          * If `true` the attribute required is added to the native input.
         */
        "required"?: boolean;
        /**
          * If `true` the datepicker only open on click of the icon
         */
        "triggerIcon"?: boolean;
        /**
          * The value of the form field, which accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "value"?: string | null;
    }
    interface BalDocApp {
    }
    interface BalDocColor {
        "background"?: boolean;
        "color"?: string;
        "description"?: string;
        "inverted"?: boolean;
        "scssVars"?: string;
        "subject"?: string;
    }
    interface BalDocDownload {
        "iconLeft"?: string;
        "iconRight"?: string;
        "link"?: string;
        "subject"?: string;
        "subtitle"?: string;
    }
    interface BalDocIcons {
        "icons"?: string;
    }
    interface BalDocImage {
        "src"?: string;
        "text"?: string;
    }
    interface BalDropdown {
        /**
          * If `true` the field spans over the whole width.
         */
        "expanded"?: boolean;
        /**
          * If `true` the dropdown content has a fixed width
         */
        "fixedContentWidth"?: boolean;
        /**
          * If `true` the dropdown content is open.
         */
        "isActive"?: boolean;
        /**
          * Listen when the dropdown opens or closes. Returns the current `isActive` value.
         */
        "onBalCollapse"?: (event: CustomEvent<boolean>) => void;
        "onBalDropdownPrepare"?: (event: CustomEvent<string>) => void;
    }
    interface BalDropdownMenu {
        /**
          * Limit the height of the dropdown content. Pass the amount of pixel.
         */
        "scrollable"?: number;
    }
    interface BalDropdownTrigger {
    }
    interface BalField {
        /**
          * If `true` the field loses opacity
         */
        "disabled"?: boolean;
        /**
          * If `true` the component takes the whole width
         */
        "expanded"?: boolean;
        /**
          * If `true` the component gets a invalid style. Only use this if there is no live validation.
         */
        "invalid"?: boolean;
        /**
          * If `true` the field can be used on blue background.
         */
        "inverted"?: boolean;
        /**
          * If `true` a loading spinner is visible at the end of the input
         */
        "loading"?: boolean;
    }
    interface BalFieldControl {
        /**
          * Baloise icon for the left side of the input
         */
        "iconLeft"?: string;
        /**
          * Baloise icon for the right side of the input
         */
        "iconRight"?: string;
        /**
          * If `true` the field can be used on blue background.
         */
        "inverted"?: boolean;
        /**
          * If `true` a loading spinner is visible at the end of the input
         */
        "loading"?: boolean;
    }
    interface BalFieldHint {
        /**
          * Text of the inputs label
         */
        "subject"?: string;
    }
    interface BalFieldLabel {
        /**
          * If `true` the component takes the whole width
         */
        "expanded"?: boolean;
        /**
          * If `true` a asterix (*) is added to the label text
         */
        "required"?: boolean;
    }
    interface BalFieldMessage {
        /**
          * Defines the color of the message.
         */
        "color"?: '' | ColorTypesExtended;
        /**
          * If `true` the component takes the whole width
         */
        "expanded"?: boolean;
    }
    interface BalFileUpload {
        /**
          * Accepted MIME-Types like `image/png,image/jpeg`.
         */
        "accept"?: string;
        /**
          * If `true` the button is disabled
         */
        "disabled"?: boolean;
        /**
          * If `true` below the drop-down area it generates a file list.
         */
        "hasFileList"?: boolean;
        /**
          * Label of the drop area.
         */
        "label"?: string;
        /**
          * Allowed max bundle size in bytes.
         */
        "maxBundleSize"?: number | undefined;
        /**
          * Allowed max file size in bytes.
         */
        "maxFileSize"?: number | undefined;
        /**
          * Allowed number of files in the bundle.
         */
        "maxFiles"?: number | undefined;
        /**
          * If `true` multiple file upload is possible.
         */
        "multiple"?: boolean;
        /**
          * Triggers when a file is added or removed.
         */
        "onBalChange"?: (event: CustomEvent<File[]>) => void;
        /**
          * Triggers when a file is rejected due to not allowed MIME-Type and so on.
         */
        "onBalRejectedFile"?: (event: CustomEvent<FileUploadRejectedFile>) => void;
        /**
          * Overrides the default subtitle filesize
         */
        "subTitle"?: ((file: File) => string) | undefined;
        /**
          * Input value.
         */
        "value"?: File[];
    }
    interface BalFooter {
        /**
          * If `true` the footer shows a track line at the bottom.
         */
        "hasTrackLine"?: boolean;
        /**
          * If `true` the default Baloise links will be hidden.
         */
        "hideLinks"?: boolean;
        /**
          * The languages in which the links will appear.
         */
        "locale"?: 'en' | 'de' | 'fr' | 'it';
    }
    interface BalHeading {
        /**
          * The theme type of the toast. Given by bulma our css framework.
         */
        "color"?: ColorTypes | '';
        /**
          * If `true` the button is inverted
         */
        "inverted"?: boolean;
        /**
          * The actual heading level used in the HTML markup.
         */
        "level"?: HeadingLevels;
        /**
          * Defines at which position the heading has spacing.
         */
        "space"?: 'all' | 'none' | 'top' | 'bottom';
        /**
          * If `true` the heading gets displayed slimmer.
         */
        "subtitle"?: boolean;
        /**
          * Make the visual style mimic a specific heading level. This option allows you to make e.g. h1 visually look like h3, but still keep it h1 in the markup.
         */
        "visualLevel"?: HeadingLevels | undefined;
    }
    interface BalHint {
        /**
          * Text for the close button.
         */
        "closeLabel"?: string;
        /**
          * Disables the close button for tablet and desktop
         */
        "small"?: boolean;
    }
    interface BalHintText {
    }
    interface BalHintTitle {
    }
    interface BalIcon {
        /**
          * The theme type of the button. Given by bulma our css framework.
         */
        "color"?: BalButtonColor;
        /**
          * If `true` the button is inverted
         */
        "inverted"?: boolean;
        /**
          * Name of the baloise icon.
         */
        "name"?: string;
        /**
          * If `true` the icon rotates like for a loading spinner
         */
        "rotate"?: boolean;
        /**
          * Defines the size of the icon.
         */
        "size"?: 'xsmall' | 'small' | 'medium' | 'large' | '';
        /**
          * Svg content.
         */
        "svg"?: string;
        /**
          * If `true` the icon is rotated 180deg
         */
        "turn"?: boolean;
    }
    interface BalInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * The tabindex of the control.
         */
        "balTabindex"?: number;
        /**
          * If `true` the input gets a clickable cursor style
         */
        "clickable"?: boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * Defins the allowed decimal points for the `number-input`.
         */
        "decimal"?: number;
        /**
          * If `true` the input is disabled
         */
        "disabled"?: boolean;
        "hasIconRight"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * If `true` this component can be placed on dark background
         */
        "inverted"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * Defines the max length of the value.
         */
        "maxLength"?: number | undefined;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * Defines the min length of the value.
         */
        "minLength"?: number | undefined;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * If `true` on mobile device the number keypad is active
         */
        "numberInput"?: boolean;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onBalChange"?: (event: CustomEvent<string | number | null>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: CustomEvent<string | number | null>) => void;
        /**
          * Emitted when a keyboard key has pressed.
         */
        "onBalKeyPress"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string | undefined;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Adds a suffix the the inputvalue after blur.
         */
        "suffix"?: string;
        /**
          * Defines the type of the input (text, number, email ...).
         */
        "type"?: InputTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number;
    }
    interface BalList {
        /**
          * If `true` each list item has a bottom border
         */
        "border"?: boolean;
        /**
          * If `true` the list item can be hovered
         */
        "disabled"?: boolean;
        /**
          * If `true` the list can be used on a dark backround
         */
        "inverted"?: boolean;
    }
    interface BalListItem {
        /**
          * If `true` the list item shows that it is clickable
         */
        "clickable"?: boolean;
        /**
          * If `true` the list item can be hovered
         */
        "disabled"?: boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string;
        /**
          * Emitted when the link element has clicked
         */
        "onBalNavigate"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * If `true` the list item has a selected theme
         */
        "selected"?: boolean;
        /**
          * Specifies where to open the linked document
         */
        "target"?: '_blank' | ' _parent' | '_self' | '_top';
    }
    interface BalListItemContent {
    }
    interface BalListItemIcon {
        /**
          * If `true` the icon is on the right side of the list item. Default is the left side.
         */
        "right"?: boolean;
    }
    interface BalListItemSubtitle {
    }
    interface BalListItemTitle {
    }
    interface BalModal {
        /**
          * The component to display inside of the modal.
         */
        "component": ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "dataTestId"?: string;
        "delegate"?: FrameworkDelegate;
        /**
          * If `true`, a backdrop will be displayed behind the modal.
         */
        "hasBackdrop"?: boolean;
        /**
          * Defines the look of the modal. The card interface should be used for scrollable content in the modal.
         */
        "interface"?: 'light' | 'card';
        /**
          * If `true`, the modal can be closed with the escape key or the little close button.
         */
        "isClosable"?: boolean;
        /**
          * Defines the width of the modal body
         */
        "modalWidth"?: number;
        /**
          * Emitted after the modal has dismissed.
         */
        "onBalModalDidDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the modal has presented.
         */
        "onBalModalDidPresent"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted before the modal has dismissed.
         */
        "onBalModalWillDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the modal has presented.
         */
        "onBalModalWillPresent"?: (event: CustomEvent<void>) => void;
        "overlayIndex": number;
    }
    interface BalModalActions {
    }
    interface BalModalBody {
    }
    interface BalModalFooter {
    }
    interface BalModalHeader {
    }
    interface BalNavbar {
        /**
          * It `true` the component uses the whole width
         */
        "expanded"?: boolean;
        /**
          * It `true` the navbar has a white background
         */
        "light"?: boolean;
        /**
          * It `true` the burger button is hidden
         */
        "noBurger"?: boolean;
    }
    interface BalNavbarBrand {
        /**
          * Link of the logo / title.
         */
        "href"?: string;
        /**
          * Emitted when the link element has clicked
         */
        "onBalNavigate"?: (event: CustomEvent<MouseEvent>) => void;
    }
    interface BalNavbarMenu {
    }
    interface BalNavbarMenuEnd {
    }
    interface BalNavbarMenuStart {
    }
    interface BalNotices {
        /**
          * The interface tells the notice where to show the notice.
         */
        "interface"?: 'toast' | 'snackbar';
    }
    interface BalNotification {
        /**
          * Defines the color of the element
         */
        "color"?: '' | ColorTypes;
    }
    interface BalPagination {
        /**
          * Disables component
         */
        "disabled"?: boolean;
        /**
          * Triggers when a page change happens
         */
        "onBalChange"?: (event: CustomEvent<number>) => void;
        /**
          * Specify the max visible pages before and after the selected page
         */
        "pageRange"?: number;
        /**
          * The total amount of pages
         */
        "totalPages"?: number;
        /**
          * Current selected page
         */
        "value"?: number;
    }
    interface BalRadio {
        /**
          * The tabindex of the control.
         */
        "balTabindex"?: number;
        /**
          * If `true`, the radio is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the radio button
         */
        "interface"?: 'radio' | 'select-button';
        /**
          * If `true`, the control works on dark background.
         */
        "inverted"?: boolean;
        /**
          * If `true` the radio has no label
         */
        "isEmpty"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the toggle has focus.
         */
        "onBalFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * The value of the control.
         */
        "value"?: string;
    }
    interface BalRadioGroup {
        /**
          * If `true`, the user cannot interact with the radios.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the radio button
         */
        "interface"?: 'radio' | 'select-button';
        /**
          * If `true` the component can be used on dark background
         */
        "inverted"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the checked property has changed.
         */
        "onBalChange"?: (event: CustomEvent<string>) => void;
        /**
          * The value of the control.
         */
        "value"?: string;
    }
    interface BalSelect {
        /**
          * The tabindex of the control.
         */
        "balTabindex"?: number;
        /**
          * If `true` the component is diabled.
         */
        "disabled"?: boolean;
        /**
          * If `true` the component uses the whole width.
         */
        "expanded"?: boolean;
        /**
          * Enables the slide in animation for the option items.
         */
        "hasMovement"?: boolean;
        /**
          * Set this to `true` when the component is placed on a dark background.
         */
        "inverted"?: boolean;
        /**
          * Defines if the select is in a loading state.
         */
        "loading"?: boolean;
        /**
          * If `true` multiple option can be selected
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Removes the border of the input.
         */
        "noBorder"?: boolean;
        /**
          * This label is shown if typeahead is active and all the options are filtered out.
         */
        "noDataLabel"?: string | undefined;
        /**
          * Emitted when the input loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the user cancels the input.
         */
        "onBalCancel"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted when a option got selected.
         */
        "onBalChange"?: (event: CustomEvent<string | string[] | undefined>) => void;
        /**
          * Emitted when the input got clicked.
         */
        "onBalClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: CustomEvent<string>) => void;
        /**
          * Emitted when the input has focus and key from the keyboard go hit.
         */
        "onBalKeyPress"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string;
        /**
          * Defines the height of the dropdown list.
         */
        "scrollable"?: number;
        /**
          * If `true` the user can search by typing into the input field.
         */
        "typeahead"?: boolean;
        /**
          * Selected option values. Could also be passed as a string, which gets transformed.
         */
        "value"?: string | string[] | undefined;
    }
    interface BalSelectOption {
        /**
          * If `true`, the user cannot interact with the option.
         */
        "disabled"?: boolean;
        /**
          * Label will be shown in the input element when it got selected
         */
        "label"?: string | undefined;
        /**
          * The value of the select option. This value will be returned by the parent `<bal-select>` element.
         */
        "value"?: string | undefined;
    }
    interface BalSheet {
    }
    interface BalSlider {
        /**
          * The tabindex of the control.
         */
        "balTabindex"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true` the input is disabled
         */
        "disabled"?: boolean;
        /**
          * If `true`, small ticks for the steps are shown.
         */
        "hasTicks"?: boolean;
        /**
          * Max value of the model.
         */
        "max"?: number;
        /**
          * Min value of the model.
         */
        "min"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onBalChange"?: (event: CustomEvent<string | number | null>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: CustomEvent<string | number | null>) => void;
        /**
          * Emitted when a keyboard key has pressed.
         */
        "onBalKeyPress"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The step size. 0 means no steps.
         */
        "step"?: number;
        /**
          * The value of the input.
         */
        "value"?: string | number;
    }
    interface BalSnackbar {
        /**
          * Label text for the action button
         */
        "action"?: string;
        "actionHandler"?: () => void;
        "closeHandler"?: () => void;
        /**
          * The theme type of the snackbar. Given by bulma our css framework.
         */
        "color"?: ColorTypes | '';
        /**
          * The duration of the snackbar
         */
        "duration"?: number;
        /**
          * The icon of the snackbar header
         */
        "icon"?: string;
        /**
          * The message of the snackbar
         */
        "message"?: string;
        /**
          * Emitted when the action button is clicked
         */
        "onBalAction"?: (event: CustomEvent<string>) => void;
        /**
          * Emitted when snackbar is closed
         */
        "onBalClose"?: (event: CustomEvent<string>) => void;
        /**
          * The subject of the snackbar header
         */
        "subject"?: string;
    }
    interface BalSpinner {
        /**
          * If `true` the component can be used on dark background
         */
        "inverted"?: boolean;
        /**
          * If `true` the component is smaller
         */
        "small"?: boolean;
    }
    interface BalTabItem {
        /**
          * Tell's if the tab is active and the content is visible.
         */
        "active"?: boolean;
        /**
          * If `true` a small red bubble is added to the tab.
         */
        "bubble"?: boolean;
        /**
          * If `true` the tab is disabled.
         */
        "disabled"?: boolean;
        /**
          * If `true` the step is marked as done.
         */
        "done"?: boolean;
        /**
          * If `true` the step is marked as failed.
         */
        "failed"?: boolean;
        /**
          * Link to path.
         */
        "href"?: string;
        /**
          * Label for the tab.
         */
        "label"?: string;
        /**
          * Emitted when the link element has clicked
         */
        "onBalNavigate"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Tell's if the linking is done by a router.
         */
        "prevent"?: boolean;
        /**
          * This is the key of the tab.
         */
        "value"?: string;
    }
    interface BalTable {
        /**
          * If `true` the table has a full width
         */
        "expanded"?: boolean;
    }
    interface BalTabs {
        /**
          * If `true` a acation button is added to the right
         */
        "action"?: boolean;
        /**
          * Label for the action button
         */
        "actionLabel"?: string;
        /**
          * If `true` the tabs or steps can be clicked.
         */
        "clickable"?: boolean;
        /**
          * If `true` the field expands over the whole width.
         */
        "expanded"?: boolean;
        /**
          * Defines the layout of the tabs.
         */
        "interface"?: 'tabs' | 'steps' | 'o-steps';
        /**
          * Emitted when the action button has clicked
         */
        "onBalActionClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the changes has finished.
         */
        "onBalTabChange"?: (event: CustomEvent<BalTabOption>) => void;
        /**
          * If you want the rounded tab style.
         */
        "rounded"?: boolean;
    }
    interface BalTag {
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "closable"?: boolean;
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "color"?: ColorTypes | '';
        "dense"?: boolean;
        /**
          * Emitted when the input got clicked.
         */
        "onBalCloseClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * The size of the tag element
         */
        "size"?: 'small' | 'medium' | 'large' | '';
        "transparent"?: boolean;
    }
    interface BalText {
        /**
          * If `true` the text is bold
         */
        "bold"?: boolean;
        /**
          * Defines the color of the text.
         */
        "color"?: ColorTypes | 'hint' | '';
        /**
          * If `true` the text has a small size
         */
        "small"?: boolean;
    }
    interface BalTextarea {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize"?: string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * The tabindex of the control.
         */
        "balTabindex"?: number;
        /**
          * If `true` the input gets a clickable cursor style
         */
        "clickable"?: boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * If `true` this component can be placed on dark background
         */
        "inverted"?: boolean;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxLength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minLength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed..
         */
        "onBalChange"?: (event: CustomEvent<string>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: CustomEvent<string>) => void;
        /**
          * Emitted when a keyboard key has pressed.
         */
        "onBalKeyPress"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * The value of the textarea.
         */
        "value"?: string;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface BalTimeinput {
        /**
          * If `true` the button is disabled
         */
        "disabled"?: boolean;
        /**
          * If `true` the timeinput can be used on blue background.
         */
        "inverted"?: boolean;
        /**
          * Latest date available for selection
         */
        "maxTime"?: string;
        /**
          * Earliest date available for selection
         */
        "minTime"?: string;
        /**
          * Emitted when either the hour or minute input field loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when either the hour or the minute input has changed. It will not be triggert if either hour or time input has never been set (i.e. "--" is selected).
         */
        "onBalChange"?: (event: CustomEvent<string>) => void;
        /**
          * The value of the datepicker with the format `hh:mm`.
         */
        "value"?: string;
    }
    interface BalToast {
        "closeHandler"?: () => void;
        /**
          * The theme type of the toast. Given by bulma our css framework.
         */
        "color"?: ColorTypes | '';
        /**
          * The duration of the toast in milliseconds.
         */
        "duration"?: number;
        /**
          * Content message
         */
        "message"?: string;
        /**
          * Emitted when toast is closed
         */
        "onBalClose"?: (event: CustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "bal-accordion": BalAccordion;
        "bal-app": BalApp;
        "bal-button": BalButton;
        "bal-card": BalCard;
        "bal-card-actions": BalCardActions;
        "bal-card-button": BalCardButton;
        "bal-card-content": BalCardContent;
        "bal-card-head": BalCardHead;
        "bal-card-heading": BalCardHeading;
        "bal-card-steps": BalCardSteps;
        "bal-card-subtitle": BalCardSubtitle;
        "bal-card-title": BalCardTitle;
        "bal-checkbox": BalCheckbox;
        "bal-data": BalData;
        "bal-data-item": BalDataItem;
        "bal-data-label": BalDataLabel;
        "bal-data-value": BalDataValue;
        "bal-datepicker": BalDatepicker;
        "bal-doc-app": BalDocApp;
        "bal-doc-color": BalDocColor;
        "bal-doc-download": BalDocDownload;
        "bal-doc-icons": BalDocIcons;
        "bal-doc-image": BalDocImage;
        "bal-dropdown": BalDropdown;
        "bal-dropdown-menu": BalDropdownMenu;
        "bal-dropdown-trigger": BalDropdownTrigger;
        "bal-field": BalField;
        "bal-field-control": BalFieldControl;
        "bal-field-hint": BalFieldHint;
        "bal-field-label": BalFieldLabel;
        "bal-field-message": BalFieldMessage;
        "bal-file-upload": BalFileUpload;
        "bal-footer": BalFooter;
        "bal-heading": BalHeading;
        "bal-hint": BalHint;
        "bal-hint-text": BalHintText;
        "bal-hint-title": BalHintTitle;
        "bal-icon": BalIcon;
        "bal-input": BalInput;
        "bal-list": BalList;
        "bal-list-item": BalListItem;
        "bal-list-item-content": BalListItemContent;
        "bal-list-item-icon": BalListItemIcon;
        "bal-list-item-subtitle": BalListItemSubtitle;
        "bal-list-item-title": BalListItemTitle;
        "bal-modal": BalModal;
        "bal-modal-actions": BalModalActions;
        "bal-modal-body": BalModalBody;
        "bal-modal-footer": BalModalFooter;
        "bal-modal-header": BalModalHeader;
        "bal-navbar": BalNavbar;
        "bal-navbar-brand": BalNavbarBrand;
        "bal-navbar-menu": BalNavbarMenu;
        "bal-navbar-menu-end": BalNavbarMenuEnd;
        "bal-navbar-menu-start": BalNavbarMenuStart;
        "bal-notices": BalNotices;
        "bal-notification": BalNotification;
        "bal-pagination": BalPagination;
        "bal-radio": BalRadio;
        "bal-radio-group": BalRadioGroup;
        "bal-select": BalSelect;
        "bal-select-option": BalSelectOption;
        "bal-sheet": BalSheet;
        "bal-slider": BalSlider;
        "bal-snackbar": BalSnackbar;
        "bal-spinner": BalSpinner;
        "bal-tab-item": BalTabItem;
        "bal-table": BalTable;
        "bal-tabs": BalTabs;
        "bal-tag": BalTag;
        "bal-text": BalText;
        "bal-textarea": BalTextarea;
        "bal-timeinput": BalTimeinput;
        "bal-toast": BalToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bal-accordion": LocalJSX.BalAccordion & JSXBase.HTMLAttributes<HTMLBalAccordionElement>;
            "bal-app": LocalJSX.BalApp & JSXBase.HTMLAttributes<HTMLBalAppElement>;
            "bal-button": LocalJSX.BalButton & JSXBase.HTMLAttributes<HTMLBalButtonElement>;
            "bal-card": LocalJSX.BalCard & JSXBase.HTMLAttributes<HTMLBalCardElement>;
            "bal-card-actions": LocalJSX.BalCardActions & JSXBase.HTMLAttributes<HTMLBalCardActionsElement>;
            "bal-card-button": LocalJSX.BalCardButton & JSXBase.HTMLAttributes<HTMLBalCardButtonElement>;
            "bal-card-content": LocalJSX.BalCardContent & JSXBase.HTMLAttributes<HTMLBalCardContentElement>;
            "bal-card-head": LocalJSX.BalCardHead & JSXBase.HTMLAttributes<HTMLBalCardHeadElement>;
            "bal-card-heading": LocalJSX.BalCardHeading & JSXBase.HTMLAttributes<HTMLBalCardHeadingElement>;
            "bal-card-steps": LocalJSX.BalCardSteps & JSXBase.HTMLAttributes<HTMLBalCardStepsElement>;
            "bal-card-subtitle": LocalJSX.BalCardSubtitle & JSXBase.HTMLAttributes<HTMLBalCardSubtitleElement>;
            "bal-card-title": LocalJSX.BalCardTitle & JSXBase.HTMLAttributes<HTMLBalCardTitleElement>;
            "bal-checkbox": LocalJSX.BalCheckbox & JSXBase.HTMLAttributes<HTMLBalCheckboxElement>;
            "bal-data": LocalJSX.BalData & JSXBase.HTMLAttributes<HTMLBalDataElement>;
            "bal-data-item": LocalJSX.BalDataItem & JSXBase.HTMLAttributes<HTMLBalDataItemElement>;
            "bal-data-label": LocalJSX.BalDataLabel & JSXBase.HTMLAttributes<HTMLBalDataLabelElement>;
            "bal-data-value": LocalJSX.BalDataValue & JSXBase.HTMLAttributes<HTMLBalDataValueElement>;
            "bal-datepicker": LocalJSX.BalDatepicker & JSXBase.HTMLAttributes<HTMLBalDatepickerElement>;
            "bal-doc-app": LocalJSX.BalDocApp & JSXBase.HTMLAttributes<HTMLBalDocAppElement>;
            "bal-doc-color": LocalJSX.BalDocColor & JSXBase.HTMLAttributes<HTMLBalDocColorElement>;
            "bal-doc-download": LocalJSX.BalDocDownload & JSXBase.HTMLAttributes<HTMLBalDocDownloadElement>;
            "bal-doc-icons": LocalJSX.BalDocIcons & JSXBase.HTMLAttributes<HTMLBalDocIconsElement>;
            "bal-doc-image": LocalJSX.BalDocImage & JSXBase.HTMLAttributes<HTMLBalDocImageElement>;
            "bal-dropdown": LocalJSX.BalDropdown & JSXBase.HTMLAttributes<HTMLBalDropdownElement>;
            "bal-dropdown-menu": LocalJSX.BalDropdownMenu & JSXBase.HTMLAttributes<HTMLBalDropdownMenuElement>;
            "bal-dropdown-trigger": LocalJSX.BalDropdownTrigger & JSXBase.HTMLAttributes<HTMLBalDropdownTriggerElement>;
            "bal-field": LocalJSX.BalField & JSXBase.HTMLAttributes<HTMLBalFieldElement>;
            "bal-field-control": LocalJSX.BalFieldControl & JSXBase.HTMLAttributes<HTMLBalFieldControlElement>;
            "bal-field-hint": LocalJSX.BalFieldHint & JSXBase.HTMLAttributes<HTMLBalFieldHintElement>;
            "bal-field-label": LocalJSX.BalFieldLabel & JSXBase.HTMLAttributes<HTMLBalFieldLabelElement>;
            "bal-field-message": LocalJSX.BalFieldMessage & JSXBase.HTMLAttributes<HTMLBalFieldMessageElement>;
            "bal-file-upload": LocalJSX.BalFileUpload & JSXBase.HTMLAttributes<HTMLBalFileUploadElement>;
            "bal-footer": LocalJSX.BalFooter & JSXBase.HTMLAttributes<HTMLBalFooterElement>;
            "bal-heading": LocalJSX.BalHeading & JSXBase.HTMLAttributes<HTMLBalHeadingElement>;
            "bal-hint": LocalJSX.BalHint & JSXBase.HTMLAttributes<HTMLBalHintElement>;
            "bal-hint-text": LocalJSX.BalHintText & JSXBase.HTMLAttributes<HTMLBalHintTextElement>;
            "bal-hint-title": LocalJSX.BalHintTitle & JSXBase.HTMLAttributes<HTMLBalHintTitleElement>;
            "bal-icon": LocalJSX.BalIcon & JSXBase.HTMLAttributes<HTMLBalIconElement>;
            "bal-input": LocalJSX.BalInput & JSXBase.HTMLAttributes<HTMLBalInputElement>;
            "bal-list": LocalJSX.BalList & JSXBase.HTMLAttributes<HTMLBalListElement>;
            "bal-list-item": LocalJSX.BalListItem & JSXBase.HTMLAttributes<HTMLBalListItemElement>;
            "bal-list-item-content": LocalJSX.BalListItemContent & JSXBase.HTMLAttributes<HTMLBalListItemContentElement>;
            "bal-list-item-icon": LocalJSX.BalListItemIcon & JSXBase.HTMLAttributes<HTMLBalListItemIconElement>;
            "bal-list-item-subtitle": LocalJSX.BalListItemSubtitle & JSXBase.HTMLAttributes<HTMLBalListItemSubtitleElement>;
            "bal-list-item-title": LocalJSX.BalListItemTitle & JSXBase.HTMLAttributes<HTMLBalListItemTitleElement>;
            "bal-modal": LocalJSX.BalModal & JSXBase.HTMLAttributes<HTMLBalModalElement>;
            "bal-modal-actions": LocalJSX.BalModalActions & JSXBase.HTMLAttributes<HTMLBalModalActionsElement>;
            "bal-modal-body": LocalJSX.BalModalBody & JSXBase.HTMLAttributes<HTMLBalModalBodyElement>;
            "bal-modal-footer": LocalJSX.BalModalFooter & JSXBase.HTMLAttributes<HTMLBalModalFooterElement>;
            "bal-modal-header": LocalJSX.BalModalHeader & JSXBase.HTMLAttributes<HTMLBalModalHeaderElement>;
            "bal-navbar": LocalJSX.BalNavbar & JSXBase.HTMLAttributes<HTMLBalNavbarElement>;
            "bal-navbar-brand": LocalJSX.BalNavbarBrand & JSXBase.HTMLAttributes<HTMLBalNavbarBrandElement>;
            "bal-navbar-menu": LocalJSX.BalNavbarMenu & JSXBase.HTMLAttributes<HTMLBalNavbarMenuElement>;
            "bal-navbar-menu-end": LocalJSX.BalNavbarMenuEnd & JSXBase.HTMLAttributes<HTMLBalNavbarMenuEndElement>;
            "bal-navbar-menu-start": LocalJSX.BalNavbarMenuStart & JSXBase.HTMLAttributes<HTMLBalNavbarMenuStartElement>;
            "bal-notices": LocalJSX.BalNotices & JSXBase.HTMLAttributes<HTMLBalNoticesElement>;
            "bal-notification": LocalJSX.BalNotification & JSXBase.HTMLAttributes<HTMLBalNotificationElement>;
            "bal-pagination": LocalJSX.BalPagination & JSXBase.HTMLAttributes<HTMLBalPaginationElement>;
            "bal-radio": LocalJSX.BalRadio & JSXBase.HTMLAttributes<HTMLBalRadioElement>;
            "bal-radio-group": LocalJSX.BalRadioGroup & JSXBase.HTMLAttributes<HTMLBalRadioGroupElement>;
            "bal-select": LocalJSX.BalSelect & JSXBase.HTMLAttributes<HTMLBalSelectElement>;
            "bal-select-option": LocalJSX.BalSelectOption & JSXBase.HTMLAttributes<HTMLBalSelectOptionElement>;
            "bal-sheet": LocalJSX.BalSheet & JSXBase.HTMLAttributes<HTMLBalSheetElement>;
            "bal-slider": LocalJSX.BalSlider & JSXBase.HTMLAttributes<HTMLBalSliderElement>;
            "bal-snackbar": LocalJSX.BalSnackbar & JSXBase.HTMLAttributes<HTMLBalSnackbarElement>;
            "bal-spinner": LocalJSX.BalSpinner & JSXBase.HTMLAttributes<HTMLBalSpinnerElement>;
            "bal-tab-item": LocalJSX.BalTabItem & JSXBase.HTMLAttributes<HTMLBalTabItemElement>;
            "bal-table": LocalJSX.BalTable & JSXBase.HTMLAttributes<HTMLBalTableElement>;
            "bal-tabs": LocalJSX.BalTabs & JSXBase.HTMLAttributes<HTMLBalTabsElement>;
            "bal-tag": LocalJSX.BalTag & JSXBase.HTMLAttributes<HTMLBalTagElement>;
            "bal-text": LocalJSX.BalText & JSXBase.HTMLAttributes<HTMLBalTextElement>;
            "bal-textarea": LocalJSX.BalTextarea & JSXBase.HTMLAttributes<HTMLBalTextareaElement>;
            "bal-timeinput": LocalJSX.BalTimeinput & JSXBase.HTMLAttributes<HTMLBalTimeinputElement>;
            "bal-toast": LocalJSX.BalToast & JSXBase.HTMLAttributes<HTMLBalToastElement>;
        }
    }
}
