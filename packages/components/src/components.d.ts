/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Events, Props } from "./types";
import { BannerStatusContext } from "./components/docs/bal-doc-banner-status/bal-doc-banner-status";
import { Props as Props1 } from ".";
import { FileUploadRejectedFile } from "./components/form/bal-file-upload/bal-file-upload.type";
import { OverlayEventDetail } from "./components/notice/bal-modal/bal-modal.type";
import { Events as Events1 } from "./events";
import { BalTabOption } from "./components/bal-tabs/bal-tab.type";
export namespace Components {
    interface BalAccordion {
        /**
          * If `true` the accordion is used on the bottom of a card
         */
        "card": boolean;
        /**
          * BalIcon of the close trigger button
         */
        "closeIcon": string;
        /**
          * Label of the close trigger button
         */
        "closeLabel": string;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * Closes the accordion
         */
        "dismiss": () => Promise<void>;
        /**
          * BalIcon of the open trigger button
         */
        "openIcon": string;
        /**
          * Label of the open trigger button
         */
        "openLabel": string;
        /**
          * Opens the accordion
         */
        "present": () => Promise<void>;
        /**
          * Triggers the accordion
         */
        "toggle": () => Promise<void>;
        /**
          * If `true` the accordion is open.
         */
        "value": boolean;
    }
    interface BalApp {
    }
    interface BalBadge {
        /**
          * Define the alert color for the badge.
         */
        "color": Props.BalBadgeColor;
        /**
          * Name of the icon to show. If a icon is present text should be hidden.
         */
        "icon"?: string;
        /**
          * If `true` the badge is added to the top right corner of the card.
         */
        "position": Props.BalBadgePosition;
        /**
          * Define the size of badge. Small is recommended for tabs.
         */
        "size": Props.BalBadgeSize;
    }
    interface BalButton {
        /**
          * If `true` the bottom corners get rounded
         */
        "bottomRounded": undefined | boolean;
        /**
          * The color to use from your application's color palette.
         */
        "color": Props.BalButtonColor;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string;
        /**
          * The type of button.
         */
        "elementType": Props.BalButtonElementType;
        /**
          * If `true` the button has a full width
         */
        "expanded": boolean;
        /**
          * If `true` the button has no padding and a reduced height
         */
        "flat": boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string;
        /**
          * Name of the left button icon
         */
        "icon": string;
        /**
          * Name of the right button icon
         */
        "iconRight": string;
        /**
          * If `true` the button is inverted
         */
        "inverted": boolean;
        /**
          * If `true` the button has a active theme
         */
        "isActive": boolean;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading": boolean;
        /**
          * The name of the button, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * If `true` the button is outlined
         */
        "outlined": boolean;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string;
        /**
          * If `true` the button is rounded.
         */
        "rounded": boolean;
        /**
          * Size of the button
         */
        "size": Props.BalButtonSize;
        /**
          * If `true` the width of the buttons is limited
         */
        "square": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target": Props.BalButtonTarget;
        /**
          * If `true` the top corners get rounded
         */
        "topRounded": undefined | boolean;
        /**
          * The value of the button, which is submitted with the form data.
         */
        "value"?: string | number;
    }
    interface BalButtonGroup {
        /**
          * `auto` will position the button items vertical and full width. `row` will force that the buttons are also horizontal on mobile.
         */
        "direction": Props.BalButtonGroupDirection;
        /**
          * The value of the button, which is submitted with the form data.
         */
        "position": Props.BalButtonGroupPosition;
        /**
          * If `true` the flex direction is used in reverse on mobile.
         */
        "reverse": boolean;
    }
    interface BalCard {
        /**
          * If `true` a light blue border is added to the card.
         */
        "border": boolean;
        /**
          * If `true` the card has a hover effect.
         */
        "clickable": boolean;
        /**
          * Defines the color of the card.
         */
        "color": Props.BalCardColor;
        /**
          * If `true` the card loses its shadow.
         */
        "flat": boolean;
        /**
          * If `true` the card uses 100% of the available height.
         */
        "fullheight": boolean;
        /**
          * If `true` the card background color becomes blue.
         */
        "inverted": boolean;
        /**
          * If `true` the card gets a light background to indicate a selection.
         */
        "selected": boolean;
        /**
          * Defines the space of the card content.
         */
        "space": Props.BalCardSpace;
        /**
          * If `true` the card loses its border radius.
         */
        "square": boolean;
    }
    interface BalCardActions {
        /**
          * The value of the button, which is submitted with the form data.
         */
        "position": Props.BalCardActionsPosition;
        /**
          * @deprecated use position="right" If `true` the buttons start form right to left.
         */
        "right": boolean;
    }
    interface BalCardButton {
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * The type of button.
         */
        "elementType": Props.BalCardButtonElementType;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string;
        /**
          * Name of the icon like `edit`.
         */
        "icon": string;
        /**
          * Name of the right button icon
         */
        "iconRight": string;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target": Props.BalCardButtonTarget;
    }
    interface BalCardContent {
    }
    interface BalCardSubtitle {
        /**
          * If `true` the card text color is bold.
         */
        "bold": boolean;
        /**
          * If `true` the card text color becomes white.
         */
        "color": Props.BalHeadingColor;
        /**
          * If `true` the card text color becomes white.
         */
        "inverted": boolean;
    }
    interface BalCardTitle {
        /**
          * If `true` the card text color becomes white.
         */
        "inverted": boolean;
    }
    interface BalCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * If `true` the control is no padding
         */
        "flat": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement | undefined>;
        /**
          * If `true`, the value will not be send with a form submit
         */
        "hidden": boolean;
        /**
          * Defines the layout of the checkbox button
         */
        "interface": Props.BalCheckboxInterface;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid": boolean;
        /**
          * If `true`, the control works on dark background.
         */
        "inverted": boolean;
        /**
          * If `true` the radio has no label
         */
        "labelHidden": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets the focus on the checkbox input element.
         */
        "setFocus": () => Promise<void>;
        /**
          * A DOMString representing the value of the checkbox. This is not displayed on the client-side, but on the server this is the value given to the data submitted with the checkbox's name.
         */
        "value": string | number;
    }
    interface BalCheckboxGroup {
        /**
          * If `true` it acts as the main form control
         */
        "control": boolean;
        /**
          * If `true`, the user cannot interact with the radios.
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, the user cannot interact with the radios.
         */
        "readonly"?: boolean;
        "setValue": (value: any[]) => Promise<void>;
        /**
          * The value of the control.
         */
        "value": any[];
        /**
          * Displays the checkboxes vertically
         */
        "vertical": boolean;
    }
    interface BalClose {
        /**
          * If `true` it supports dark backgrounds.
         */
        "inverted": boolean;
        /**
          * Define the size of badge. Small is recommended for tabs.
         */
        "size": Props.BalCloseSize;
    }
    interface BalData {
        /**
          * If `true` a bottom border is added to the data-item.
         */
        "border": boolean;
        /**
          * If `true` the data list is horizontal instead of vertical.
         */
        "horizontal": boolean;
    }
    interface BalDataItem {
        /**
          * If `true` a bottom border is added to the data-item.
         */
        "border": boolean;
        /**
          * If `true` the item gets a lighter font color.
         */
        "disabled": boolean;
    }
    interface BalDataLabel {
        /**
          * If `true` an asterix is added after the label.
         */
        "required": boolean;
    }
    interface BalDataValue {
        /**
          * If `true` the button will get disabled.
         */
        "disabled": boolean;
        /**
          * If `true` a small button with a edit icon will be shown on the right.
         */
        "editable": boolean;
        /**
          * If `true` the text will break and the height of the item increases.
         */
        "multiline": boolean;
    }
    interface BalDatepicker {
        /**
          * Callback to determine which date in the datepicker should be selectable.
         */
        "allowedDates": Props.BalDatepickerCallback | undefined;
        /**
          * Closes the popover
         */
        "close": () => Promise<void>;
        /**
          * Closes the datepicker popover after selection
         */
        "closeOnSelect": boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * The date to defines where the datepicker popup starts. The prop accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "defaultDate"?: string;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid": boolean;
        /**
          * Set this to `true` when the component is placed on a dark background.
         */
        "inverted": boolean;
        /**
          * @deprecated Define the locale of month and day names.
         */
        "locale": 'en' | 'de' | 'fr' | 'it' | '';
        /**
          * The maximum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the maximum could just be the year, such as `1994`. Defaults to the end of this year.
         */
        "max"?: string;
        /**
          * Latest year available for selection
         */
        "maxYearProp"?: number;
        /**
          * The minimum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), such as `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the minimum could just be the year, such as `1994`. Defaults to the beginning of the year, 100 years ago from today.
         */
        "min"?: string;
        /**
          * Earliest year available for selection
         */
        "minYearProp"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Opens the popover
         */
        "open": () => Promise<void>;
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true` the attribute required is added to the native input.
         */
        "required": boolean;
        /**
          * Selects an option
         */
        "select": (dateString: string) => Promise<void>;
        /**
          * Sets blur on the native `input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true` the datepicker only open on click of the icon
         */
        "triggerIcon": boolean;
        /**
          * The value of the form field, which accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "value"?: string;
    }
    interface BalDocApp {
    }
    interface BalDocBanner {
        "status": string;
        "subtitle": string;
    }
    interface BalDocBannerStatus {
        "context": BannerStatusContext[];
    }
    interface BalDocColor {
        "background": boolean;
        "color": string;
        "description": string;
        "inverted": boolean;
        "subject": string;
    }
    interface BalDocDownload {
        "iconLeft": string;
        "iconRight": string;
        "link": string;
        "subject": string;
        "subtitle": string;
    }
    interface BalDocGithub {
        "link": string;
    }
    interface BalDocIcons {
        "icons": string;
    }
    interface BalDocImage {
        "src": string;
        "text": string;
    }
    interface BalDocLead {
    }
    interface BalDocLinkList {
        "oneColumn": boolean;
    }
    interface BalDocLinkListItem {
        "image": string;
        "subject": string;
        "template": '' | 'html5' | 'angular' | 'vue' | 'react';
    }
    interface BalDocShades {
        "color": string;
    }
    interface BalDocSupportColor {
        "color": string;
    }
    interface BalDocTabs {
    }
    interface BalDocTokensBorder {
    }
    interface BalDocTokensBreakpoints {
    }
    interface BalDocTokensColors {
    }
    interface BalDocTokensFont {
    }
    interface BalDocTokensFontSizes {
    }
    interface BalDocTokensFontWeight {
    }
    interface BalDocTokensRadius {
    }
    interface BalDocTokensShadow {
    }
    interface BalDocTokensSpacing {
    }
    interface BalDocUsage {
    }
    interface BalDocUsageItem {
        "image"?: boolean;
        "subject"?: string;
        "theme": 'do' | 'dont';
    }
    interface BalField {
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the component gets a invalid red style.
         */
        "invalid"?: boolean;
        /**
          * If `true` a loading spinner is visible at the end of the input
         */
        "loading"?: boolean;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true` the form control needs to be filled. If it is set to `false` an optional label is added to the label..
         */
        "required": boolean;
        /**
          * If `true` the component gets a valid green style.
         */
        "valid": boolean;
    }
    interface BalFieldControl {
        /**
          * Baloise icon for the left side of the input
         */
        "iconLeft": string;
        /**
          * Baloise icon for the right side of the input
         */
        "iconRight": string;
        /**
          * If `true` a loading spinner is visible at the end of the input
         */
        "loading": boolean;
    }
    interface BalFieldHint {
        /**
          * Text for the close button.
         */
        "closeLabel": string;
        /**
          * Disables the close button for tablet and desktop
         */
        "small": boolean;
        /**
          * Text of the inputs label
         */
        "subject"?: string;
    }
    interface BalFieldLabel {
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * If `true` the component gets a invalid red style.
         */
        "invalid": boolean;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true` the form control needs to be filled. If it is set to `false` an optional label is added to the label..
         */
        "required": boolean;
        /**
          * If `true` the component gets a valid green style.
         */
        "valid": boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "weight": Props1.BalFieldLabelWeight;
    }
    interface BalFieldMessage {
        /**
          * Defines the color of the message.
         */
        "color": Props.BalFieldMessageColor;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * If `true` the component gets a invalid red style.
         */
        "invalid": boolean;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true` the component gets a valid green style.
         */
        "valid": boolean;
    }
    interface BalFileUpload {
        /**
          * Accepted MIME-Types like `image/png,image/jpeg`.
         */
        "accept": string;
        /**
          * Sets the file list to an empty list
         */
        "clear": () => Promise<void>;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * If `true` below the drop-down area it generates a file list.
         */
        "hasFileList": boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid": boolean;
        /**
          * Label of the drop area.
         */
        "label": string;
        /**
          * If `true` the file upload is disabled and shows a spinner
         */
        "loading": boolean;
        /**
          * Allowed max bundle size in bytes.
         */
        "maxBundleSize"?: number;
        /**
          * Allowed max file size in bytes.
         */
        "maxFileSize"?: number;
        /**
          * Allowed number of files in the bundle.
         */
        "maxFiles"?: number;
        /**
          * If `true` multiple file upload is possible.
         */
        "multiple": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Overrides the default subtitle file size
         */
        "subTitle"?: (file: File) => string;
        /**
          * Input value.
         */
        "value": File[];
    }
    interface BalFooter {
        /**
          * If `true` the language selection will be hidden.
         */
        "hideLanguageSelection": boolean;
        /**
          * If `true` the legal Baloise links will be hidden.
         */
        "hideLinks": boolean;
        /**
          * @deprecated The languages in which the links will appear.
         */
        "locale": 'en' | 'de' | 'fr' | 'it' | '';
    }
    interface BalFormCol {
        "size": Props.BalFormColSize;
    }
    interface BalFormGrid {
    }
    interface BalHeading {
        /**
          * The theme type of the toast. Given by bulma our css framework.
         */
        "color": Props.BalHeadingColor;
        /**
          * If `true` the button is inverted
         */
        "inverted": boolean;
        /**
          * The actual heading level used in the HTML markup.
         */
        "level": Props.BalHeadingLevel;
        /**
          * Defines at which position the heading has spacing.
         */
        "space": 'none' | 'bottom' | 'top' | 'all';
        /**
          * If `true` the heading gets displayed slimmer.
         */
        "subtitle": boolean;
        /**
          * Make the visual style mimic a specific heading level. This option allows you to make e.g. h1 visually look like h3, but still keep it h1 in the markup.
         */
        "visualLevel"?: Props.BalHeadingLevel;
    }
    interface BalHint {
        /**
          * Text for the close button.
         */
        "closeLabel"?: string;
        /**
          * Closes the hint box.
         */
        "dismiss": () => Promise<void>;
        /**
          * Opens the hint box.
         */
        "present": () => Promise<void>;
        /**
          * Disables the close button for tablet and desktop
         */
        "small": boolean;
        /**
          * Toggles the hint box.
         */
        "toggle": () => Promise<void>;
    }
    interface BalHintText {
    }
    interface BalHintTitle {
    }
    interface BalIcon {
        /**
          * The theme type of the button. Given by bulma our css framework.
         */
        "color": Props.BalIconColor;
        /**
          * If `true` the icon has display inline style
         */
        "inline": boolean;
        /**
          * If `true` the icon is inverted
         */
        "inverted": boolean;
        /**
          * Name of the baloise icon.
         */
        "name": string;
        /**
          * Defines the size of the icon.
         */
        "size": Props.BalIconSize;
        /**
          * Svg content.
         */
        "svg": string;
        /**
          * If `true` the icon is rotated 180deg
         */
        "turn": boolean;
    }
    interface BalImageSlider {
    }
    interface BalInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": Props.BalInputAutocomplete;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": Props.BalInputAutocorrect;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true` the input gets a clickable cursor style
         */
        "clickable": boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * @deprecated Defines the allowed decimal points for the `number-input`. Use the <bal-number-input> component instead.
         */
        "decimal"?: number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        "hasIconRight": boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: Props.BalInputInputMode;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid": boolean;
        /**
          * If `true` this component can be placed on dark background
         */
        "inverted": boolean;
        /**
          * Mask of the input field. It defines what the user can enter and how the format looks like. Currently, only for Switzerland formatted. Formatting for 'contract-number': '99/1.234.567-1' Formatting for 'claim-number': ('73/001217/16.9') Formatting for 'offer-number': ('98/7.654.321')
         */
        "mask"?: Props.BalInputMask;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * Defines the max length of the value.
         */
        "maxLength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * Defines the min length of the value.
         */
        "minLength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * @deprecated If `true` on mobile device the number keypad is active. Use the <bal-number-input> component instead.
         */
        "numberInput": boolean;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `bal-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `bal-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Adds a suffix the the input-value after blur.
         */
        "suffix"?: string;
        /**
          * Defines the text align of the input value.
         */
        "textAlign": 'center' | 'left' | 'right';
        /**
          * Defines the type of the input (text, number, email ...).
         */
        "type": Props.BalInputInputType;
        /**
          * The value of the input.
         */
        "value"?: string;
    }
    interface BalInputGroup {
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid": boolean;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
    }
    interface BalInputStepper {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement | undefined>;
        /**
          * If `true` the input is shown as invalid
         */
        "invalid": boolean;
        /**
          * The max value the input can have
         */
        "max": number;
        /**
          * The min value the input can have
         */
        "min": number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * The steps in which the input increases or decreases
         */
        "steps": number;
        /**
          * The value of the input. Only allows values in the range of the min max attribute.
         */
        "value": number;
    }
    interface BalList {
        /**
          * If `true` the list can be used on a light, dark or colored backgrounds
         */
        "background": Props.BalListBackground;
        /**
          * If `true` each list item has a bottom border
         */
        "border": boolean;
        /**
          * If `true` the list item can not be hovered
         */
        "disabled": boolean;
        /**
          * @deprecated If `true` the list can be used on a dark background
         */
        "inverted": boolean;
        /**
          * If `true` the list can be used as an accordion in meta nav
         */
        "metaNavAccordion": boolean;
        /**
          * Defines the min height of the list item
         */
        "size": Props.BalListSize;
    }
    interface BalListItem {
        /**
          * If `true` the list item can be used as a accordion
         */
        "accordion": boolean;
        /**
          * If `true` the list item shows that it is clickable
         */
        "clickable": boolean;
        /**
          * If `true` the list item can be hovered
         */
        "disabled": boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href": string;
        /**
          * If `true` the list item has a selected theme
         */
        "selected": boolean;
        /**
          * If `true` the list item can be used as an accordion inside another accordion
         */
        "subAccordionItem": boolean;
        /**
          * Specifies where to open the linked document
         */
        "target": Props.BalListItemTarget;
    }
    interface BalListItemAccordionBody {
        /**
          * If `true` the body will be open and visible
         */
        "open": boolean;
    }
    interface BalListItemAccordionHead {
        /**
          * If `true` the list accordion is open
         */
        "accordionOpen": boolean;
    }
    interface BalListItemContent {
    }
    interface BalListItemIcon {
        /**
          * If `true` the icon is on the right side of the list item. Default is the left side.
         */
        "right": boolean;
    }
    interface BalListItemSubtitle {
    }
    interface BalListItemTitle {
    }
    interface BalLogo {
        /**
          * Defines the color of the logo.
         */
        "color": Props.BalLogoColor;
        /**
          * Defines the size of the logo.
         */
        "size": Props.BalLogoSize;
    }
    interface BalMainNavigation {
        /**
          * Link of the logo
         */
        "logoPath": string;
    }
    interface BalMainNavigationActions {
    }
    interface BalMainNavigationLinks {
    }
    interface BalMainNavigationMenu {
        "toggle": (isMenuActive: boolean) => Promise<void>;
    }
    interface BalMainNavigationMenuButtons {
    }
    interface BalMainNavigationMenuContent {
    }
    interface BalMainNavigationMenuPanel {
        "linkHref"?: string;
        "linkName"?: string;
    }
    interface BalMainNavigationMenuPanelList {
        "headline"?: string;
        "href"?: string;
        "isService": boolean;
    }
    interface BalMainNavigationMenuPanelListItem {
        "href"?: string;
    }
    interface BalMainNavigationMetaBar {
        "ariaLabel": string;
        /**
          * Link of the logo
         */
        "logoPath": string;
    }
    interface BalMainNavigationSecondBar {
        "ariaLabel": string;
        /**
          * Link of the logo
         */
        "logoPath": string;
    }
    interface BalModal {
        "close": () => Promise<void>;
        /**
          * The component to display inside of the modal.
         */
        "component": Props.ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: Props.ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "dataTestId"?: string;
        "delegate"?: Props.FrameworkDelegate;
        /**
          * Closes the presented modal with the modal controller
         */
        "dismiss": (data?: any, role?: string | undefined) => Promise<boolean>;
        /**
          * If `true`, a backdrop will be displayed behind the modal.
         */
        "hasBackdrop": boolean;
        /**
          * If `true`, the modal can be closed with the escape key or the little close button.
         */
        "isClosable": boolean;
        /**
          * Defines the width of the modal body
         */
        "modalWidth": number;
        /**
          * Returns a promise that resolves when the modal did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the modal will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        "open": () => Promise<void>;
        "overlayIndex": number;
        /**
          * Presents the modal through the modal controller
         */
        "present": () => Promise<void>;
        /**
          * Defines the space/padding of the modal
         */
        "space": Props.BalModalSpace;
    }
    interface BalModalBody {
    }
    interface BalModalHeader {
    }
    interface BalNavbar {
        /**
          * TODO: describe
         */
        "container": 'fluid' | 'detail-page' | 'compact' | 'blog-page' | 'wide' | '';
        /**
          * Defines the type of navbar. App is used for almost every web applications like the portal app. For our sales funnel we recommend to use the simple navbar. Meta and main are used for the website.
         */
        "interface": Props.BalNavbarInterface;
        /**
          * It `true` the navbar has a white background. Always use the blue header.
         */
        "light": boolean;
    }
    interface BalNavbarBrand {
        /**
          * Link of the logo / title.
         */
        "href": string;
        "interface": Props1.BalNavbarInterface;
        /**
          * @deprecated Use interface on bal-navbar instead. If `true` the navbar does not have a mobil version. Only shows logo and an app title.
         */
        "simple": boolean;
    }
    interface BalNavbarMenu {
        "interface": Props.BalNavbarInterface;
        "toggle": (isMenuActive: boolean) => Promise<void>;
    }
    interface BalNavbarMenuEnd {
        "interface": Props.BalNavbarInterface;
    }
    interface BalNavbarMenuStart {
        "interface": Props.BalNavbarInterface;
    }
    interface BalNotices {
        "interface": 'toast' | 'snackbar';
    }
    interface BalNotification {
        /**
          * Defines the color of the element Color type primary is deprecated, please use info instead.
         */
        "color": Props.BalNotificationColor;
    }
    interface BalNumberInput {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * Defines the allowed decimal points for the `number-input`.
         */
        "decimal": number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * If `true` the input value has 0 as default value
         */
        "exactNumber": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Adds a suffix the the input-value after blur.
         */
        "suffix"?: string;
        /**
          * The value of the input.
         */
        "value"?: number;
    }
    interface BalPagination {
        /**
          * Disables component
         */
        "disabled": boolean;
        /**
          * Go to the next page
         */
        "next": () => Promise<void>;
        /**
          * Specify the max visible pages before and after the selected page
         */
        "pageRange": number;
        /**
          * Go to the previous page
         */
        "previous": () => Promise<void>;
        /**
          * The total amount of pages
         */
        "totalPages": number;
        /**
          * Current selected page
         */
        "value": number;
    }
    interface BalPopover {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * Closes the popover
         */
        "dismiss": () => Promise<void>;
        /**
          * If `true` the field spans over the whole width.
         */
        "offsetX": number;
        /**
          * If `true` the field spans over the whole width.
         */
        "offsetY": number;
        /**
          * If `true` the field spans over the whole width.
         */
        "position": Props.BalPopoverPlacement;
        /**
          * Open the popover
         */
        "present": () => Promise<void>;
        /**
          * Open or closes the popover
         */
        "toggle": () => Promise<void>;
        /**
          * If `true` the popover content is open.
         */
        "value": boolean;
    }
    interface BalPopoverContent {
        /**
          * Define the max width of the popover content.
         */
        "contentWidth": number;
        /**
          * If `true` the content has a min width of 100%.
         */
        "expanded": boolean;
        /**
          * Limit the height of the popover content. Pass the amount of pixel.
         */
        "scrollable": number;
    }
    interface BalProductSlider {
    }
    interface BalRadio {
        /**
          * If `true`, the radio is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * Defines the layout of the radio button
         */
        "interface": Props.BalRadioInterface;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid": boolean;
        /**
          * If `true`, the control works on dark background.
         */
        "inverted": boolean;
        /**
          * @deprecated If `true` the radio has no label
         */
        "isEmpty": boolean;
        /**
          * If `true` the radio has no label
         */
        "labelHidden": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets the focus on the checkbox input element.
         */
        "setFocus": () => Promise<void>;
        /**
          * The tabindex of the control.
         */
        "value": number | string | boolean;
    }
    interface BalRadioGroup {
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the radio button
         */
        "interface": Props.BalRadioGroupInterface;
        /**
          * If `true` the component can be used on dark background
         */
        "inverted": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        "setValue": (value: number | string | boolean) => Promise<void>;
        /**
          * The value of the control.
         */
        "value": number | string | boolean;
        /**
          * Displays the checkboxes vertically
         */
        "vertical": boolean;
        /**
          * If `true`, the controls will be vertically on mobile devices.
         */
        "verticalOnMobile": boolean;
    }
    interface BalSelect {
        /**
          * The tabindex of the control.
         */
        "balTabindex": number;
        /**
          * Cancel the popover
         */
        "cancel": () => Promise<void>;
        /**
          * Sets the value to `[]`, the input value to ´''´ and the focus index to ´0´.
         */
        "clear": () => Promise<void>;
        /**
          * Closes the popover
         */
        "close": () => Promise<void>;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "filter": Props.BalSelectFilter;
        /**
          * Sets the focus on the input element
         */
        "getValue": () => Promise<string[] | undefined>;
        /**
          * @deprecated Enables the slide in animation for the option items.
         */
        "hasMovement": boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid": boolean;
        /**
          * @deprecated Set this to `true` when the component is placed on a dark background. Set this to `true` when the component is placed on a dark background.
         */
        "inverted": boolean;
        /**
          * Defines if the select is in a loading state.
         */
        "loading": boolean;
        /**
          * If `true` multiple option can be selected
         */
        "multiple": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * @deprecated Removes the border of the input.
         */
        "noBorder": boolean;
        /**
          * This label is shown if typeahead is active and all the options are filtered out.
         */
        "noDataLabel"?: string;
        /**
          * Opens the popover
         */
        "open": () => Promise<void>;
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true` the filtering is done outside the component.
         */
        "remote": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Defines the height of the popover list.
         */
        "scrollable": number;
        /**
          * Select option by passed value
         */
        "select": (value: string) => Promise<void>;
        /**
          * If `true` the options are a proposal and the user can also create his own value. Can only be used with the typeahead property.
         */
        "selectionOptional": boolean;
        /**
          * Sets the focus on the input element
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true` the user can search by typing into the input field.
         */
        "typeahead": boolean;
        /**
          * Selected option values. Could also be passed as a string, which gets transformed.
         */
        "value"?: string | string[];
    }
    interface BalSelectOption {
        /**
          * If `true`, the user cannot interact with the option.
         */
        "disabled": boolean;
        /**
          * Label will be shown in the input element when it got selected
         */
        "label"?: string;
        /**
          * The value of the select option. This value will be returned by the parent `<bal-select>` element.
         */
        "value"?: string;
    }
    interface BalShape {
        /**
          * The shape color
         */
        "color": Props.BalShapeColor;
        /**
          * The shape rotation
         */
        "rotation"?: Props.BalShapeRotation;
        /**
          * The shape variation
         */
        "variation": Props.BalShapeVariation;
    }
    interface BalSheet {
    }
    interface BalSlider {
        /**
          * The tabindex of the control.
         */
        "balTabindex": number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement | undefined>;
        /**
          * If `true`, small ticks for the steps are shown.
         */
        "hasTicks": boolean;
        /**
          * Max value of the model.
         */
        "max": number;
        /**
          * Min value of the model.
         */
        "min": number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets focus on the native `input` in `bal-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The step size. 0 means no steps.
         */
        "step": number;
        /**
          * The value of the input.
         */
        "value"?: string | number;
    }
    interface BalSnackbar {
        /**
          * Label text for the action button
         */
        "action": string;
        "actionHandler": () => void;
        /**
          * Closes this snackbar
         */
        "close": () => Promise<void>;
        "closeHandler": () => void;
        /**
          * Closes the snackbar after the given duration in ms
         */
        "closeIn": (duration: number) => Promise<void>;
        /**
          * The theme type of the snackbar. Given by bulma our css framework.
         */
        "color": Props.BalSnackbarColor;
        /**
          * The duration of the snackbar
         */
        "duration": number;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string;
        /**
          * The icon of the snackbar header
         */
        "icon": string;
        /**
          * The message of the snackbar
         */
        "message": string;
        /**
          * The subject of the snackbar header
         */
        "subject": string;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target": Props.BalButtonTarget;
    }
    interface BalSpinner {
        /**
          * Defines the color of the spinner.
         */
        "color": 'blue' | 'white';
        /**
          * If `true` the component can be used on dark background
         */
        "inverted": boolean;
        /**
          * If `true` the component is smaller
         */
        "small": boolean;
    }
    interface BalStage {
        /**
          * Defines the background color of the stage section
         */
        "color": Props.BalStageColor;
        /**
          * class to set the container width
         */
        "containerClass": string;
        /**
          * If true the Baloise Shape is set
         */
        "hasShape": boolean;
        /**
          * src-set string for the css background-image
         */
        "images"?: string;
        /**
          * sets text color to white for images and dark backgrounds (optional)
         */
        "inverted": undefined | boolean;
        /**
          * Defines size of the stage
         */
        "size": Props.BalStageSize;
    }
    interface BalStageBackLink {
        /**
          * Specifies the URL of the page the link goes to
         */
        "href": string;
    }
    interface BalStageBody {
        /**
          * class to set the container width
         */
        "containerClass": string;
    }
    interface BalStageFoot {
    }
    interface BalStageHead {
    }
    interface BalTabItem {
        /**
          * Tells if this route is active and overrides the bal-tabs value property.
         */
        "active": boolean;
        /**
          * If `true` a small red bubble is added to the tab.
         */
        "bubble": boolean | string;
        /**
          * If `true` the tab is disabled.
         */
        "disabled": boolean;
        /**
          * If `true` the step is marked as done.
         */
        "done": boolean;
        /**
          * If `true` the step is marked as failed.
         */
        "failed": boolean;
        /**
          * Options of the tab like label, value etc.
         */
        "getOptions": () => Promise<BalTabOption>;
        /**
          * Link to path.
         */
        "href": string;
        /**
          * Tab icon not available for the steps.
         */
        "icon"?: string;
        /**
          * Tab icon not available for the steps.
         */
        "inMainNavigation": boolean;
        /**
          * Label for the tab.
         */
        "label": string;
        /**
          * Tell's if the linking is done by a router.
         */
        "prevent": boolean;
        /**
          * Sets the tab active.
         */
        "setActive": (active: boolean) => Promise<void>;
        /**
          * This is the key of the tab.
         */
        "value": string;
    }
    interface BalTable {
        /**
          * If `true` the table has a full width
         */
        "expanded": boolean;
    }
    interface BalTabs {
        /**
          * If `true` a light border is shown for the tabs.
         */
        "border": boolean;
        /**
          * If `true` the tabs or steps can be clicked.
         */
        "clickable": boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true` the field expands over the whole width.
         */
        "expanded": boolean;
        /**
          * If `true` the tabs is a block element and uses 100% of the width
         */
        "fullwidth": boolean;
        /**
          * Defines the layout of the tabs.
         */
        "iconPosition": Props.BalTabsIconPosition;
        /**
          * Defines the layout of the tabs.
         */
        "interface": Props.BalTabsInterface;
        /**
          * If `true` the field expands over the whole width.
         */
        "inverted": boolean;
        "renderLine": () => Promise<void>;
        /**
          * Go to tab with the given value
         */
        "select": (tab: BalTabOption) => Promise<void>;
        /**
          * If `true` the tabs are shown as a select component on mobile
         */
        "selectOnMobile": boolean;
        "value"?: string;
        /**
          * If `true` tabs are align vertically.
         */
        "vertical": Props.BalTabsVertical;
        /**
          * The col size of the tabs on vertical mode.
         */
        "verticalColSize": Props.BalTabsColSize;
    }
    interface BalTag {
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "closable": boolean;
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "color": Props.BalTagColor;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * If `true` a light version of the color is displayed
         */
        "light": boolean;
        /**
          * The size of the tag element
         */
        "size": Props.BalTagSize;
        /**
          * @deprecated
         */
        "transparent": boolean;
    }
    interface BalTagGroup {
    }
    interface BalText {
        /**
          * If `true` the text is bold
         */
        "bold": boolean;
        /**
          * Defines the color of the text.
         */
        "color": Props.BalTextColor;
        /**
          * If `true` the text has heading font family
         */
        "heading": boolean;
        /**
          * If `true` the text is shown as a display inline
         */
        "inline": boolean;
        /**
          * Defines the size of the paragraph
         */
        "size": Props.BalTextSize;
        /**
          * Defines at which position the heading has spacing.
         */
        "space": Props.BalTextSpace;
    }
    interface BalTextarea {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize": string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true` the input gets a clickable cursor style
         */
        "clickable": boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled": boolean;
        /**
          * Returns the native `<textarea>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLTextAreaElement | undefined>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: Props.BalTextareaInputMode;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid": boolean;
        /**
          * If `true` this component can be placed on dark background
         */
        "inverted": boolean;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxLength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minLength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * Sets blur on the native `input` in `bal-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `bal-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the textarea.
         */
        "value"?: string;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: Props.BalTextareaWrap;
    }
    interface BalTimeinput {
        /**
          * If `true` the button is disabled
         */
        "disabled": boolean;
        /**
          * If `true` the timeinput can be used on blue background.
         */
        "inverted": boolean;
        /**
          * Latest date available for selection
         */
        "maxTime": string;
        /**
          * Earliest date available for selection
         */
        "minTime": string;
        /**
          * The value of the datepicker with the format `hh:mm`.
         */
        "value": string;
    }
    interface BalToast {
        /**
          * Closes this toast
         */
        "close": () => Promise<void>;
        "closeHandler": () => void;
        /**
          * Closes the toast after the given duration in ms
         */
        "closeIn": (duration: number) => Promise<void>;
        /**
          * The theme type of the toast. Given by bulma our css framework. Color type primary is deprecated, please use info instead.
         */
        "color": Props.BalTostColor;
        /**
          * The duration of the toast in milliseconds.
         */
        "duration": number;
        /**
          * Content message
         */
        "message": string;
    }
}
export interface BalAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalAccordionElement;
}
export interface BalButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalButtonElement;
}
export interface BalCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalCheckboxElement;
}
export interface BalCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalCheckboxGroupElement;
}
export interface BalDataValueCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalDataValueElement;
}
export interface BalDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalDatepickerElement;
}
export interface BalFileUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalFileUploadElement;
}
export interface BalInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalInputElement;
}
export interface BalInputStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalInputStepperElement;
}
export interface BalListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalListItemElement;
}
export interface BalListItemAccordionHeadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalListItemAccordionHeadElement;
}
export interface BalMainNavigationMetaBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalMainNavigationMetaBarElement;
}
export interface BalMainNavigationSecondBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalMainNavigationSecondBarElement;
}
export interface BalModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalModalElement;
}
export interface BalNavbarBrandCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalNavbarBrandElement;
}
export interface BalNumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalNumberInputElement;
}
export interface BalPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalPaginationElement;
}
export interface BalPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalPopoverElement;
}
export interface BalRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalRadioElement;
}
export interface BalRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalRadioGroupElement;
}
export interface BalSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalSelectElement;
}
export interface BalSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalSliderElement;
}
export interface BalSnackbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalSnackbarElement;
}
export interface BalTabItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalTabItemElement;
}
export interface BalTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalTabsElement;
}
export interface BalTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalTagElement;
}
export interface BalTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalTextareaElement;
}
export interface BalTimeinputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalTimeinputElement;
}
export interface BalToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBalToastElement;
}
declare global {
    interface HTMLBalAccordionElement extends Components.BalAccordion, HTMLStencilElement {
    }
    var HTMLBalAccordionElement: {
        prototype: HTMLBalAccordionElement;
        new (): HTMLBalAccordionElement;
    };
    interface HTMLBalAppElement extends Components.BalApp, HTMLStencilElement {
    }
    var HTMLBalAppElement: {
        prototype: HTMLBalAppElement;
        new (): HTMLBalAppElement;
    };
    interface HTMLBalBadgeElement extends Components.BalBadge, HTMLStencilElement {
    }
    var HTMLBalBadgeElement: {
        prototype: HTMLBalBadgeElement;
        new (): HTMLBalBadgeElement;
    };
    interface HTMLBalButtonElement extends Components.BalButton, HTMLStencilElement {
    }
    var HTMLBalButtonElement: {
        prototype: HTMLBalButtonElement;
        new (): HTMLBalButtonElement;
    };
    interface HTMLBalButtonGroupElement extends Components.BalButtonGroup, HTMLStencilElement {
    }
    var HTMLBalButtonGroupElement: {
        prototype: HTMLBalButtonGroupElement;
        new (): HTMLBalButtonGroupElement;
    };
    interface HTMLBalCardElement extends Components.BalCard, HTMLStencilElement {
    }
    var HTMLBalCardElement: {
        prototype: HTMLBalCardElement;
        new (): HTMLBalCardElement;
    };
    interface HTMLBalCardActionsElement extends Components.BalCardActions, HTMLStencilElement {
    }
    var HTMLBalCardActionsElement: {
        prototype: HTMLBalCardActionsElement;
        new (): HTMLBalCardActionsElement;
    };
    interface HTMLBalCardButtonElement extends Components.BalCardButton, HTMLStencilElement {
    }
    var HTMLBalCardButtonElement: {
        prototype: HTMLBalCardButtonElement;
        new (): HTMLBalCardButtonElement;
    };
    interface HTMLBalCardContentElement extends Components.BalCardContent, HTMLStencilElement {
    }
    var HTMLBalCardContentElement: {
        prototype: HTMLBalCardContentElement;
        new (): HTMLBalCardContentElement;
    };
    interface HTMLBalCardSubtitleElement extends Components.BalCardSubtitle, HTMLStencilElement {
    }
    var HTMLBalCardSubtitleElement: {
        prototype: HTMLBalCardSubtitleElement;
        new (): HTMLBalCardSubtitleElement;
    };
    interface HTMLBalCardTitleElement extends Components.BalCardTitle, HTMLStencilElement {
    }
    var HTMLBalCardTitleElement: {
        prototype: HTMLBalCardTitleElement;
        new (): HTMLBalCardTitleElement;
    };
    interface HTMLBalCheckboxElement extends Components.BalCheckbox, HTMLStencilElement {
    }
    var HTMLBalCheckboxElement: {
        prototype: HTMLBalCheckboxElement;
        new (): HTMLBalCheckboxElement;
    };
    interface HTMLBalCheckboxGroupElement extends Components.BalCheckboxGroup, HTMLStencilElement {
    }
    var HTMLBalCheckboxGroupElement: {
        prototype: HTMLBalCheckboxGroupElement;
        new (): HTMLBalCheckboxGroupElement;
    };
    interface HTMLBalCloseElement extends Components.BalClose, HTMLStencilElement {
    }
    var HTMLBalCloseElement: {
        prototype: HTMLBalCloseElement;
        new (): HTMLBalCloseElement;
    };
    interface HTMLBalDataElement extends Components.BalData, HTMLStencilElement {
    }
    var HTMLBalDataElement: {
        prototype: HTMLBalDataElement;
        new (): HTMLBalDataElement;
    };
    interface HTMLBalDataItemElement extends Components.BalDataItem, HTMLStencilElement {
    }
    var HTMLBalDataItemElement: {
        prototype: HTMLBalDataItemElement;
        new (): HTMLBalDataItemElement;
    };
    interface HTMLBalDataLabelElement extends Components.BalDataLabel, HTMLStencilElement {
    }
    var HTMLBalDataLabelElement: {
        prototype: HTMLBalDataLabelElement;
        new (): HTMLBalDataLabelElement;
    };
    interface HTMLBalDataValueElement extends Components.BalDataValue, HTMLStencilElement {
    }
    var HTMLBalDataValueElement: {
        prototype: HTMLBalDataValueElement;
        new (): HTMLBalDataValueElement;
    };
    interface HTMLBalDatepickerElement extends Components.BalDatepicker, HTMLStencilElement {
    }
    var HTMLBalDatepickerElement: {
        prototype: HTMLBalDatepickerElement;
        new (): HTMLBalDatepickerElement;
    };
    interface HTMLBalDocAppElement extends Components.BalDocApp, HTMLStencilElement {
    }
    var HTMLBalDocAppElement: {
        prototype: HTMLBalDocAppElement;
        new (): HTMLBalDocAppElement;
    };
    interface HTMLBalDocBannerElement extends Components.BalDocBanner, HTMLStencilElement {
    }
    var HTMLBalDocBannerElement: {
        prototype: HTMLBalDocBannerElement;
        new (): HTMLBalDocBannerElement;
    };
    interface HTMLBalDocBannerStatusElement extends Components.BalDocBannerStatus, HTMLStencilElement {
    }
    var HTMLBalDocBannerStatusElement: {
        prototype: HTMLBalDocBannerStatusElement;
        new (): HTMLBalDocBannerStatusElement;
    };
    interface HTMLBalDocColorElement extends Components.BalDocColor, HTMLStencilElement {
    }
    var HTMLBalDocColorElement: {
        prototype: HTMLBalDocColorElement;
        new (): HTMLBalDocColorElement;
    };
    interface HTMLBalDocDownloadElement extends Components.BalDocDownload, HTMLStencilElement {
    }
    var HTMLBalDocDownloadElement: {
        prototype: HTMLBalDocDownloadElement;
        new (): HTMLBalDocDownloadElement;
    };
    interface HTMLBalDocGithubElement extends Components.BalDocGithub, HTMLStencilElement {
    }
    var HTMLBalDocGithubElement: {
        prototype: HTMLBalDocGithubElement;
        new (): HTMLBalDocGithubElement;
    };
    interface HTMLBalDocIconsElement extends Components.BalDocIcons, HTMLStencilElement {
    }
    var HTMLBalDocIconsElement: {
        prototype: HTMLBalDocIconsElement;
        new (): HTMLBalDocIconsElement;
    };
    interface HTMLBalDocImageElement extends Components.BalDocImage, HTMLStencilElement {
    }
    var HTMLBalDocImageElement: {
        prototype: HTMLBalDocImageElement;
        new (): HTMLBalDocImageElement;
    };
    interface HTMLBalDocLeadElement extends Components.BalDocLead, HTMLStencilElement {
    }
    var HTMLBalDocLeadElement: {
        prototype: HTMLBalDocLeadElement;
        new (): HTMLBalDocLeadElement;
    };
    interface HTMLBalDocLinkListElement extends Components.BalDocLinkList, HTMLStencilElement {
    }
    var HTMLBalDocLinkListElement: {
        prototype: HTMLBalDocLinkListElement;
        new (): HTMLBalDocLinkListElement;
    };
    interface HTMLBalDocLinkListItemElement extends Components.BalDocLinkListItem, HTMLStencilElement {
    }
    var HTMLBalDocLinkListItemElement: {
        prototype: HTMLBalDocLinkListItemElement;
        new (): HTMLBalDocLinkListItemElement;
    };
    interface HTMLBalDocShadesElement extends Components.BalDocShades, HTMLStencilElement {
    }
    var HTMLBalDocShadesElement: {
        prototype: HTMLBalDocShadesElement;
        new (): HTMLBalDocShadesElement;
    };
    interface HTMLBalDocSupportColorElement extends Components.BalDocSupportColor, HTMLStencilElement {
    }
    var HTMLBalDocSupportColorElement: {
        prototype: HTMLBalDocSupportColorElement;
        new (): HTMLBalDocSupportColorElement;
    };
    interface HTMLBalDocTabsElement extends Components.BalDocTabs, HTMLStencilElement {
    }
    var HTMLBalDocTabsElement: {
        prototype: HTMLBalDocTabsElement;
        new (): HTMLBalDocTabsElement;
    };
    interface HTMLBalDocTokensBorderElement extends Components.BalDocTokensBorder, HTMLStencilElement {
    }
    var HTMLBalDocTokensBorderElement: {
        prototype: HTMLBalDocTokensBorderElement;
        new (): HTMLBalDocTokensBorderElement;
    };
    interface HTMLBalDocTokensBreakpointsElement extends Components.BalDocTokensBreakpoints, HTMLStencilElement {
    }
    var HTMLBalDocTokensBreakpointsElement: {
        prototype: HTMLBalDocTokensBreakpointsElement;
        new (): HTMLBalDocTokensBreakpointsElement;
    };
    interface HTMLBalDocTokensColorsElement extends Components.BalDocTokensColors, HTMLStencilElement {
    }
    var HTMLBalDocTokensColorsElement: {
        prototype: HTMLBalDocTokensColorsElement;
        new (): HTMLBalDocTokensColorsElement;
    };
    interface HTMLBalDocTokensFontElement extends Components.BalDocTokensFont, HTMLStencilElement {
    }
    var HTMLBalDocTokensFontElement: {
        prototype: HTMLBalDocTokensFontElement;
        new (): HTMLBalDocTokensFontElement;
    };
    interface HTMLBalDocTokensFontSizesElement extends Components.BalDocTokensFontSizes, HTMLStencilElement {
    }
    var HTMLBalDocTokensFontSizesElement: {
        prototype: HTMLBalDocTokensFontSizesElement;
        new (): HTMLBalDocTokensFontSizesElement;
    };
    interface HTMLBalDocTokensFontWeightElement extends Components.BalDocTokensFontWeight, HTMLStencilElement {
    }
    var HTMLBalDocTokensFontWeightElement: {
        prototype: HTMLBalDocTokensFontWeightElement;
        new (): HTMLBalDocTokensFontWeightElement;
    };
    interface HTMLBalDocTokensRadiusElement extends Components.BalDocTokensRadius, HTMLStencilElement {
    }
    var HTMLBalDocTokensRadiusElement: {
        prototype: HTMLBalDocTokensRadiusElement;
        new (): HTMLBalDocTokensRadiusElement;
    };
    interface HTMLBalDocTokensShadowElement extends Components.BalDocTokensShadow, HTMLStencilElement {
    }
    var HTMLBalDocTokensShadowElement: {
        prototype: HTMLBalDocTokensShadowElement;
        new (): HTMLBalDocTokensShadowElement;
    };
    interface HTMLBalDocTokensSpacingElement extends Components.BalDocTokensSpacing, HTMLStencilElement {
    }
    var HTMLBalDocTokensSpacingElement: {
        prototype: HTMLBalDocTokensSpacingElement;
        new (): HTMLBalDocTokensSpacingElement;
    };
    interface HTMLBalDocUsageElement extends Components.BalDocUsage, HTMLStencilElement {
    }
    var HTMLBalDocUsageElement: {
        prototype: HTMLBalDocUsageElement;
        new (): HTMLBalDocUsageElement;
    };
    interface HTMLBalDocUsageItemElement extends Components.BalDocUsageItem, HTMLStencilElement {
    }
    var HTMLBalDocUsageItemElement: {
        prototype: HTMLBalDocUsageItemElement;
        new (): HTMLBalDocUsageItemElement;
    };
    interface HTMLBalFieldElement extends Components.BalField, HTMLStencilElement {
    }
    var HTMLBalFieldElement: {
        prototype: HTMLBalFieldElement;
        new (): HTMLBalFieldElement;
    };
    interface HTMLBalFieldControlElement extends Components.BalFieldControl, HTMLStencilElement {
    }
    var HTMLBalFieldControlElement: {
        prototype: HTMLBalFieldControlElement;
        new (): HTMLBalFieldControlElement;
    };
    interface HTMLBalFieldHintElement extends Components.BalFieldHint, HTMLStencilElement {
    }
    var HTMLBalFieldHintElement: {
        prototype: HTMLBalFieldHintElement;
        new (): HTMLBalFieldHintElement;
    };
    interface HTMLBalFieldLabelElement extends Components.BalFieldLabel, HTMLStencilElement {
    }
    var HTMLBalFieldLabelElement: {
        prototype: HTMLBalFieldLabelElement;
        new (): HTMLBalFieldLabelElement;
    };
    interface HTMLBalFieldMessageElement extends Components.BalFieldMessage, HTMLStencilElement {
    }
    var HTMLBalFieldMessageElement: {
        prototype: HTMLBalFieldMessageElement;
        new (): HTMLBalFieldMessageElement;
    };
    interface HTMLBalFileUploadElement extends Components.BalFileUpload, HTMLStencilElement {
    }
    var HTMLBalFileUploadElement: {
        prototype: HTMLBalFileUploadElement;
        new (): HTMLBalFileUploadElement;
    };
    interface HTMLBalFooterElement extends Components.BalFooter, HTMLStencilElement {
    }
    var HTMLBalFooterElement: {
        prototype: HTMLBalFooterElement;
        new (): HTMLBalFooterElement;
    };
    interface HTMLBalFormColElement extends Components.BalFormCol, HTMLStencilElement {
    }
    var HTMLBalFormColElement: {
        prototype: HTMLBalFormColElement;
        new (): HTMLBalFormColElement;
    };
    interface HTMLBalFormGridElement extends Components.BalFormGrid, HTMLStencilElement {
    }
    var HTMLBalFormGridElement: {
        prototype: HTMLBalFormGridElement;
        new (): HTMLBalFormGridElement;
    };
    interface HTMLBalHeadingElement extends Components.BalHeading, HTMLStencilElement {
    }
    var HTMLBalHeadingElement: {
        prototype: HTMLBalHeadingElement;
        new (): HTMLBalHeadingElement;
    };
    interface HTMLBalHintElement extends Components.BalHint, HTMLStencilElement {
    }
    var HTMLBalHintElement: {
        prototype: HTMLBalHintElement;
        new (): HTMLBalHintElement;
    };
    interface HTMLBalHintTextElement extends Components.BalHintText, HTMLStencilElement {
    }
    var HTMLBalHintTextElement: {
        prototype: HTMLBalHintTextElement;
        new (): HTMLBalHintTextElement;
    };
    interface HTMLBalHintTitleElement extends Components.BalHintTitle, HTMLStencilElement {
    }
    var HTMLBalHintTitleElement: {
        prototype: HTMLBalHintTitleElement;
        new (): HTMLBalHintTitleElement;
    };
    interface HTMLBalIconElement extends Components.BalIcon, HTMLStencilElement {
    }
    var HTMLBalIconElement: {
        prototype: HTMLBalIconElement;
        new (): HTMLBalIconElement;
    };
    interface HTMLBalImageSliderElement extends Components.BalImageSlider, HTMLStencilElement {
    }
    var HTMLBalImageSliderElement: {
        prototype: HTMLBalImageSliderElement;
        new (): HTMLBalImageSliderElement;
    };
    interface HTMLBalInputElement extends Components.BalInput, HTMLStencilElement {
    }
    var HTMLBalInputElement: {
        prototype: HTMLBalInputElement;
        new (): HTMLBalInputElement;
    };
    interface HTMLBalInputGroupElement extends Components.BalInputGroup, HTMLStencilElement {
    }
    var HTMLBalInputGroupElement: {
        prototype: HTMLBalInputGroupElement;
        new (): HTMLBalInputGroupElement;
    };
    interface HTMLBalInputStepperElement extends Components.BalInputStepper, HTMLStencilElement {
    }
    var HTMLBalInputStepperElement: {
        prototype: HTMLBalInputStepperElement;
        new (): HTMLBalInputStepperElement;
    };
    interface HTMLBalListElement extends Components.BalList, HTMLStencilElement {
    }
    var HTMLBalListElement: {
        prototype: HTMLBalListElement;
        new (): HTMLBalListElement;
    };
    interface HTMLBalListItemElement extends Components.BalListItem, HTMLStencilElement {
    }
    var HTMLBalListItemElement: {
        prototype: HTMLBalListItemElement;
        new (): HTMLBalListItemElement;
    };
    interface HTMLBalListItemAccordionBodyElement extends Components.BalListItemAccordionBody, HTMLStencilElement {
    }
    var HTMLBalListItemAccordionBodyElement: {
        prototype: HTMLBalListItemAccordionBodyElement;
        new (): HTMLBalListItemAccordionBodyElement;
    };
    interface HTMLBalListItemAccordionHeadElement extends Components.BalListItemAccordionHead, HTMLStencilElement {
    }
    var HTMLBalListItemAccordionHeadElement: {
        prototype: HTMLBalListItemAccordionHeadElement;
        new (): HTMLBalListItemAccordionHeadElement;
    };
    interface HTMLBalListItemContentElement extends Components.BalListItemContent, HTMLStencilElement {
    }
    var HTMLBalListItemContentElement: {
        prototype: HTMLBalListItemContentElement;
        new (): HTMLBalListItemContentElement;
    };
    interface HTMLBalListItemIconElement extends Components.BalListItemIcon, HTMLStencilElement {
    }
    var HTMLBalListItemIconElement: {
        prototype: HTMLBalListItemIconElement;
        new (): HTMLBalListItemIconElement;
    };
    interface HTMLBalListItemSubtitleElement extends Components.BalListItemSubtitle, HTMLStencilElement {
    }
    var HTMLBalListItemSubtitleElement: {
        prototype: HTMLBalListItemSubtitleElement;
        new (): HTMLBalListItemSubtitleElement;
    };
    interface HTMLBalListItemTitleElement extends Components.BalListItemTitle, HTMLStencilElement {
    }
    var HTMLBalListItemTitleElement: {
        prototype: HTMLBalListItemTitleElement;
        new (): HTMLBalListItemTitleElement;
    };
    interface HTMLBalLogoElement extends Components.BalLogo, HTMLStencilElement {
    }
    var HTMLBalLogoElement: {
        prototype: HTMLBalLogoElement;
        new (): HTMLBalLogoElement;
    };
    interface HTMLBalMainNavigationElement extends Components.BalMainNavigation, HTMLStencilElement {
    }
    var HTMLBalMainNavigationElement: {
        prototype: HTMLBalMainNavigationElement;
        new (): HTMLBalMainNavigationElement;
    };
    interface HTMLBalMainNavigationActionsElement extends Components.BalMainNavigationActions, HTMLStencilElement {
    }
    var HTMLBalMainNavigationActionsElement: {
        prototype: HTMLBalMainNavigationActionsElement;
        new (): HTMLBalMainNavigationActionsElement;
    };
    interface HTMLBalMainNavigationLinksElement extends Components.BalMainNavigationLinks, HTMLStencilElement {
    }
    var HTMLBalMainNavigationLinksElement: {
        prototype: HTMLBalMainNavigationLinksElement;
        new (): HTMLBalMainNavigationLinksElement;
    };
    interface HTMLBalMainNavigationMenuElement extends Components.BalMainNavigationMenu, HTMLStencilElement {
    }
    var HTMLBalMainNavigationMenuElement: {
        prototype: HTMLBalMainNavigationMenuElement;
        new (): HTMLBalMainNavigationMenuElement;
    };
    interface HTMLBalMainNavigationMenuButtonsElement extends Components.BalMainNavigationMenuButtons, HTMLStencilElement {
    }
    var HTMLBalMainNavigationMenuButtonsElement: {
        prototype: HTMLBalMainNavigationMenuButtonsElement;
        new (): HTMLBalMainNavigationMenuButtonsElement;
    };
    interface HTMLBalMainNavigationMenuContentElement extends Components.BalMainNavigationMenuContent, HTMLStencilElement {
    }
    var HTMLBalMainNavigationMenuContentElement: {
        prototype: HTMLBalMainNavigationMenuContentElement;
        new (): HTMLBalMainNavigationMenuContentElement;
    };
    interface HTMLBalMainNavigationMenuPanelElement extends Components.BalMainNavigationMenuPanel, HTMLStencilElement {
    }
    var HTMLBalMainNavigationMenuPanelElement: {
        prototype: HTMLBalMainNavigationMenuPanelElement;
        new (): HTMLBalMainNavigationMenuPanelElement;
    };
    interface HTMLBalMainNavigationMenuPanelListElement extends Components.BalMainNavigationMenuPanelList, HTMLStencilElement {
    }
    var HTMLBalMainNavigationMenuPanelListElement: {
        prototype: HTMLBalMainNavigationMenuPanelListElement;
        new (): HTMLBalMainNavigationMenuPanelListElement;
    };
    interface HTMLBalMainNavigationMenuPanelListItemElement extends Components.BalMainNavigationMenuPanelListItem, HTMLStencilElement {
    }
    var HTMLBalMainNavigationMenuPanelListItemElement: {
        prototype: HTMLBalMainNavigationMenuPanelListItemElement;
        new (): HTMLBalMainNavigationMenuPanelListItemElement;
    };
    interface HTMLBalMainNavigationMetaBarElement extends Components.BalMainNavigationMetaBar, HTMLStencilElement {
    }
    var HTMLBalMainNavigationMetaBarElement: {
        prototype: HTMLBalMainNavigationMetaBarElement;
        new (): HTMLBalMainNavigationMetaBarElement;
    };
    interface HTMLBalMainNavigationSecondBarElement extends Components.BalMainNavigationSecondBar, HTMLStencilElement {
    }
    var HTMLBalMainNavigationSecondBarElement: {
        prototype: HTMLBalMainNavigationSecondBarElement;
        new (): HTMLBalMainNavigationSecondBarElement;
    };
    interface HTMLBalModalElement extends Components.BalModal, HTMLStencilElement {
    }
    var HTMLBalModalElement: {
        prototype: HTMLBalModalElement;
        new (): HTMLBalModalElement;
    };
    interface HTMLBalModalBodyElement extends Components.BalModalBody, HTMLStencilElement {
    }
    var HTMLBalModalBodyElement: {
        prototype: HTMLBalModalBodyElement;
        new (): HTMLBalModalBodyElement;
    };
    interface HTMLBalModalHeaderElement extends Components.BalModalHeader, HTMLStencilElement {
    }
    var HTMLBalModalHeaderElement: {
        prototype: HTMLBalModalHeaderElement;
        new (): HTMLBalModalHeaderElement;
    };
    interface HTMLBalNavbarElement extends Components.BalNavbar, HTMLStencilElement {
    }
    var HTMLBalNavbarElement: {
        prototype: HTMLBalNavbarElement;
        new (): HTMLBalNavbarElement;
    };
    interface HTMLBalNavbarBrandElement extends Components.BalNavbarBrand, HTMLStencilElement {
    }
    var HTMLBalNavbarBrandElement: {
        prototype: HTMLBalNavbarBrandElement;
        new (): HTMLBalNavbarBrandElement;
    };
    interface HTMLBalNavbarMenuElement extends Components.BalNavbarMenu, HTMLStencilElement {
    }
    var HTMLBalNavbarMenuElement: {
        prototype: HTMLBalNavbarMenuElement;
        new (): HTMLBalNavbarMenuElement;
    };
    interface HTMLBalNavbarMenuEndElement extends Components.BalNavbarMenuEnd, HTMLStencilElement {
    }
    var HTMLBalNavbarMenuEndElement: {
        prototype: HTMLBalNavbarMenuEndElement;
        new (): HTMLBalNavbarMenuEndElement;
    };
    interface HTMLBalNavbarMenuStartElement extends Components.BalNavbarMenuStart, HTMLStencilElement {
    }
    var HTMLBalNavbarMenuStartElement: {
        prototype: HTMLBalNavbarMenuStartElement;
        new (): HTMLBalNavbarMenuStartElement;
    };
    interface HTMLBalNoticesElement extends Components.BalNotices, HTMLStencilElement {
    }
    var HTMLBalNoticesElement: {
        prototype: HTMLBalNoticesElement;
        new (): HTMLBalNoticesElement;
    };
    interface HTMLBalNotificationElement extends Components.BalNotification, HTMLStencilElement {
    }
    var HTMLBalNotificationElement: {
        prototype: HTMLBalNotificationElement;
        new (): HTMLBalNotificationElement;
    };
    interface HTMLBalNumberInputElement extends Components.BalNumberInput, HTMLStencilElement {
    }
    var HTMLBalNumberInputElement: {
        prototype: HTMLBalNumberInputElement;
        new (): HTMLBalNumberInputElement;
    };
    interface HTMLBalPaginationElement extends Components.BalPagination, HTMLStencilElement {
    }
    var HTMLBalPaginationElement: {
        prototype: HTMLBalPaginationElement;
        new (): HTMLBalPaginationElement;
    };
    interface HTMLBalPopoverElement extends Components.BalPopover, HTMLStencilElement {
    }
    var HTMLBalPopoverElement: {
        prototype: HTMLBalPopoverElement;
        new (): HTMLBalPopoverElement;
    };
    interface HTMLBalPopoverContentElement extends Components.BalPopoverContent, HTMLStencilElement {
    }
    var HTMLBalPopoverContentElement: {
        prototype: HTMLBalPopoverContentElement;
        new (): HTMLBalPopoverContentElement;
    };
    interface HTMLBalProductSliderElement extends Components.BalProductSlider, HTMLStencilElement {
    }
    var HTMLBalProductSliderElement: {
        prototype: HTMLBalProductSliderElement;
        new (): HTMLBalProductSliderElement;
    };
    interface HTMLBalRadioElement extends Components.BalRadio, HTMLStencilElement {
    }
    var HTMLBalRadioElement: {
        prototype: HTMLBalRadioElement;
        new (): HTMLBalRadioElement;
    };
    interface HTMLBalRadioGroupElement extends Components.BalRadioGroup, HTMLStencilElement {
    }
    var HTMLBalRadioGroupElement: {
        prototype: HTMLBalRadioGroupElement;
        new (): HTMLBalRadioGroupElement;
    };
    interface HTMLBalSelectElement extends Components.BalSelect, HTMLStencilElement {
    }
    var HTMLBalSelectElement: {
        prototype: HTMLBalSelectElement;
        new (): HTMLBalSelectElement;
    };
    interface HTMLBalSelectOptionElement extends Components.BalSelectOption, HTMLStencilElement {
    }
    var HTMLBalSelectOptionElement: {
        prototype: HTMLBalSelectOptionElement;
        new (): HTMLBalSelectOptionElement;
    };
    interface HTMLBalShapeElement extends Components.BalShape, HTMLStencilElement {
    }
    var HTMLBalShapeElement: {
        prototype: HTMLBalShapeElement;
        new (): HTMLBalShapeElement;
    };
    interface HTMLBalSheetElement extends Components.BalSheet, HTMLStencilElement {
    }
    var HTMLBalSheetElement: {
        prototype: HTMLBalSheetElement;
        new (): HTMLBalSheetElement;
    };
    interface HTMLBalSliderElement extends Components.BalSlider, HTMLStencilElement {
    }
    var HTMLBalSliderElement: {
        prototype: HTMLBalSliderElement;
        new (): HTMLBalSliderElement;
    };
    interface HTMLBalSnackbarElement extends Components.BalSnackbar, HTMLStencilElement {
    }
    var HTMLBalSnackbarElement: {
        prototype: HTMLBalSnackbarElement;
        new (): HTMLBalSnackbarElement;
    };
    interface HTMLBalSpinnerElement extends Components.BalSpinner, HTMLStencilElement {
    }
    var HTMLBalSpinnerElement: {
        prototype: HTMLBalSpinnerElement;
        new (): HTMLBalSpinnerElement;
    };
    interface HTMLBalStageElement extends Components.BalStage, HTMLStencilElement {
    }
    var HTMLBalStageElement: {
        prototype: HTMLBalStageElement;
        new (): HTMLBalStageElement;
    };
    interface HTMLBalStageBackLinkElement extends Components.BalStageBackLink, HTMLStencilElement {
    }
    var HTMLBalStageBackLinkElement: {
        prototype: HTMLBalStageBackLinkElement;
        new (): HTMLBalStageBackLinkElement;
    };
    interface HTMLBalStageBodyElement extends Components.BalStageBody, HTMLStencilElement {
    }
    var HTMLBalStageBodyElement: {
        prototype: HTMLBalStageBodyElement;
        new (): HTMLBalStageBodyElement;
    };
    interface HTMLBalStageFootElement extends Components.BalStageFoot, HTMLStencilElement {
    }
    var HTMLBalStageFootElement: {
        prototype: HTMLBalStageFootElement;
        new (): HTMLBalStageFootElement;
    };
    interface HTMLBalStageHeadElement extends Components.BalStageHead, HTMLStencilElement {
    }
    var HTMLBalStageHeadElement: {
        prototype: HTMLBalStageHeadElement;
        new (): HTMLBalStageHeadElement;
    };
    interface HTMLBalTabItemElement extends Components.BalTabItem, HTMLStencilElement {
    }
    var HTMLBalTabItemElement: {
        prototype: HTMLBalTabItemElement;
        new (): HTMLBalTabItemElement;
    };
    interface HTMLBalTableElement extends Components.BalTable, HTMLStencilElement {
    }
    var HTMLBalTableElement: {
        prototype: HTMLBalTableElement;
        new (): HTMLBalTableElement;
    };
    interface HTMLBalTabsElement extends Components.BalTabs, HTMLStencilElement {
    }
    var HTMLBalTabsElement: {
        prototype: HTMLBalTabsElement;
        new (): HTMLBalTabsElement;
    };
    interface HTMLBalTagElement extends Components.BalTag, HTMLStencilElement {
    }
    var HTMLBalTagElement: {
        prototype: HTMLBalTagElement;
        new (): HTMLBalTagElement;
    };
    interface HTMLBalTagGroupElement extends Components.BalTagGroup, HTMLStencilElement {
    }
    var HTMLBalTagGroupElement: {
        prototype: HTMLBalTagGroupElement;
        new (): HTMLBalTagGroupElement;
    };
    interface HTMLBalTextElement extends Components.BalText, HTMLStencilElement {
    }
    var HTMLBalTextElement: {
        prototype: HTMLBalTextElement;
        new (): HTMLBalTextElement;
    };
    interface HTMLBalTextareaElement extends Components.BalTextarea, HTMLStencilElement {
    }
    var HTMLBalTextareaElement: {
        prototype: HTMLBalTextareaElement;
        new (): HTMLBalTextareaElement;
    };
    interface HTMLBalTimeinputElement extends Components.BalTimeinput, HTMLStencilElement {
    }
    var HTMLBalTimeinputElement: {
        prototype: HTMLBalTimeinputElement;
        new (): HTMLBalTimeinputElement;
    };
    interface HTMLBalToastElement extends Components.BalToast, HTMLStencilElement {
    }
    var HTMLBalToastElement: {
        prototype: HTMLBalToastElement;
        new (): HTMLBalToastElement;
    };
    interface HTMLElementTagNameMap {
        "bal-accordion": HTMLBalAccordionElement;
        "bal-app": HTMLBalAppElement;
        "bal-badge": HTMLBalBadgeElement;
        "bal-button": HTMLBalButtonElement;
        "bal-button-group": HTMLBalButtonGroupElement;
        "bal-card": HTMLBalCardElement;
        "bal-card-actions": HTMLBalCardActionsElement;
        "bal-card-button": HTMLBalCardButtonElement;
        "bal-card-content": HTMLBalCardContentElement;
        "bal-card-subtitle": HTMLBalCardSubtitleElement;
        "bal-card-title": HTMLBalCardTitleElement;
        "bal-checkbox": HTMLBalCheckboxElement;
        "bal-checkbox-group": HTMLBalCheckboxGroupElement;
        "bal-close": HTMLBalCloseElement;
        "bal-data": HTMLBalDataElement;
        "bal-data-item": HTMLBalDataItemElement;
        "bal-data-label": HTMLBalDataLabelElement;
        "bal-data-value": HTMLBalDataValueElement;
        "bal-datepicker": HTMLBalDatepickerElement;
        "bal-doc-app": HTMLBalDocAppElement;
        "bal-doc-banner": HTMLBalDocBannerElement;
        "bal-doc-banner-status": HTMLBalDocBannerStatusElement;
        "bal-doc-color": HTMLBalDocColorElement;
        "bal-doc-download": HTMLBalDocDownloadElement;
        "bal-doc-github": HTMLBalDocGithubElement;
        "bal-doc-icons": HTMLBalDocIconsElement;
        "bal-doc-image": HTMLBalDocImageElement;
        "bal-doc-lead": HTMLBalDocLeadElement;
        "bal-doc-link-list": HTMLBalDocLinkListElement;
        "bal-doc-link-list-item": HTMLBalDocLinkListItemElement;
        "bal-doc-shades": HTMLBalDocShadesElement;
        "bal-doc-support-color": HTMLBalDocSupportColorElement;
        "bal-doc-tabs": HTMLBalDocTabsElement;
        "bal-doc-tokens-border": HTMLBalDocTokensBorderElement;
        "bal-doc-tokens-breakpoints": HTMLBalDocTokensBreakpointsElement;
        "bal-doc-tokens-colors": HTMLBalDocTokensColorsElement;
        "bal-doc-tokens-font": HTMLBalDocTokensFontElement;
        "bal-doc-tokens-font-sizes": HTMLBalDocTokensFontSizesElement;
        "bal-doc-tokens-font-weight": HTMLBalDocTokensFontWeightElement;
        "bal-doc-tokens-radius": HTMLBalDocTokensRadiusElement;
        "bal-doc-tokens-shadow": HTMLBalDocTokensShadowElement;
        "bal-doc-tokens-spacing": HTMLBalDocTokensSpacingElement;
        "bal-doc-usage": HTMLBalDocUsageElement;
        "bal-doc-usage-item": HTMLBalDocUsageItemElement;
        "bal-field": HTMLBalFieldElement;
        "bal-field-control": HTMLBalFieldControlElement;
        "bal-field-hint": HTMLBalFieldHintElement;
        "bal-field-label": HTMLBalFieldLabelElement;
        "bal-field-message": HTMLBalFieldMessageElement;
        "bal-file-upload": HTMLBalFileUploadElement;
        "bal-footer": HTMLBalFooterElement;
        "bal-form-col": HTMLBalFormColElement;
        "bal-form-grid": HTMLBalFormGridElement;
        "bal-heading": HTMLBalHeadingElement;
        "bal-hint": HTMLBalHintElement;
        "bal-hint-text": HTMLBalHintTextElement;
        "bal-hint-title": HTMLBalHintTitleElement;
        "bal-icon": HTMLBalIconElement;
        "bal-image-slider": HTMLBalImageSliderElement;
        "bal-input": HTMLBalInputElement;
        "bal-input-group": HTMLBalInputGroupElement;
        "bal-input-stepper": HTMLBalInputStepperElement;
        "bal-list": HTMLBalListElement;
        "bal-list-item": HTMLBalListItemElement;
        "bal-list-item-accordion-body": HTMLBalListItemAccordionBodyElement;
        "bal-list-item-accordion-head": HTMLBalListItemAccordionHeadElement;
        "bal-list-item-content": HTMLBalListItemContentElement;
        "bal-list-item-icon": HTMLBalListItemIconElement;
        "bal-list-item-subtitle": HTMLBalListItemSubtitleElement;
        "bal-list-item-title": HTMLBalListItemTitleElement;
        "bal-logo": HTMLBalLogoElement;
        "bal-main-navigation": HTMLBalMainNavigationElement;
        "bal-main-navigation-actions": HTMLBalMainNavigationActionsElement;
        "bal-main-navigation-links": HTMLBalMainNavigationLinksElement;
        "bal-main-navigation-menu": HTMLBalMainNavigationMenuElement;
        "bal-main-navigation-menu-buttons": HTMLBalMainNavigationMenuButtonsElement;
        "bal-main-navigation-menu-content": HTMLBalMainNavigationMenuContentElement;
        "bal-main-navigation-menu-panel": HTMLBalMainNavigationMenuPanelElement;
        "bal-main-navigation-menu-panel-list": HTMLBalMainNavigationMenuPanelListElement;
        "bal-main-navigation-menu-panel-list-item": HTMLBalMainNavigationMenuPanelListItemElement;
        "bal-main-navigation-meta-bar": HTMLBalMainNavigationMetaBarElement;
        "bal-main-navigation-second-bar": HTMLBalMainNavigationSecondBarElement;
        "bal-modal": HTMLBalModalElement;
        "bal-modal-body": HTMLBalModalBodyElement;
        "bal-modal-header": HTMLBalModalHeaderElement;
        "bal-navbar": HTMLBalNavbarElement;
        "bal-navbar-brand": HTMLBalNavbarBrandElement;
        "bal-navbar-menu": HTMLBalNavbarMenuElement;
        "bal-navbar-menu-end": HTMLBalNavbarMenuEndElement;
        "bal-navbar-menu-start": HTMLBalNavbarMenuStartElement;
        "bal-notices": HTMLBalNoticesElement;
        "bal-notification": HTMLBalNotificationElement;
        "bal-number-input": HTMLBalNumberInputElement;
        "bal-pagination": HTMLBalPaginationElement;
        "bal-popover": HTMLBalPopoverElement;
        "bal-popover-content": HTMLBalPopoverContentElement;
        "bal-product-slider": HTMLBalProductSliderElement;
        "bal-radio": HTMLBalRadioElement;
        "bal-radio-group": HTMLBalRadioGroupElement;
        "bal-select": HTMLBalSelectElement;
        "bal-select-option": HTMLBalSelectOptionElement;
        "bal-shape": HTMLBalShapeElement;
        "bal-sheet": HTMLBalSheetElement;
        "bal-slider": HTMLBalSliderElement;
        "bal-snackbar": HTMLBalSnackbarElement;
        "bal-spinner": HTMLBalSpinnerElement;
        "bal-stage": HTMLBalStageElement;
        "bal-stage-back-link": HTMLBalStageBackLinkElement;
        "bal-stage-body": HTMLBalStageBodyElement;
        "bal-stage-foot": HTMLBalStageFootElement;
        "bal-stage-head": HTMLBalStageHeadElement;
        "bal-tab-item": HTMLBalTabItemElement;
        "bal-table": HTMLBalTableElement;
        "bal-tabs": HTMLBalTabsElement;
        "bal-tag": HTMLBalTagElement;
        "bal-tag-group": HTMLBalTagGroupElement;
        "bal-text": HTMLBalTextElement;
        "bal-textarea": HTMLBalTextareaElement;
        "bal-timeinput": HTMLBalTimeinputElement;
        "bal-toast": HTMLBalToastElement;
    }
}
declare namespace LocalJSX {
    interface BalAccordion {
        /**
          * If `true` the accordion is used on the bottom of a card
         */
        "card"?: boolean;
        /**
          * BalIcon of the close trigger button
         */
        "closeIcon"?: string;
        /**
          * Label of the close trigger button
         */
        "closeLabel"?: string;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * Emitted when the accordion has opened or closed
         */
        "onBalChange"?: (event: BalAccordionCustomEvent<Events.BalAccordionChangeDetail>) => void;
        /**
          * BalIcon of the open trigger button
         */
        "openIcon"?: string;
        /**
          * Label of the open trigger button
         */
        "openLabel"?: string;
        /**
          * If `true` the accordion is open.
         */
        "value"?: boolean;
    }
    interface BalApp {
    }
    interface BalBadge {
        /**
          * Define the alert color for the badge.
         */
        "color"?: Props.BalBadgeColor;
        /**
          * Name of the icon to show. If a icon is present text should be hidden.
         */
        "icon"?: string;
        /**
          * If `true` the badge is added to the top right corner of the card.
         */
        "position"?: Props.BalBadgePosition;
        /**
          * Define the size of badge. Small is recommended for tabs.
         */
        "size"?: Props.BalBadgeSize;
    }
    interface BalButton {
        /**
          * If `true` the bottom corners get rounded
         */
        "bottomRounded"?: undefined | boolean;
        /**
          * The color to use from your application's color palette.
         */
        "color"?: Props.BalButtonColor;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string;
        /**
          * The type of button.
         */
        "elementType"?: Props.BalButtonElementType;
        /**
          * If `true` the button has a full width
         */
        "expanded"?: boolean;
        /**
          * If `true` the button has no padding and a reduced height
         */
        "flat"?: boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string;
        /**
          * Name of the left button icon
         */
        "icon"?: string;
        /**
          * Name of the right button icon
         */
        "iconRight"?: string;
        /**
          * If `true` the button is inverted
         */
        "inverted"?: boolean;
        /**
          * If `true` the button has a active theme
         */
        "isActive"?: boolean;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading"?: boolean;
        /**
          * The name of the button, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the button loses focus.
         */
        "onBalBlur"?: (event: BalButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has been  rendered.
         */
        "onBalDidRender"?: (event: BalButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onBalFocus"?: (event: BalButtonCustomEvent<void>) => void;
        /**
          * Emitted when the link element has clicked.
         */
        "onBalNavigate"?: (event: BalButtonCustomEvent<MouseEvent>) => void;
        /**
          * If `true` the button is outlined
         */
        "outlined"?: boolean;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string;
        /**
          * If `true` the button is rounded.
         */
        "rounded"?: boolean;
        /**
          * Size of the button
         */
        "size"?: Props.BalButtonSize;
        /**
          * If `true` the width of the buttons is limited
         */
        "square"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target"?: Props.BalButtonTarget;
        /**
          * If `true` the top corners get rounded
         */
        "topRounded"?: undefined | boolean;
        /**
          * The value of the button, which is submitted with the form data.
         */
        "value"?: string | number;
    }
    interface BalButtonGroup {
        /**
          * `auto` will position the button items vertical and full width. `row` will force that the buttons are also horizontal on mobile.
         */
        "direction"?: Props.BalButtonGroupDirection;
        /**
          * The value of the button, which is submitted with the form data.
         */
        "position"?: Props.BalButtonGroupPosition;
        /**
          * If `true` the flex direction is used in reverse on mobile.
         */
        "reverse"?: boolean;
    }
    interface BalCard {
        /**
          * If `true` a light blue border is added to the card.
         */
        "border"?: boolean;
        /**
          * If `true` the card has a hover effect.
         */
        "clickable"?: boolean;
        /**
          * Defines the color of the card.
         */
        "color"?: Props.BalCardColor;
        /**
          * If `true` the card loses its shadow.
         */
        "flat"?: boolean;
        /**
          * If `true` the card uses 100% of the available height.
         */
        "fullheight"?: boolean;
        /**
          * If `true` the card background color becomes blue.
         */
        "inverted"?: boolean;
        /**
          * If `true` the card gets a light background to indicate a selection.
         */
        "selected"?: boolean;
        /**
          * Defines the space of the card content.
         */
        "space"?: Props.BalCardSpace;
        /**
          * If `true` the card loses its border radius.
         */
        "square"?: boolean;
    }
    interface BalCardActions {
        /**
          * The value of the button, which is submitted with the form data.
         */
        "position"?: Props.BalCardActionsPosition;
        /**
          * @deprecated use position="right" If `true` the buttons start form right to left.
         */
        "right"?: boolean;
    }
    interface BalCardButton {
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * The type of button.
         */
        "elementType"?: Props.BalCardButtonElementType;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string;
        /**
          * Name of the icon like `edit`.
         */
        "icon"?: string;
        /**
          * Name of the right button icon
         */
        "iconRight"?: string;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target"?: Props.BalCardButtonTarget;
    }
    interface BalCardContent {
    }
    interface BalCardSubtitle {
        /**
          * If `true` the card text color is bold.
         */
        "bold"?: boolean;
        /**
          * If `true` the card text color becomes white.
         */
        "color"?: Props.BalHeadingColor;
        /**
          * If `true` the card text color becomes white.
         */
        "inverted"?: boolean;
    }
    interface BalCardTitle {
        /**
          * If `true` the card text color becomes white.
         */
        "inverted"?: boolean;
    }
    interface BalCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the control is no padding
         */
        "flat"?: boolean;
        /**
          * If `true`, the value will not be send with a form submit
         */
        "hidden"?: boolean;
        /**
          * Defines the layout of the checkbox button
         */
        "interface"?: Props.BalCheckboxInterface;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid"?: boolean;
        /**
          * If `true`, the control works on dark background.
         */
        "inverted"?: boolean;
        /**
          * If `true` the radio has no label
         */
        "labelHidden"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onBalBlur"?: (event: BalCheckboxCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value property has changed.
         */
        "onBalChange"?: (event: BalCheckboxCustomEvent<Events.BalCheckboxChangeDetail>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: BalCheckboxCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the toggle has focus.
         */
        "onBalFocus"?: (event: BalCheckboxCustomEvent<FocusEvent>) => void;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * A DOMString representing the value of the checkbox. This is not displayed on the client-side, but on the server this is the value given to the data submitted with the checkbox's name.
         */
        "value"?: string | number;
    }
    interface BalCheckboxGroup {
        /**
          * If `true` it acts as the main form control
         */
        "control"?: boolean;
        /**
          * If `true`, the user cannot interact with the radios.
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the checked property has changed.
         */
        "onBalChange"?: (event: BalCheckboxGroupCustomEvent<Events.BalCheckboxGroupChangeDetail>) => void;
        /**
          * If `true`, the user cannot interact with the radios.
         */
        "readonly"?: boolean;
        /**
          * The value of the control.
         */
        "value"?: any[];
        /**
          * Displays the checkboxes vertically
         */
        "vertical"?: boolean;
    }
    interface BalClose {
        /**
          * If `true` it supports dark backgrounds.
         */
        "inverted"?: boolean;
        /**
          * Define the size of badge. Small is recommended for tabs.
         */
        "size"?: Props.BalCloseSize;
    }
    interface BalData {
        /**
          * If `true` a bottom border is added to the data-item.
         */
        "border"?: boolean;
        /**
          * If `true` the data list is horizontal instead of vertical.
         */
        "horizontal"?: boolean;
    }
    interface BalDataItem {
        /**
          * If `true` a bottom border is added to the data-item.
         */
        "border"?: boolean;
        /**
          * If `true` the item gets a lighter font color.
         */
        "disabled"?: boolean;
    }
    interface BalDataLabel {
        /**
          * If `true` an asterix is added after the label.
         */
        "required"?: boolean;
    }
    interface BalDataValue {
        /**
          * If `true` the button will get disabled.
         */
        "disabled"?: boolean;
        /**
          * If `true` a small button with a edit icon will be shown on the right.
         */
        "editable"?: boolean;
        /**
          * If `true` the text will break and the height of the item increases.
         */
        "multiline"?: boolean;
        /**
          * Emitted when the edit button loses focus.
         */
        "onBalBlur"?: (event: BalDataValueCustomEvent<void>) => void;
        /**
          * Emitted when the edit button has focus.
         */
        "onBalClick"?: (event: BalDataValueCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the edit button has focus.
         */
        "onBalFocus"?: (event: BalDataValueCustomEvent<void>) => void;
    }
    interface BalDatepicker {
        /**
          * Callback to determine which date in the datepicker should be selectable.
         */
        "allowedDates"?: Props.BalDatepickerCallback | undefined;
        /**
          * Closes the datepicker popover after selection
         */
        "closeOnSelect"?: boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * The date to defines where the datepicker popup starts. The prop accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "defaultDate"?: string;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid"?: boolean;
        /**
          * Set this to `true` when the component is placed on a dark background.
         */
        "inverted"?: boolean;
        /**
          * @deprecated Define the locale of month and day names.
         */
        "locale"?: 'en' | 'de' | 'fr' | 'it' | '';
        /**
          * The maximum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the maximum could just be the year, such as `1994`. Defaults to the end of this year.
         */
        "max"?: string;
        /**
          * Latest year available for selection
         */
        "maxYearProp"?: number;
        /**
          * The minimum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), such as `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the minimum could just be the year, such as `1994`. Defaults to the beginning of the year, 100 years ago from today.
         */
        "min"?: string;
        /**
          * Earliest year available for selection
         */
        "minYearProp"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onBalBlur"?: (event: BalDatepickerCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a option got selected.
         */
        "onBalChange"?: (event: BalDatepickerCustomEvent<Events.BalDatepickerChangeDetail>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: BalDatepickerCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: BalDatepickerCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: BalDatepickerCustomEvent<Events.BalDatepickerInputDetail>) => void;
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true` the attribute required is added to the native input.
         */
        "required"?: boolean;
        /**
          * If `true` the datepicker only open on click of the icon
         */
        "triggerIcon"?: boolean;
        /**
          * The value of the form field, which accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "value"?: string;
    }
    interface BalDocApp {
    }
    interface BalDocBanner {
        "status"?: string;
        "subtitle"?: string;
    }
    interface BalDocBannerStatus {
        "context"?: BannerStatusContext[];
    }
    interface BalDocColor {
        "background"?: boolean;
        "color"?: string;
        "description"?: string;
        "inverted"?: boolean;
        "subject"?: string;
    }
    interface BalDocDownload {
        "iconLeft"?: string;
        "iconRight"?: string;
        "link"?: string;
        "subject"?: string;
        "subtitle"?: string;
    }
    interface BalDocGithub {
        "link"?: string;
    }
    interface BalDocIcons {
        "icons"?: string;
    }
    interface BalDocImage {
        "src"?: string;
        "text"?: string;
    }
    interface BalDocLead {
    }
    interface BalDocLinkList {
        "oneColumn"?: boolean;
    }
    interface BalDocLinkListItem {
        "image"?: string;
        "subject"?: string;
        "template"?: '' | 'html5' | 'angular' | 'vue' | 'react';
    }
    interface BalDocShades {
        "color"?: string;
    }
    interface BalDocSupportColor {
        "color"?: string;
    }
    interface BalDocTabs {
    }
    interface BalDocTokensBorder {
    }
    interface BalDocTokensBreakpoints {
    }
    interface BalDocTokensColors {
    }
    interface BalDocTokensFont {
    }
    interface BalDocTokensFontSizes {
    }
    interface BalDocTokensFontWeight {
    }
    interface BalDocTokensRadius {
    }
    interface BalDocTokensShadow {
    }
    interface BalDocTokensSpacing {
    }
    interface BalDocUsage {
    }
    interface BalDocUsageItem {
        "image"?: boolean;
        "subject"?: string;
        "theme"?: 'do' | 'dont';
    }
    interface BalField {
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the component gets a invalid red style.
         */
        "invalid"?: boolean;
        /**
          * If `true` a loading spinner is visible at the end of the input
         */
        "loading"?: boolean;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true` the form control needs to be filled. If it is set to `false` an optional label is added to the label..
         */
        "required"?: boolean;
        /**
          * If `true` the component gets a valid green style.
         */
        "valid"?: boolean;
    }
    interface BalFieldControl {
        /**
          * Baloise icon for the left side of the input
         */
        "iconLeft"?: string;
        /**
          * Baloise icon for the right side of the input
         */
        "iconRight"?: string;
        /**
          * If `true` a loading spinner is visible at the end of the input
         */
        "loading"?: boolean;
    }
    interface BalFieldHint {
        /**
          * Text for the close button.
         */
        "closeLabel"?: string;
        /**
          * Disables the close button for tablet and desktop
         */
        "small"?: boolean;
        /**
          * Text of the inputs label
         */
        "subject"?: string;
    }
    interface BalFieldLabel {
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the component gets a invalid red style.
         */
        "invalid"?: boolean;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true` the form control needs to be filled. If it is set to `false` an optional label is added to the label..
         */
        "required"?: boolean;
        /**
          * If `true` the component gets a valid green style.
         */
        "valid"?: boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "weight"?: Props1.BalFieldLabelWeight;
    }
    interface BalFieldMessage {
        /**
          * Defines the color of the message.
         */
        "color"?: Props.BalFieldMessageColor;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the component gets a invalid red style.
         */
        "invalid"?: boolean;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true` the component gets a valid green style.
         */
        "valid"?: boolean;
    }
    interface BalFileUpload {
        /**
          * Accepted MIME-Types like `image/png,image/jpeg`.
         */
        "accept"?: string;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` below the drop-down area it generates a file list.
         */
        "hasFileList"?: boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid"?: boolean;
        /**
          * Label of the drop area.
         */
        "label"?: string;
        /**
          * If `true` the file upload is disabled and shows a spinner
         */
        "loading"?: boolean;
        /**
          * Allowed max bundle size in bytes.
         */
        "maxBundleSize"?: number;
        /**
          * Allowed max file size in bytes.
         */
        "maxFileSize"?: number;
        /**
          * Allowed number of files in the bundle.
         */
        "maxFiles"?: number;
        /**
          * If `true` multiple file upload is possible.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Triggers when a file is added or removed.
         */
        "onBalChange"?: (event: BalFileUploadCustomEvent<File[]>) => void;
        /**
          * Triggers when a file is added.
         */
        "onBalFilesAdded"?: (event: BalFileUploadCustomEvent<File[]>) => void;
        /**
          * Triggers when a file is removed.
         */
        "onBalFilesRemoved"?: (event: BalFileUploadCustomEvent<File[]>) => void;
        /**
          * Triggers when a file is rejected due to not allowed MIME-Type and so on.
         */
        "onBalRejectedFile"?: (event: BalFileUploadCustomEvent<FileUploadRejectedFile>) => void;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * Overrides the default subtitle file size
         */
        "subTitle"?: (file: File) => string;
        /**
          * Input value.
         */
        "value"?: File[];
    }
    interface BalFooter {
        /**
          * If `true` the language selection will be hidden.
         */
        "hideLanguageSelection"?: boolean;
        /**
          * If `true` the legal Baloise links will be hidden.
         */
        "hideLinks"?: boolean;
        /**
          * @deprecated The languages in which the links will appear.
         */
        "locale"?: 'en' | 'de' | 'fr' | 'it' | '';
    }
    interface BalFormCol {
        "size"?: Props.BalFormColSize;
    }
    interface BalFormGrid {
    }
    interface BalHeading {
        /**
          * The theme type of the toast. Given by bulma our css framework.
         */
        "color"?: Props.BalHeadingColor;
        /**
          * If `true` the button is inverted
         */
        "inverted"?: boolean;
        /**
          * The actual heading level used in the HTML markup.
         */
        "level"?: Props.BalHeadingLevel;
        /**
          * Defines at which position the heading has spacing.
         */
        "space"?: 'none' | 'bottom' | 'top' | 'all';
        /**
          * If `true` the heading gets displayed slimmer.
         */
        "subtitle"?: boolean;
        /**
          * Make the visual style mimic a specific heading level. This option allows you to make e.g. h1 visually look like h3, but still keep it h1 in the markup.
         */
        "visualLevel"?: Props.BalHeadingLevel;
    }
    interface BalHint {
        /**
          * Text for the close button.
         */
        "closeLabel"?: string;
        /**
          * Disables the close button for tablet and desktop
         */
        "small"?: boolean;
    }
    interface BalHintText {
    }
    interface BalHintTitle {
    }
    interface BalIcon {
        /**
          * The theme type of the button. Given by bulma our css framework.
         */
        "color"?: Props.BalIconColor;
        /**
          * If `true` the icon has display inline style
         */
        "inline"?: boolean;
        /**
          * If `true` the icon is inverted
         */
        "inverted"?: boolean;
        /**
          * Name of the baloise icon.
         */
        "name"?: string;
        /**
          * Defines the size of the icon.
         */
        "size"?: Props.BalIconSize;
        /**
          * Svg content.
         */
        "svg"?: string;
        /**
          * If `true` the icon is rotated 180deg
         */
        "turn"?: boolean;
    }
    interface BalImageSlider {
    }
    interface BalInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: Props.BalInputAutocomplete;
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: Props.BalInputAutocorrect;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true` the input gets a clickable cursor style
         */
        "clickable"?: boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * @deprecated Defines the allowed decimal points for the `number-input`. Use the <bal-number-input> component instead.
         */
        "decimal"?: number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        "hasIconRight"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: Props.BalInputInputMode;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid"?: boolean;
        /**
          * If `true` this component can be placed on dark background
         */
        "inverted"?: boolean;
        /**
          * Mask of the input field. It defines what the user can enter and how the format looks like. Currently, only for Switzerland formatted. Formatting for 'contract-number': '99/1.234.567-1' Formatting for 'claim-number': ('73/001217/16.9') Formatting for 'offer-number': ('98/7.654.321')
         */
        "mask"?: Props.BalInputMask;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * Defines the max length of the value.
         */
        "maxLength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * Defines the min length of the value.
         */
        "minLength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * @deprecated If `true` on mobile device the number keypad is active. Use the <bal-number-input> component instead.
         */
        "numberInput"?: boolean;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalBlur"?: (event: BalInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onBalChange"?: (event: BalInputCustomEvent<Events.BalInputChangeDetail>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: BalInputCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: BalInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: BalInputCustomEvent<Events.BalInputInputDetail>) => void;
        /**
          * Emitted when a keyboard key has pressed.
         */
        "onBalKeyPress"?: (event: BalInputCustomEvent<KeyboardEvent>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Adds a suffix the the input-value after blur.
         */
        "suffix"?: string;
        /**
          * Defines the text align of the input value.
         */
        "textAlign"?: 'center' | 'left' | 'right';
        /**
          * Defines the type of the input (text, number, email ...).
         */
        "type"?: Props.BalInputInputType;
        /**
          * The value of the input.
         */
        "value"?: string;
    }
    interface BalInputGroup {
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid"?: boolean;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
    }
    interface BalInputStepper {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the input is shown as invalid
         */
        "invalid"?: boolean;
        /**
          * The max value the input can have
         */
        "max"?: number;
        /**
          * The min value the input can have
         */
        "min"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input value has changed.
         */
        "onBalChange"?: (event: BalInputStepperCustomEvent<Events.BalInputStepperChangeDetail>) => void;
        /**
          * Emitted when the input value has decreased.
         */
        "onBalDecrease"?: (event: BalInputStepperCustomEvent<Events.BalInputStepperChangeDetail>) => void;
        /**
          * Emitted when the input value has increased.
         */
        "onBalIncrease"?: (event: BalInputStepperCustomEvent<Events.BalInputStepperChangeDetail>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onBalInput"?: (event: BalInputStepperCustomEvent<Events.BalInputStepperInputDetail>) => void;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * The steps in which the input increases or decreases
         */
        "steps"?: number;
        /**
          * The value of the input. Only allows values in the range of the min max attribute.
         */
        "value"?: number;
    }
    interface BalList {
        /**
          * If `true` the list can be used on a light, dark or colored backgrounds
         */
        "background"?: Props.BalListBackground;
        /**
          * If `true` each list item has a bottom border
         */
        "border"?: boolean;
        /**
          * If `true` the list item can not be hovered
         */
        "disabled"?: boolean;
        /**
          * @deprecated If `true` the list can be used on a dark background
         */
        "inverted"?: boolean;
        /**
          * If `true` the list can be used as an accordion in meta nav
         */
        "metaNavAccordion"?: boolean;
        /**
          * Defines the min height of the list item
         */
        "size"?: Props.BalListSize;
    }
    interface BalListItem {
        /**
          * If `true` the list item can be used as a accordion
         */
        "accordion"?: boolean;
        /**
          * If `true` the list item shows that it is clickable
         */
        "clickable"?: boolean;
        /**
          * If `true` the list item can be hovered
         */
        "disabled"?: boolean;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string;
        /**
          * Emitted when the link element has clicked
         */
        "onBalNavigate"?: (event: BalListItemCustomEvent<MouseEvent>) => void;
        /**
          * If `true` the list item has a selected theme
         */
        "selected"?: boolean;
        /**
          * If `true` the list item can be used as an accordion inside another accordion
         */
        "subAccordionItem"?: boolean;
        /**
          * Specifies where to open the linked document
         */
        "target"?: Props.BalListItemTarget;
    }
    interface BalListItemAccordionBody {
        /**
          * If `true` the body will be open and visible
         */
        "open"?: boolean;
    }
    interface BalListItemAccordionHead {
        /**
          * If `true` the list accordion is open
         */
        "accordionOpen"?: boolean;
        /**
          * Emitted when the accordion state is changed
         */
        "onBalAccordionChange"?: (event: BalListItemAccordionHeadCustomEvent<boolean>) => void;
    }
    interface BalListItemContent {
    }
    interface BalListItemIcon {
        /**
          * If `true` the icon is on the right side of the list item. Default is the left side.
         */
        "right"?: boolean;
    }
    interface BalListItemSubtitle {
    }
    interface BalListItemTitle {
    }
    interface BalLogo {
        /**
          * Defines the color of the logo.
         */
        "color"?: Props.BalLogoColor;
        /**
          * Defines the size of the logo.
         */
        "size"?: Props.BalLogoSize;
    }
    interface BalMainNavigation {
        /**
          * Link of the logo
         */
        "logoPath"?: string;
    }
    interface BalMainNavigationActions {
    }
    interface BalMainNavigationLinks {
    }
    interface BalMainNavigationMenu {
    }
    interface BalMainNavigationMenuButtons {
    }
    interface BalMainNavigationMenuContent {
    }
    interface BalMainNavigationMenuPanel {
        "linkHref"?: string;
        "linkName"?: string;
    }
    interface BalMainNavigationMenuPanelList {
        "headline"?: string;
        "href"?: string;
        "isService"?: boolean;
    }
    interface BalMainNavigationMenuPanelListItem {
        "href"?: string;
    }
    interface BalMainNavigationMetaBar {
        "ariaLabel": string;
        /**
          * Link of the logo
         */
        "logoPath"?: string;
        /**
          * Emitted when the link element has clicked
         */
        "onBalNavigate"?: (event: BalMainNavigationMetaBarCustomEvent<MouseEvent>) => void;
    }
    interface BalMainNavigationSecondBar {
        "ariaLabel": string;
        /**
          * Link of the logo
         */
        "logoPath"?: string;
        /**
          * Emitted when the link element has clicked
         */
        "onBalNavigate"?: (event: BalMainNavigationSecondBarCustomEvent<MouseEvent>) => void;
    }
    interface BalModal {
        /**
          * The component to display inside of the modal.
         */
        "component": Props.ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: Props.ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "dataTestId"?: string;
        "delegate"?: Props.FrameworkDelegate;
        /**
          * If `true`, a backdrop will be displayed behind the modal.
         */
        "hasBackdrop"?: boolean;
        /**
          * If `true`, the modal can be closed with the escape key or the little close button.
         */
        "isClosable"?: boolean;
        /**
          * Defines the width of the modal body
         */
        "modalWidth"?: number;
        /**
          * Emitted after the modal has dismissed.
         */
        "onBalModalDidDismiss"?: (event: BalModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the modal has presented.
         */
        "onBalModalDidPresent"?: (event: BalModalCustomEvent<void>) => void;
        /**
          * Emitted before the modal has dismissed.
         */
        "onBalModalWillDismiss"?: (event: BalModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the modal has presented.
         */
        "onBalModalWillPresent"?: (event: BalModalCustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * Defines the space/padding of the modal
         */
        "space"?: Props.BalModalSpace;
    }
    interface BalModalBody {
    }
    interface BalModalHeader {
    }
    interface BalNavbar {
        /**
          * TODO: describe
         */
        "container"?: 'fluid' | 'detail-page' | 'compact' | 'blog-page' | 'wide' | '';
        /**
          * Defines the type of navbar. App is used for almost every web applications like the portal app. For our sales funnel we recommend to use the simple navbar. Meta and main are used for the website.
         */
        "interface"?: Props.BalNavbarInterface;
        /**
          * It `true` the navbar has a white background. Always use the blue header.
         */
        "light"?: boolean;
    }
    interface BalNavbarBrand {
        /**
          * Link of the logo / title.
         */
        "href"?: string;
        "interface"?: Props1.BalNavbarInterface;
        /**
          * Emitted when the link element has clicked
         */
        "onBalNavigate"?: (event: BalNavbarBrandCustomEvent<MouseEvent>) => void;
        /**
          * @deprecated Use interface on bal-navbar instead. If `true` the navbar does not have a mobil version. Only shows logo and an app title.
         */
        "simple"?: boolean;
    }
    interface BalNavbarMenu {
        "interface"?: Props.BalNavbarInterface;
    }
    interface BalNavbarMenuEnd {
        "interface"?: Props.BalNavbarInterface;
    }
    interface BalNavbarMenuStart {
        "interface"?: Props.BalNavbarInterface;
    }
    interface BalNotices {
        "interface"?: 'toast' | 'snackbar';
    }
    interface BalNotification {
        /**
          * Defines the color of the element Color type primary is deprecated, please use info instead.
         */
        "color"?: Props.BalNotificationColor;
    }
    interface BalNumberInput {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * Defines the allowed decimal points for the `number-input`.
         */
        "decimal"?: number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the input value has 0 as default value
         */
        "exactNumber"?: boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onBalBlur"?: (event: BalNumberInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onBalChange"?: (event: BalNumberInputCustomEvent<Events1.BalInputNumberChangeDetail>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: BalNumberInputCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: BalNumberInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: BalNumberInputCustomEvent<Events1.BalInputNumberInputDetail>) => void;
        /**
          * Emitted when a keyboard key has pressed.
         */
        "onBalKeyPress"?: (event: BalNumberInputCustomEvent<KeyboardEvent>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * Adds a suffix the the input-value after blur.
         */
        "suffix"?: string;
        /**
          * The value of the input.
         */
        "value"?: number;
    }
    interface BalPagination {
        /**
          * Disables component
         */
        "disabled"?: boolean;
        /**
          * Triggers when a page change happens
         */
        "onBalChange"?: (event: BalPaginationCustomEvent<number>) => void;
        /**
          * Specify the max visible pages before and after the selected page
         */
        "pageRange"?: number;
        /**
          * The total amount of pages
         */
        "totalPages"?: number;
        /**
          * Current selected page
         */
        "value"?: number;
    }
    interface BalPopover {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true` the field spans over the whole width.
         */
        "offsetX"?: number;
        /**
          * If `true` the field spans over the whole width.
         */
        "offsetY"?: number;
        /**
          * Listen when the popover opens or closes. Returns the current value.
         */
        "onBalChange"?: (event: BalPopoverCustomEvent<Events1.BalPopoverChangeDetail>) => void;
        "onBalPopoverPrepare"?: (event: BalPopoverCustomEvent<string>) => void;
        /**
          * If `true` the field spans over the whole width.
         */
        "position"?: Props.BalPopoverPlacement;
        /**
          * If `true` the popover content is open.
         */
        "value"?: boolean;
    }
    interface BalPopoverContent {
        /**
          * Define the max width of the popover content.
         */
        "contentWidth"?: number;
        /**
          * If `true` the content has a min width of 100%.
         */
        "expanded"?: boolean;
        /**
          * Limit the height of the popover content. Pass the amount of pixel.
         */
        "scrollable"?: number;
    }
    interface BalProductSlider {
    }
    interface BalRadio {
        /**
          * If `true`, the radio is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the radio button
         */
        "interface"?: Props.BalRadioInterface;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid"?: boolean;
        /**
          * If `true`, the control works on dark background.
         */
        "inverted"?: boolean;
        /**
          * @deprecated If `true` the radio has no label
         */
        "isEmpty"?: boolean;
        /**
          * If `true` the radio has no label
         */
        "labelHidden"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onBalBlur"?: (event: BalRadioCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onBalChange"?: (event: BalRadioCustomEvent<Events.BalRadioChangeDetail>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: BalRadioCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the toggle has focus.
         */
        "onBalFocus"?: (event: BalRadioCustomEvent<FocusEvent>) => void;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The tabindex of the control.
         */
        "value"?: number | string | boolean;
    }
    interface BalRadioGroup {
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the radio button
         */
        "interface"?: Props.BalRadioGroupInterface;
        /**
          * If `true` the component can be used on dark background
         */
        "inverted"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the checked property has changed.
         */
        "onBalChange"?: (event: BalRadioGroupCustomEvent<Events.BalRadioGroupChangeDetail>) => void;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * The value of the control.
         */
        "value"?: number | string | boolean;
        /**
          * Displays the checkboxes vertically
         */
        "vertical"?: boolean;
        /**
          * If `true`, the controls will be vertically on mobile devices.
         */
        "verticalOnMobile"?: boolean;
    }
    interface BalSelect {
        /**
          * The tabindex of the control.
         */
        "balTabindex"?: number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "filter"?: Props.BalSelectFilter;
        /**
          * @deprecated Enables the slide in animation for the option items.
         */
        "hasMovement"?: boolean;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid"?: boolean;
        /**
          * @deprecated Set this to `true` when the component is placed on a dark background. Set this to `true` when the component is placed on a dark background.
         */
        "inverted"?: boolean;
        /**
          * Defines if the select is in a loading state.
         */
        "loading"?: boolean;
        /**
          * If `true` multiple option can be selected
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * @deprecated Removes the border of the input.
         */
        "noBorder"?: boolean;
        /**
          * This label is shown if typeahead is active and all the options are filtered out.
         */
        "noDataLabel"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onBalBlur"?: (event: BalSelectCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the user cancels the input.
         */
        "onBalCancel"?: (event: BalSelectCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted when a option got selected.
         */
        "onBalChange"?: (event: BalSelectCustomEvent<Events.BalSelectChangeDetail>) => void;
        /**
          * Emitted when the input got clicked.
         */
        "onBalClick"?: (event: BalSelectCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: BalSelectCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: BalSelectCustomEvent<string>) => void;
        /**
          * Emitted when the input has focus and key from the keyboard go hit.
         */
        "onBalKeyPress"?: (event: BalSelectCustomEvent<KeyboardEvent>) => void;
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true` the filtering is done outside the component.
         */
        "remote"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * Defines the height of the popover list.
         */
        "scrollable"?: number;
        /**
          * If `true` the options are a proposal and the user can also create his own value. Can only be used with the typeahead property.
         */
        "selectionOptional"?: boolean;
        /**
          * If `true` the user can search by typing into the input field.
         */
        "typeahead"?: boolean;
        /**
          * Selected option values. Could also be passed as a string, which gets transformed.
         */
        "value"?: string | string[];
    }
    interface BalSelectOption {
        /**
          * If `true`, the user cannot interact with the option.
         */
        "disabled"?: boolean;
        /**
          * Label will be shown in the input element when it got selected
         */
        "label"?: string;
        /**
          * The value of the select option. This value will be returned by the parent `<bal-select>` element.
         */
        "value"?: string;
    }
    interface BalShape {
        /**
          * The shape color
         */
        "color"?: Props.BalShapeColor;
        /**
          * The shape rotation
         */
        "rotation"?: Props.BalShapeRotation;
        /**
          * The shape variation
         */
        "variation"?: Props.BalShapeVariation;
    }
    interface BalSheet {
    }
    interface BalSlider {
        /**
          * The tabindex of the control.
         */
        "balTabindex"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true`, small ticks for the steps are shown.
         */
        "hasTicks"?: boolean;
        /**
          * Max value of the model.
         */
        "max"?: number;
        /**
          * Min value of the model.
         */
        "min"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalBlur"?: (event: BalSliderCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onBalChange"?: (event: BalSliderCustomEvent<Events.BalSliderChangeDetail>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: BalSliderCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: BalSliderCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: BalSliderCustomEvent<string | number | null>) => void;
        /**
          * Emitted when a keyboard key has pressed.
         */
        "onBalKeyPress"?: (event: BalSliderCustomEvent<KeyboardEvent>) => void;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The step size. 0 means no steps.
         */
        "step"?: number;
        /**
          * The value of the input.
         */
        "value"?: string | number;
    }
    interface BalSnackbar {
        /**
          * Label text for the action button
         */
        "action"?: string;
        "actionHandler"?: () => void;
        "closeHandler"?: () => void;
        /**
          * The theme type of the snackbar. Given by bulma our css framework.
         */
        "color"?: Props.BalSnackbarColor;
        /**
          * The duration of the snackbar
         */
        "duration"?: number;
        /**
          * Specifies the URL of the page the link goes to
         */
        "href"?: string;
        /**
          * The icon of the snackbar header
         */
        "icon"?: string;
        /**
          * The message of the snackbar
         */
        "message"?: string;
        /**
          * Emitted when the action button is clicked
         */
        "onBalAction"?: (event: BalSnackbarCustomEvent<string>) => void;
        /**
          * Emitted when snackbar is closed
         */
        "onBalClose"?: (event: BalSnackbarCustomEvent<string>) => void;
        /**
          * The subject of the snackbar header
         */
        "subject"?: string;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target"?: Props.BalButtonTarget;
    }
    interface BalSpinner {
        /**
          * Defines the color of the spinner.
         */
        "color"?: 'blue' | 'white';
        /**
          * If `true` the component can be used on dark background
         */
        "inverted"?: boolean;
        /**
          * If `true` the component is smaller
         */
        "small"?: boolean;
    }
    interface BalStage {
        /**
          * Defines the background color of the stage section
         */
        "color"?: Props.BalStageColor;
        /**
          * class to set the container width
         */
        "containerClass"?: string;
        /**
          * If true the Baloise Shape is set
         */
        "hasShape"?: boolean;
        /**
          * src-set string for the css background-image
         */
        "images"?: string;
        /**
          * sets text color to white for images and dark backgrounds (optional)
         */
        "inverted"?: undefined | boolean;
        /**
          * Defines size of the stage
         */
        "size"?: Props.BalStageSize;
    }
    interface BalStageBackLink {
        /**
          * Specifies the URL of the page the link goes to
         */
        "href": string;
    }
    interface BalStageBody {
        /**
          * class to set the container width
         */
        "containerClass"?: string;
    }
    interface BalStageFoot {
    }
    interface BalStageHead {
    }
    interface BalTabItem {
        /**
          * Tells if this route is active and overrides the bal-tabs value property.
         */
        "active"?: boolean;
        /**
          * If `true` a small red bubble is added to the tab.
         */
        "bubble"?: boolean | string;
        /**
          * If `true` the tab is disabled.
         */
        "disabled"?: boolean;
        /**
          * If `true` the step is marked as done.
         */
        "done"?: boolean;
        /**
          * If `true` the step is marked as failed.
         */
        "failed"?: boolean;
        /**
          * Link to path.
         */
        "href"?: string;
        /**
          * Tab icon not available for the steps.
         */
        "icon"?: string;
        /**
          * Tab icon not available for the steps.
         */
        "inMainNavigation"?: boolean;
        /**
          * Label for the tab.
         */
        "label"?: string;
        /**
          * Emitted when the link element has clicked
         */
        "onBalNavigate"?: (event: BalTabItemCustomEvent<MouseEvent | CustomEvent>) => void;
        /**
          * Tell's if the linking is done by a router.
         */
        "prevent"?: boolean;
        /**
          * This is the key of the tab.
         */
        "value"?: string;
    }
    interface BalTable {
        /**
          * If `true` the table has a full width
         */
        "expanded"?: boolean;
    }
    interface BalTabs {
        /**
          * If `true` a light border is shown for the tabs.
         */
        "border"?: boolean;
        /**
          * If `true` the tabs or steps can be clicked.
         */
        "clickable"?: boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true` the field expands over the whole width.
         */
        "expanded"?: boolean;
        /**
          * If `true` the tabs is a block element and uses 100% of the width
         */
        "fullwidth"?: boolean;
        /**
          * Defines the layout of the tabs.
         */
        "iconPosition"?: Props.BalTabsIconPosition;
        /**
          * Defines the layout of the tabs.
         */
        "interface"?: Props.BalTabsInterface;
        /**
          * If `true` the field expands over the whole width.
         */
        "inverted"?: boolean;
        /**
          * Emitted when the changes has finished.
         */
        "onBalChange"?: (event: BalTabsCustomEvent<string>) => void;
        /**
          * If `true` the tabs are shown as a select component on mobile
         */
        "selectOnMobile"?: boolean;
        "value"?: string;
        /**
          * If `true` tabs are align vertically.
         */
        "vertical"?: Props.BalTabsVertical;
        /**
          * The col size of the tabs on vertical mode.
         */
        "verticalColSize"?: Props.BalTabsColSize;
    }
    interface BalTag {
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "closable"?: boolean;
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "color"?: Props.BalTagColor;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * If `true` a light version of the color is displayed
         */
        "light"?: boolean;
        /**
          * Emitted when the input got clicked.
         */
        "onBalCloseClick"?: (event: BalTagCustomEvent<Events.BalTagCloseClickDetail>) => void;
        /**
          * The size of the tag element
         */
        "size"?: Props.BalTagSize;
        /**
          * @deprecated
         */
        "transparent"?: boolean;
    }
    interface BalTagGroup {
    }
    interface BalText {
        /**
          * If `true` the text is bold
         */
        "bold"?: boolean;
        /**
          * Defines the color of the text.
         */
        "color"?: Props.BalTextColor;
        /**
          * If `true` the text has heading font family
         */
        "heading"?: boolean;
        /**
          * If `true` the text is shown as a display inline
         */
        "inline"?: boolean;
        /**
          * Defines the size of the paragraph
         */
        "size"?: Props.BalTextSize;
        /**
          * Defines at which position the heading has spacing.
         */
        "space"?: Props.BalTextSpace;
    }
    interface BalTextarea {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize"?: string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true` the input gets a clickable cursor style
         */
        "clickable"?: boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: Props.BalTextareaInputMode;
        /**
          * If `true` the component gets a invalid style.
         */
        "invalid"?: boolean;
        /**
          * If `true` this component can be placed on dark background
         */
        "inverted"?: boolean;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxLength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minLength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalBlur"?: (event: BalTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed..
         */
        "onBalChange"?: (event: BalTextareaCustomEvent<Events.BalTextareaChangeDetail>) => void;
        /**
          * Emitted when the input has clicked.
         */
        "onBalClick"?: (event: BalTextareaCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onBalFocus"?: (event: BalTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onBalInput"?: (event: BalTextareaCustomEvent<Events.BalTextareaInputDetail>) => void;
        /**
          * Emitted when a keyboard key has pressed.
         */
        "onBalKeyPress"?: (event: BalTextareaCustomEvent<KeyboardEvent>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true` the element can not mutated, meaning the user can not edit the control.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * The value of the textarea.
         */
        "value"?: string;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: Props.BalTextareaWrap;
    }
    interface BalTimeinput {
        /**
          * If `true` the button is disabled
         */
        "disabled"?: boolean;
        /**
          * If `true` the timeinput can be used on blue background.
         */
        "inverted"?: boolean;
        /**
          * Latest date available for selection
         */
        "maxTime"?: string;
        /**
          * Earliest date available for selection
         */
        "minTime"?: string;
        /**
          * Emitted when either the hour or minute input field loses focus.
         */
        "onBalBlur"?: (event: BalTimeinputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when either the hour or the minute input has changed. It will not be triggered if either hour or time input has never been set (i.e. "--" is selected).
         */
        "onBalChange"?: (event: BalTimeinputCustomEvent<string>) => void;
        /**
          * The value of the datepicker with the format `hh:mm`.
         */
        "value"?: string;
    }
    interface BalToast {
        "closeHandler"?: () => void;
        /**
          * The theme type of the toast. Given by bulma our css framework. Color type primary is deprecated, please use info instead.
         */
        "color"?: Props.BalTostColor;
        /**
          * The duration of the toast in milliseconds.
         */
        "duration"?: number;
        /**
          * Content message
         */
        "message"?: string;
        /**
          * Emitted when toast is closed
         */
        "onBalClose"?: (event: BalToastCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "bal-accordion": BalAccordion;
        "bal-app": BalApp;
        "bal-badge": BalBadge;
        "bal-button": BalButton;
        "bal-button-group": BalButtonGroup;
        "bal-card": BalCard;
        "bal-card-actions": BalCardActions;
        "bal-card-button": BalCardButton;
        "bal-card-content": BalCardContent;
        "bal-card-subtitle": BalCardSubtitle;
        "bal-card-title": BalCardTitle;
        "bal-checkbox": BalCheckbox;
        "bal-checkbox-group": BalCheckboxGroup;
        "bal-close": BalClose;
        "bal-data": BalData;
        "bal-data-item": BalDataItem;
        "bal-data-label": BalDataLabel;
        "bal-data-value": BalDataValue;
        "bal-datepicker": BalDatepicker;
        "bal-doc-app": BalDocApp;
        "bal-doc-banner": BalDocBanner;
        "bal-doc-banner-status": BalDocBannerStatus;
        "bal-doc-color": BalDocColor;
        "bal-doc-download": BalDocDownload;
        "bal-doc-github": BalDocGithub;
        "bal-doc-icons": BalDocIcons;
        "bal-doc-image": BalDocImage;
        "bal-doc-lead": BalDocLead;
        "bal-doc-link-list": BalDocLinkList;
        "bal-doc-link-list-item": BalDocLinkListItem;
        "bal-doc-shades": BalDocShades;
        "bal-doc-support-color": BalDocSupportColor;
        "bal-doc-tabs": BalDocTabs;
        "bal-doc-tokens-border": BalDocTokensBorder;
        "bal-doc-tokens-breakpoints": BalDocTokensBreakpoints;
        "bal-doc-tokens-colors": BalDocTokensColors;
        "bal-doc-tokens-font": BalDocTokensFont;
        "bal-doc-tokens-font-sizes": BalDocTokensFontSizes;
        "bal-doc-tokens-font-weight": BalDocTokensFontWeight;
        "bal-doc-tokens-radius": BalDocTokensRadius;
        "bal-doc-tokens-shadow": BalDocTokensShadow;
        "bal-doc-tokens-spacing": BalDocTokensSpacing;
        "bal-doc-usage": BalDocUsage;
        "bal-doc-usage-item": BalDocUsageItem;
        "bal-field": BalField;
        "bal-field-control": BalFieldControl;
        "bal-field-hint": BalFieldHint;
        "bal-field-label": BalFieldLabel;
        "bal-field-message": BalFieldMessage;
        "bal-file-upload": BalFileUpload;
        "bal-footer": BalFooter;
        "bal-form-col": BalFormCol;
        "bal-form-grid": BalFormGrid;
        "bal-heading": BalHeading;
        "bal-hint": BalHint;
        "bal-hint-text": BalHintText;
        "bal-hint-title": BalHintTitle;
        "bal-icon": BalIcon;
        "bal-image-slider": BalImageSlider;
        "bal-input": BalInput;
        "bal-input-group": BalInputGroup;
        "bal-input-stepper": BalInputStepper;
        "bal-list": BalList;
        "bal-list-item": BalListItem;
        "bal-list-item-accordion-body": BalListItemAccordionBody;
        "bal-list-item-accordion-head": BalListItemAccordionHead;
        "bal-list-item-content": BalListItemContent;
        "bal-list-item-icon": BalListItemIcon;
        "bal-list-item-subtitle": BalListItemSubtitle;
        "bal-list-item-title": BalListItemTitle;
        "bal-logo": BalLogo;
        "bal-main-navigation": BalMainNavigation;
        "bal-main-navigation-actions": BalMainNavigationActions;
        "bal-main-navigation-links": BalMainNavigationLinks;
        "bal-main-navigation-menu": BalMainNavigationMenu;
        "bal-main-navigation-menu-buttons": BalMainNavigationMenuButtons;
        "bal-main-navigation-menu-content": BalMainNavigationMenuContent;
        "bal-main-navigation-menu-panel": BalMainNavigationMenuPanel;
        "bal-main-navigation-menu-panel-list": BalMainNavigationMenuPanelList;
        "bal-main-navigation-menu-panel-list-item": BalMainNavigationMenuPanelListItem;
        "bal-main-navigation-meta-bar": BalMainNavigationMetaBar;
        "bal-main-navigation-second-bar": BalMainNavigationSecondBar;
        "bal-modal": BalModal;
        "bal-modal-body": BalModalBody;
        "bal-modal-header": BalModalHeader;
        "bal-navbar": BalNavbar;
        "bal-navbar-brand": BalNavbarBrand;
        "bal-navbar-menu": BalNavbarMenu;
        "bal-navbar-menu-end": BalNavbarMenuEnd;
        "bal-navbar-menu-start": BalNavbarMenuStart;
        "bal-notices": BalNotices;
        "bal-notification": BalNotification;
        "bal-number-input": BalNumberInput;
        "bal-pagination": BalPagination;
        "bal-popover": BalPopover;
        "bal-popover-content": BalPopoverContent;
        "bal-product-slider": BalProductSlider;
        "bal-radio": BalRadio;
        "bal-radio-group": BalRadioGroup;
        "bal-select": BalSelect;
        "bal-select-option": BalSelectOption;
        "bal-shape": BalShape;
        "bal-sheet": BalSheet;
        "bal-slider": BalSlider;
        "bal-snackbar": BalSnackbar;
        "bal-spinner": BalSpinner;
        "bal-stage": BalStage;
        "bal-stage-back-link": BalStageBackLink;
        "bal-stage-body": BalStageBody;
        "bal-stage-foot": BalStageFoot;
        "bal-stage-head": BalStageHead;
        "bal-tab-item": BalTabItem;
        "bal-table": BalTable;
        "bal-tabs": BalTabs;
        "bal-tag": BalTag;
        "bal-tag-group": BalTagGroup;
        "bal-text": BalText;
        "bal-textarea": BalTextarea;
        "bal-timeinput": BalTimeinput;
        "bal-toast": BalToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bal-accordion": LocalJSX.BalAccordion & JSXBase.HTMLAttributes<HTMLBalAccordionElement>;
            "bal-app": LocalJSX.BalApp & JSXBase.HTMLAttributes<HTMLBalAppElement>;
            "bal-badge": LocalJSX.BalBadge & JSXBase.HTMLAttributes<HTMLBalBadgeElement>;
            "bal-button": LocalJSX.BalButton & JSXBase.HTMLAttributes<HTMLBalButtonElement>;
            "bal-button-group": LocalJSX.BalButtonGroup & JSXBase.HTMLAttributes<HTMLBalButtonGroupElement>;
            "bal-card": LocalJSX.BalCard & JSXBase.HTMLAttributes<HTMLBalCardElement>;
            "bal-card-actions": LocalJSX.BalCardActions & JSXBase.HTMLAttributes<HTMLBalCardActionsElement>;
            "bal-card-button": LocalJSX.BalCardButton & JSXBase.HTMLAttributes<HTMLBalCardButtonElement>;
            "bal-card-content": LocalJSX.BalCardContent & JSXBase.HTMLAttributes<HTMLBalCardContentElement>;
            "bal-card-subtitle": LocalJSX.BalCardSubtitle & JSXBase.HTMLAttributes<HTMLBalCardSubtitleElement>;
            "bal-card-title": LocalJSX.BalCardTitle & JSXBase.HTMLAttributes<HTMLBalCardTitleElement>;
            "bal-checkbox": LocalJSX.BalCheckbox & JSXBase.HTMLAttributes<HTMLBalCheckboxElement>;
            "bal-checkbox-group": LocalJSX.BalCheckboxGroup & JSXBase.HTMLAttributes<HTMLBalCheckboxGroupElement>;
            "bal-close": LocalJSX.BalClose & JSXBase.HTMLAttributes<HTMLBalCloseElement>;
            "bal-data": LocalJSX.BalData & JSXBase.HTMLAttributes<HTMLBalDataElement>;
            "bal-data-item": LocalJSX.BalDataItem & JSXBase.HTMLAttributes<HTMLBalDataItemElement>;
            "bal-data-label": LocalJSX.BalDataLabel & JSXBase.HTMLAttributes<HTMLBalDataLabelElement>;
            "bal-data-value": LocalJSX.BalDataValue & JSXBase.HTMLAttributes<HTMLBalDataValueElement>;
            "bal-datepicker": LocalJSX.BalDatepicker & JSXBase.HTMLAttributes<HTMLBalDatepickerElement>;
            "bal-doc-app": LocalJSX.BalDocApp & JSXBase.HTMLAttributes<HTMLBalDocAppElement>;
            "bal-doc-banner": LocalJSX.BalDocBanner & JSXBase.HTMLAttributes<HTMLBalDocBannerElement>;
            "bal-doc-banner-status": LocalJSX.BalDocBannerStatus & JSXBase.HTMLAttributes<HTMLBalDocBannerStatusElement>;
            "bal-doc-color": LocalJSX.BalDocColor & JSXBase.HTMLAttributes<HTMLBalDocColorElement>;
            "bal-doc-download": LocalJSX.BalDocDownload & JSXBase.HTMLAttributes<HTMLBalDocDownloadElement>;
            "bal-doc-github": LocalJSX.BalDocGithub & JSXBase.HTMLAttributes<HTMLBalDocGithubElement>;
            "bal-doc-icons": LocalJSX.BalDocIcons & JSXBase.HTMLAttributes<HTMLBalDocIconsElement>;
            "bal-doc-image": LocalJSX.BalDocImage & JSXBase.HTMLAttributes<HTMLBalDocImageElement>;
            "bal-doc-lead": LocalJSX.BalDocLead & JSXBase.HTMLAttributes<HTMLBalDocLeadElement>;
            "bal-doc-link-list": LocalJSX.BalDocLinkList & JSXBase.HTMLAttributes<HTMLBalDocLinkListElement>;
            "bal-doc-link-list-item": LocalJSX.BalDocLinkListItem & JSXBase.HTMLAttributes<HTMLBalDocLinkListItemElement>;
            "bal-doc-shades": LocalJSX.BalDocShades & JSXBase.HTMLAttributes<HTMLBalDocShadesElement>;
            "bal-doc-support-color": LocalJSX.BalDocSupportColor & JSXBase.HTMLAttributes<HTMLBalDocSupportColorElement>;
            "bal-doc-tabs": LocalJSX.BalDocTabs & JSXBase.HTMLAttributes<HTMLBalDocTabsElement>;
            "bal-doc-tokens-border": LocalJSX.BalDocTokensBorder & JSXBase.HTMLAttributes<HTMLBalDocTokensBorderElement>;
            "bal-doc-tokens-breakpoints": LocalJSX.BalDocTokensBreakpoints & JSXBase.HTMLAttributes<HTMLBalDocTokensBreakpointsElement>;
            "bal-doc-tokens-colors": LocalJSX.BalDocTokensColors & JSXBase.HTMLAttributes<HTMLBalDocTokensColorsElement>;
            "bal-doc-tokens-font": LocalJSX.BalDocTokensFont & JSXBase.HTMLAttributes<HTMLBalDocTokensFontElement>;
            "bal-doc-tokens-font-sizes": LocalJSX.BalDocTokensFontSizes & JSXBase.HTMLAttributes<HTMLBalDocTokensFontSizesElement>;
            "bal-doc-tokens-font-weight": LocalJSX.BalDocTokensFontWeight & JSXBase.HTMLAttributes<HTMLBalDocTokensFontWeightElement>;
            "bal-doc-tokens-radius": LocalJSX.BalDocTokensRadius & JSXBase.HTMLAttributes<HTMLBalDocTokensRadiusElement>;
            "bal-doc-tokens-shadow": LocalJSX.BalDocTokensShadow & JSXBase.HTMLAttributes<HTMLBalDocTokensShadowElement>;
            "bal-doc-tokens-spacing": LocalJSX.BalDocTokensSpacing & JSXBase.HTMLAttributes<HTMLBalDocTokensSpacingElement>;
            "bal-doc-usage": LocalJSX.BalDocUsage & JSXBase.HTMLAttributes<HTMLBalDocUsageElement>;
            "bal-doc-usage-item": LocalJSX.BalDocUsageItem & JSXBase.HTMLAttributes<HTMLBalDocUsageItemElement>;
            "bal-field": LocalJSX.BalField & JSXBase.HTMLAttributes<HTMLBalFieldElement>;
            "bal-field-control": LocalJSX.BalFieldControl & JSXBase.HTMLAttributes<HTMLBalFieldControlElement>;
            "bal-field-hint": LocalJSX.BalFieldHint & JSXBase.HTMLAttributes<HTMLBalFieldHintElement>;
            "bal-field-label": LocalJSX.BalFieldLabel & JSXBase.HTMLAttributes<HTMLBalFieldLabelElement>;
            "bal-field-message": LocalJSX.BalFieldMessage & JSXBase.HTMLAttributes<HTMLBalFieldMessageElement>;
            "bal-file-upload": LocalJSX.BalFileUpload & JSXBase.HTMLAttributes<HTMLBalFileUploadElement>;
            "bal-footer": LocalJSX.BalFooter & JSXBase.HTMLAttributes<HTMLBalFooterElement>;
            "bal-form-col": LocalJSX.BalFormCol & JSXBase.HTMLAttributes<HTMLBalFormColElement>;
            "bal-form-grid": LocalJSX.BalFormGrid & JSXBase.HTMLAttributes<HTMLBalFormGridElement>;
            "bal-heading": LocalJSX.BalHeading & JSXBase.HTMLAttributes<HTMLBalHeadingElement>;
            "bal-hint": LocalJSX.BalHint & JSXBase.HTMLAttributes<HTMLBalHintElement>;
            "bal-hint-text": LocalJSX.BalHintText & JSXBase.HTMLAttributes<HTMLBalHintTextElement>;
            "bal-hint-title": LocalJSX.BalHintTitle & JSXBase.HTMLAttributes<HTMLBalHintTitleElement>;
            "bal-icon": LocalJSX.BalIcon & JSXBase.HTMLAttributes<HTMLBalIconElement>;
            "bal-image-slider": LocalJSX.BalImageSlider & JSXBase.HTMLAttributes<HTMLBalImageSliderElement>;
            "bal-input": LocalJSX.BalInput & JSXBase.HTMLAttributes<HTMLBalInputElement>;
            "bal-input-group": LocalJSX.BalInputGroup & JSXBase.HTMLAttributes<HTMLBalInputGroupElement>;
            "bal-input-stepper": LocalJSX.BalInputStepper & JSXBase.HTMLAttributes<HTMLBalInputStepperElement>;
            "bal-list": LocalJSX.BalList & JSXBase.HTMLAttributes<HTMLBalListElement>;
            "bal-list-item": LocalJSX.BalListItem & JSXBase.HTMLAttributes<HTMLBalListItemElement>;
            "bal-list-item-accordion-body": LocalJSX.BalListItemAccordionBody & JSXBase.HTMLAttributes<HTMLBalListItemAccordionBodyElement>;
            "bal-list-item-accordion-head": LocalJSX.BalListItemAccordionHead & JSXBase.HTMLAttributes<HTMLBalListItemAccordionHeadElement>;
            "bal-list-item-content": LocalJSX.BalListItemContent & JSXBase.HTMLAttributes<HTMLBalListItemContentElement>;
            "bal-list-item-icon": LocalJSX.BalListItemIcon & JSXBase.HTMLAttributes<HTMLBalListItemIconElement>;
            "bal-list-item-subtitle": LocalJSX.BalListItemSubtitle & JSXBase.HTMLAttributes<HTMLBalListItemSubtitleElement>;
            "bal-list-item-title": LocalJSX.BalListItemTitle & JSXBase.HTMLAttributes<HTMLBalListItemTitleElement>;
            "bal-logo": LocalJSX.BalLogo & JSXBase.HTMLAttributes<HTMLBalLogoElement>;
            "bal-main-navigation": LocalJSX.BalMainNavigation & JSXBase.HTMLAttributes<HTMLBalMainNavigationElement>;
            "bal-main-navigation-actions": LocalJSX.BalMainNavigationActions & JSXBase.HTMLAttributes<HTMLBalMainNavigationActionsElement>;
            "bal-main-navigation-links": LocalJSX.BalMainNavigationLinks & JSXBase.HTMLAttributes<HTMLBalMainNavigationLinksElement>;
            "bal-main-navigation-menu": LocalJSX.BalMainNavigationMenu & JSXBase.HTMLAttributes<HTMLBalMainNavigationMenuElement>;
            "bal-main-navigation-menu-buttons": LocalJSX.BalMainNavigationMenuButtons & JSXBase.HTMLAttributes<HTMLBalMainNavigationMenuButtonsElement>;
            "bal-main-navigation-menu-content": LocalJSX.BalMainNavigationMenuContent & JSXBase.HTMLAttributes<HTMLBalMainNavigationMenuContentElement>;
            "bal-main-navigation-menu-panel": LocalJSX.BalMainNavigationMenuPanel & JSXBase.HTMLAttributes<HTMLBalMainNavigationMenuPanelElement>;
            "bal-main-navigation-menu-panel-list": LocalJSX.BalMainNavigationMenuPanelList & JSXBase.HTMLAttributes<HTMLBalMainNavigationMenuPanelListElement>;
            "bal-main-navigation-menu-panel-list-item": LocalJSX.BalMainNavigationMenuPanelListItem & JSXBase.HTMLAttributes<HTMLBalMainNavigationMenuPanelListItemElement>;
            "bal-main-navigation-meta-bar": LocalJSX.BalMainNavigationMetaBar & JSXBase.HTMLAttributes<HTMLBalMainNavigationMetaBarElement>;
            "bal-main-navigation-second-bar": LocalJSX.BalMainNavigationSecondBar & JSXBase.HTMLAttributes<HTMLBalMainNavigationSecondBarElement>;
            "bal-modal": LocalJSX.BalModal & JSXBase.HTMLAttributes<HTMLBalModalElement>;
            "bal-modal-body": LocalJSX.BalModalBody & JSXBase.HTMLAttributes<HTMLBalModalBodyElement>;
            "bal-modal-header": LocalJSX.BalModalHeader & JSXBase.HTMLAttributes<HTMLBalModalHeaderElement>;
            "bal-navbar": LocalJSX.BalNavbar & JSXBase.HTMLAttributes<HTMLBalNavbarElement>;
            "bal-navbar-brand": LocalJSX.BalNavbarBrand & JSXBase.HTMLAttributes<HTMLBalNavbarBrandElement>;
            "bal-navbar-menu": LocalJSX.BalNavbarMenu & JSXBase.HTMLAttributes<HTMLBalNavbarMenuElement>;
            "bal-navbar-menu-end": LocalJSX.BalNavbarMenuEnd & JSXBase.HTMLAttributes<HTMLBalNavbarMenuEndElement>;
            "bal-navbar-menu-start": LocalJSX.BalNavbarMenuStart & JSXBase.HTMLAttributes<HTMLBalNavbarMenuStartElement>;
            "bal-notices": LocalJSX.BalNotices & JSXBase.HTMLAttributes<HTMLBalNoticesElement>;
            "bal-notification": LocalJSX.BalNotification & JSXBase.HTMLAttributes<HTMLBalNotificationElement>;
            "bal-number-input": LocalJSX.BalNumberInput & JSXBase.HTMLAttributes<HTMLBalNumberInputElement>;
            "bal-pagination": LocalJSX.BalPagination & JSXBase.HTMLAttributes<HTMLBalPaginationElement>;
            "bal-popover": LocalJSX.BalPopover & JSXBase.HTMLAttributes<HTMLBalPopoverElement>;
            "bal-popover-content": LocalJSX.BalPopoverContent & JSXBase.HTMLAttributes<HTMLBalPopoverContentElement>;
            "bal-product-slider": LocalJSX.BalProductSlider & JSXBase.HTMLAttributes<HTMLBalProductSliderElement>;
            "bal-radio": LocalJSX.BalRadio & JSXBase.HTMLAttributes<HTMLBalRadioElement>;
            "bal-radio-group": LocalJSX.BalRadioGroup & JSXBase.HTMLAttributes<HTMLBalRadioGroupElement>;
            "bal-select": LocalJSX.BalSelect & JSXBase.HTMLAttributes<HTMLBalSelectElement>;
            "bal-select-option": LocalJSX.BalSelectOption & JSXBase.HTMLAttributes<HTMLBalSelectOptionElement>;
            "bal-shape": LocalJSX.BalShape & JSXBase.HTMLAttributes<HTMLBalShapeElement>;
            "bal-sheet": LocalJSX.BalSheet & JSXBase.HTMLAttributes<HTMLBalSheetElement>;
            "bal-slider": LocalJSX.BalSlider & JSXBase.HTMLAttributes<HTMLBalSliderElement>;
            "bal-snackbar": LocalJSX.BalSnackbar & JSXBase.HTMLAttributes<HTMLBalSnackbarElement>;
            "bal-spinner": LocalJSX.BalSpinner & JSXBase.HTMLAttributes<HTMLBalSpinnerElement>;
            "bal-stage": LocalJSX.BalStage & JSXBase.HTMLAttributes<HTMLBalStageElement>;
            "bal-stage-back-link": LocalJSX.BalStageBackLink & JSXBase.HTMLAttributes<HTMLBalStageBackLinkElement>;
            "bal-stage-body": LocalJSX.BalStageBody & JSXBase.HTMLAttributes<HTMLBalStageBodyElement>;
            "bal-stage-foot": LocalJSX.BalStageFoot & JSXBase.HTMLAttributes<HTMLBalStageFootElement>;
            "bal-stage-head": LocalJSX.BalStageHead & JSXBase.HTMLAttributes<HTMLBalStageHeadElement>;
            "bal-tab-item": LocalJSX.BalTabItem & JSXBase.HTMLAttributes<HTMLBalTabItemElement>;
            "bal-table": LocalJSX.BalTable & JSXBase.HTMLAttributes<HTMLBalTableElement>;
            "bal-tabs": LocalJSX.BalTabs & JSXBase.HTMLAttributes<HTMLBalTabsElement>;
            "bal-tag": LocalJSX.BalTag & JSXBase.HTMLAttributes<HTMLBalTagElement>;
            "bal-tag-group": LocalJSX.BalTagGroup & JSXBase.HTMLAttributes<HTMLBalTagGroupElement>;
            "bal-text": LocalJSX.BalText & JSXBase.HTMLAttributes<HTMLBalTextElement>;
            "bal-textarea": LocalJSX.BalTextarea & JSXBase.HTMLAttributes<HTMLBalTextareaElement>;
            "bal-timeinput": LocalJSX.BalTimeinput & JSXBase.HTMLAttributes<HTMLBalTimeinputElement>;
            "bal-toast": LocalJSX.BalToast & JSXBase.HTMLAttributes<HTMLBalToastElement>;
        }
    }
}
