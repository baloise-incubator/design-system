{
  "timestamp": "2022-12-30T15:17:36",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.20.0",
    "typescriptVersion": "4.8.4"
  },
  "components": [
    {
      "filePath": "./src/components/bal-accordion/bal-accordion.tsx",
      "encapsulation": "none",
      "tag": "bal-accordion",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "card",
          "type": "boolean",
          "mutable": false,
          "attr": "card",
          "reflectToAttr": false,
          "docs": "If `true` the accordion is used on the bottom of a card",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeIcon",
          "type": "string",
          "mutable": false,
          "attr": "close-icon",
          "reflectToAttr": false,
          "docs": "BalIcon of the close trigger button",
          "docsTags": [],
          "default": "'close'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeLabel",
          "type": "string",
          "mutable": false,
          "attr": "close-label",
          "reflectToAttr": false,
          "docs": "Label of the close trigger button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "openIcon",
          "type": "string",
          "mutable": false,
          "attr": "open-icon",
          "reflectToAttr": false,
          "docs": "BalIcon of the open trigger button",
          "docsTags": [],
          "default": "'plus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "openLabel",
          "type": "string",
          "mutable": false,
          "attr": "open-label",
          "reflectToAttr": false,
          "docs": "Label of the open trigger button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "boolean",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "If `true` the accordion is open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "dismiss() => Promise<void>",
          "parameters": [],
          "docs": "Closes the accordion",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "Opens the accordion",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Triggers the accordion",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balChange",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the accordion has opened or closed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-accordion": [
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-app/bal-app.tsx",
      "encapsulation": "none",
      "tag": "bal-app",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "mode",
          "type": "\"all\" | \"css\" | \"sass\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "Mode defines how the styles are loaded. With `css` each component loads his own styles\nand with `sass` the component styles needs to be imported with the file `global.components.sass`.",
          "docsTags": [],
          "default": "'css'",
          "values": [
            {
              "value": "all",
              "type": "string"
            },
            {
              "value": "css",
              "type": "string"
            },
            {
              "value": "sass",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(elements: HTMLElement[]) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-app"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-badge/bal-badge.tsx",
      "encapsulation": "none",
      "tag": "bal-badge",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Define the alert color for the badge.",
          "docsTags": [],
          "default": "'danger'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string | undefined",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Name of the icon to show. If a icon is present text should be hidden.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "position",
          "type": "\"\" | \"button\" | \"card\" | \"tabs\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "If `true` the badge is added to the top right corner of the card.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "card",
              "type": "string"
            },
            {
              "value": "tabs",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"large\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define the size of badge. Small is recommended for tabs.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-tabs"
      ],
      "dependencies": [
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-badge": [
          "bal-icon"
        ],
        "bal-tabs": [
          "bal-badge"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-button/bal-button.tsx",
      "encapsulation": "none",
      "tag": "bal-button",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bottomRounded",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "bottom-rounded",
          "reflectToAttr": false,
          "docs": "If `true` the bottom corners get rounded",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"info\" | \"info-light\" | \"light\" | \"link\" | \"primary\" | \"primary-light\" | \"success\" | \"text\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The color to use from your application's color palette.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "info-light",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "primary-light",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot interact with the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "elementType",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "element-type",
          "reflectToAttr": false,
          "docs": "The type of button.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the button has a full width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flat",
          "type": "boolean",
          "mutable": false,
          "attr": "flat",
          "reflectToAttr": false,
          "docs": "If `true` the button has no padding and a reduced height",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Name of the left button icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "Name of the right button icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the button is inverted",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isActive",
          "type": "boolean",
          "mutable": false,
          "attr": "is-active",
          "reflectToAttr": false,
          "docs": "If `true` the button has a active theme",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true` the label is hidden and a loading spinner is shown instead.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string | undefined",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the button, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outlined",
          "type": "boolean",
          "mutable": false,
          "attr": "outlined",
          "reflectToAttr": false,
          "docs": "If `true` the button is outlined",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "If `true` the button is rounded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shadow",
          "type": "boolean",
          "mutable": false,
          "attr": "shadow",
          "reflectToAttr": false,
          "docs": "If `true` adds a box shadow to improve readability on image background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Size of the button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "square",
          "type": "boolean",
          "mutable": false,
          "attr": "square",
          "reflectToAttr": false,
          "docs": "If `true` the width of the buttons is limited",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "topRounded",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "top-rounded",
          "reflectToAttr": false,
          "docs": "If `true` the top corners get rounded",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | undefined",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the button, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button loses focus.",
          "docsTags": []
        },
        {
          "event": "balDidRender",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has been  rendered.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has focus.",
          "docsTags": []
        },
        {
          "event": "balNavigate",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link element has clicked.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-accordion",
        "bal-card-button",
        "bal-carousel",
        "bal-data-value",
        "bal-datepicker",
        "bal-hint",
        "bal-input-stepper",
        "bal-navbar-brand",
        "bal-navigation",
        "bal-navigation-popover",
        "bal-pagination",
        "bal-snackbar"
      ],
      "dependencies": [
        "bal-spinner",
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ],
        "bal-accordion": [
          "bal-button"
        ],
        "bal-card-button": [
          "bal-button"
        ],
        "bal-carousel": [
          "bal-button"
        ],
        "bal-data-value": [
          "bal-button"
        ],
        "bal-datepicker": [
          "bal-button"
        ],
        "bal-hint": [
          "bal-button"
        ],
        "bal-input-stepper": [
          "bal-button"
        ],
        "bal-navbar-brand": [
          "bal-button"
        ],
        "bal-navigation": [
          "bal-button"
        ],
        "bal-navigation-popover": [
          "bal-button"
        ],
        "bal-pagination": [
          "bal-button"
        ],
        "bal-snackbar": [
          "bal-button"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-button/bal-button-group/bal-button-group.tsx",
      "encapsulation": "none",
      "tag": "bal-button-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "direction",
          "type": "\"auto\" | \"column\" | \"row\"",
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "`auto` will position the button items vertical and full width.\n`row` will force that the buttons are also horizontal on mobile.",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "column",
              "type": "string"
            },
            {
              "value": "row",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"\" | \"center\" | \"right\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "The value of the button, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reverse",
          "type": "boolean",
          "mutable": false,
          "attr": "reverse",
          "reflectToAttr": false,
          "docs": "If `true` the flex direction is used in reverse on mobile.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-card-actions",
        "bal-hint"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-card-actions": [
          "bal-button-group"
        ],
        "bal-hint": [
          "bal-button-group"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card/bal-card.tsx",
      "encapsulation": "none",
      "tag": "bal-card",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "If `true` a light blue border is added to the card.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true` the card has a hover effect.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"\" | \"info\" | \"success\" | \"primary\" | \"danger\" | \"warning\" | \"white\" | \"green\" | \"yellow\" | \"red\" | \"purple\" | \"grey\" | \"blue\" | \"red-light\" | \"yellow-light\" | \"purple-light\" | \"green-light\" | \"grey-light\" | \"purple-1\" | \"purple-2\" | \"purple-3\" | \"green-1\" | \"green-2\" | \"green-3\" | \"red-1\" | \"red-2\" | \"red-3\" | \"yellow-1\" | \"yellow-2\" | \"yellow-3\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the card.",
          "docsTags": [],
          "default": "'white'",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "purple",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "red-light",
              "type": "string"
            },
            {
              "value": "yellow-light",
              "type": "string"
            },
            {
              "value": "purple-light",
              "type": "string"
            },
            {
              "value": "green-light",
              "type": "string"
            },
            {
              "value": "grey-light",
              "type": "string"
            },
            {
              "value": "purple-1",
              "type": "string"
            },
            {
              "value": "purple-2",
              "type": "string"
            },
            {
              "value": "purple-3",
              "type": "string"
            },
            {
              "value": "green-1",
              "type": "string"
            },
            {
              "value": "green-2",
              "type": "string"
            },
            {
              "value": "green-3",
              "type": "string"
            },
            {
              "value": "red-1",
              "type": "string"
            },
            {
              "value": "red-2",
              "type": "string"
            },
            {
              "value": "red-3",
              "type": "string"
            },
            {
              "value": "yellow-1",
              "type": "string"
            },
            {
              "value": "yellow-2",
              "type": "string"
            },
            {
              "value": "yellow-3",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flat",
          "type": "boolean",
          "mutable": false,
          "attr": "flat",
          "reflectToAttr": false,
          "docs": "If `true` the card loses its shadow.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullheight",
          "type": "boolean",
          "mutable": false,
          "attr": "fullheight",
          "reflectToAttr": false,
          "docs": "If `true` the card uses 100% of the available height.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the card background color becomes blue.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "If `true` the card gets a light background to indicate a selection.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "space",
          "type": "\"\" | \"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "space",
          "reflectToAttr": false,
          "docs": "Defines the space of the card content.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "square",
          "type": "boolean",
          "mutable": false,
          "attr": "square",
          "reflectToAttr": false,
          "docs": "If `true` the card loses its border radius.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-carousel",
        "bal-doc-download",
        "bal-file-upload",
        "bal-navigation-menu-list"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-carousel": [
          "bal-card"
        ],
        "bal-doc-download": [
          "bal-card"
        ],
        "bal-file-upload": [
          "bal-card"
        ],
        "bal-navigation-menu-list": [
          "bal-card"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card/bal-card-actions/bal-card-actions.tsx",
      "encapsulation": "none",
      "tag": "bal-card-actions",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "position",
          "type": "\"\" | \"center\" | \"right\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "The value of the button, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "right",
          "type": "boolean",
          "mutable": false,
          "attr": "right",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "use position=\"right\"\nIf `true` the buttons start form right to left."
            }
          ],
          "default": "false",
          "deprecation": "use position=\"right\"\nIf `true` the buttons start form right to left.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-button-group"
      ],
      "dependencyGraph": {
        "bal-card-actions": [
          "bal-button-group"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card/bal-card-button/bal-card-button.tsx",
      "encapsulation": "none",
      "tag": "bal-card-button",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot interact with the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "elementType",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "element-type",
          "reflectToAttr": false,
          "docs": "The type of button.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Name of the icon like `edit`.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "Name of the right button icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true` the label is hidden and a loading spinner is shown instead.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-card-button": [
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card/bal-card-content/bal-card-content.tsx",
      "encapsulation": "none",
      "tag": "bal-card-content",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-carousel",
        "bal-doc-download",
        "bal-navigation-menu-list"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-carousel": [
          "bal-card-content"
        ],
        "bal-doc-download": [
          "bal-card-content"
        ],
        "bal-navigation-menu-list": [
          "bal-card-content"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card/bal-card-subtitle/bal-card-subtitle.tsx",
      "encapsulation": "none",
      "tag": "bal-card-subtitle",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bold",
          "type": "boolean",
          "mutable": false,
          "attr": "bold",
          "reflectToAttr": false,
          "docs": "If `true` the card text color is bold.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"\" | \"blue\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "If `true` the card text color becomes white.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the card text color becomes white.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-text"
      ],
      "dependencyGraph": {
        "bal-card-subtitle": [
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card/bal-card-title/bal-card-title.tsx",
      "encapsulation": "none",
      "tag": "bal-card-title",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the card text color becomes white.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-heading"
      ],
      "dependencyGraph": {
        "bal-card-title": [
          "bal-heading"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-carousel/bal-carousel.tsx",
      "encapsulation": "none",
      "tag": "bal-carousel",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "aspectRatio",
          "type": "\"16by9\" | \"1by1\" | \"3by2\" | \"4by3\" | undefined",
          "mutable": false,
          "attr": "aspect-ratio",
          "reflectToAttr": false,
          "docs": "Defines the image aspect ratio.\nShould be combined with the interface `product`",
          "docsTags": [],
          "default": "'16by9'",
          "values": [
            {
              "value": "16by9",
              "type": "string"
            },
            {
              "value": "1by1",
              "type": "string"
            },
            {
              "value": "3by2",
              "type": "string"
            },
            {
              "value": "4by3",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "controls",
          "type": "\"dots\" | \"large\" | \"none\" | \"small\" | \"tabs\"",
          "mutable": false,
          "attr": "controls",
          "reflectToAttr": false,
          "docs": "Defines the layout of the navigation controls.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "dots",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "tabs",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "controlsSticky",
          "type": "boolean",
          "mutable": false,
          "attr": "controls-sticky",
          "reflectToAttr": false,
          "docs": "If `true` the controls will be sticky to the top.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"\" | \"card\" | \"image\" | \"product\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines special looks.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "card",
              "type": "string"
            },
            {
              "value": "image",
              "type": "string"
            },
            {
              "value": "product",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemsPerView",
          "type": "\"auto\" | number",
          "mutable": false,
          "attr": "items-per-view",
          "reflectToAttr": false,
          "docs": "Defines how many slides are visible in the container for the user.\n`auto` will use the size of the actual item content",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollY",
          "type": "boolean",
          "mutable": false,
          "attr": "scroll-y",
          "reflectToAttr": false,
          "docs": "If `true` vertical scrolling on mobile is enabled.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "steps",
          "type": "number",
          "mutable": false,
          "attr": "steps",
          "reflectToAttr": false,
          "docs": "When how many slides are moved when going forward or backward.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Defines the active slide index.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "next",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "next(steps?: number) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "previous",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "previous(steps?: number) => Promise<void>",
          "parameters": [],
          "docs": "PUBLIC METHODS\n------------------------------------------------------",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balChange",
          "detail": "number | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a option got selected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "touchmove",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-card",
        "bal-card-content",
        "bal-button",
        "bal-pagination"
      ],
      "dependencyGraph": {
        "bal-carousel": [
          "bal-card",
          "bal-card-content",
          "bal-button",
          "bal-pagination"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ],
        "bal-pagination": [
          "bal-text",
          "bal-button",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-carousel/bal-carousel-item/bal-carousel-item.tsx",
      "encapsulation": "none",
      "tag": "bal-carousel-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"green\" | \"purple\" | \"red\" | \"white\" | \"yellow\" | undefined",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color of the background",
          "docsTags": [],
          "values": [
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "purple",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "elementType",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "element-type",
          "reflectToAttr": false,
          "docs": "The type of button.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Label of the slide which will be used for pagination tabs",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string | undefined",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name of the button, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "src",
          "type": "string | undefined",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": true,
          "docs": "Src path to the image",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | undefined",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The value of the button, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getData",
          "returns": {
            "type": "Promise<BalCarouselItemData>",
            "docs": ""
          },
          "signature": "getData() => Promise<BalCarouselItemData>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button loses focus.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has focus.",
          "docsTags": []
        },
        {
          "event": "balNavigate",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link element has clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-checkbox/bal-checkbox.tsx",
      "encapsulation": "none",
      "tag": "bal-checkbox",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "If `true`, the checkbox is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flat",
          "type": "boolean",
          "mutable": false,
          "attr": "flat",
          "reflectToAttr": false,
          "docs": "If `true` the control is no padding",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": false,
          "docs": "If `true`, the value will not be send with a form submit",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"checkbox\" | \"select-button\" | \"switch\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the checkbox button",
          "docsTags": [],
          "default": "'checkbox'",
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "select-button",
              "type": "string"
            },
            {
              "value": "switch",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelHidden",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hidden",
          "reflectToAttr": false,
          "docs": "If `true` the checkbox has no label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "A DOMString representing the value of the checkbox. This is not displayed on the\nclient-side, but on the server this is the value given to the data\nsubmitted with the checkbox's name.",
          "docsTags": [],
          "default": "'on'",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement | undefined>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement | undefined>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets the focus on the checkbox input element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle loses focus.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value property has changed.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle has focus.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-select": [
          "bal-checkbox"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-checkbox/bal-checkbox-group/bal-checkbox-group.tsx",
      "encapsulation": "none",
      "tag": "bal-checkbox-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "control",
          "type": "boolean",
          "mutable": false,
          "attr": "control",
          "reflectToAttr": false,
          "docs": "If `true` it acts as the main form control",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the checkboxes.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Uses the whole width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"checkbox\" | \"select-button\" | \"switch\" | undefined",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the checkbox button",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "select-button",
              "type": "string"
            },
            {
              "value": "switch",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the checkboxes.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "any[]",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The value of the control.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "vertical",
          "type": "boolean",
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": false,
          "docs": "Displays the checkboxes vertically",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "verticalOnMobile",
          "type": "boolean",
          "mutable": false,
          "attr": "vertical-on-mobile",
          "reflectToAttr": false,
          "docs": "If `true`, the controls will be vertically on mobile devices.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balChange",
          "detail": "any[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checked property has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "balChange",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-close/bal-close.tsx",
      "encapsulation": "none",
      "tag": "bal-close",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` it supports dark backgrounds.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define the size of badge. Small is recommended for tabs.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-modal-header",
        "bal-navigation-popover",
        "bal-snackbar",
        "bal-tag",
        "bal-toast"
      ],
      "dependencies": [
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-close": [
          "bal-icon"
        ],
        "bal-modal-header": [
          "bal-close"
        ],
        "bal-navigation-popover": [
          "bal-close"
        ],
        "bal-snackbar": [
          "bal-close"
        ],
        "bal-tag": [
          "bal-close"
        ],
        "bal-toast": [
          "bal-close"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-data/bal-data.tsx",
      "encapsulation": "none",
      "tag": "bal-data",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "If `true` a bottom border is added to the data-item.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "horizontal",
          "type": "boolean",
          "mutable": false,
          "attr": "horizontal",
          "reflectToAttr": false,
          "docs": "If `true` the data list is horizontal instead of vertical.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-data/bal-data-item/bal-data-item.tsx",
      "encapsulation": "none",
      "tag": "bal-data-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "If `true` a bottom border is added to the data-item.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the item gets a lighter font color.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-data/bal-data-label/bal-data-label.tsx",
      "encapsulation": "none",
      "tag": "bal-data-label",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true` an asterix is added after the label.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-data/bal-data-value/bal-data-value.tsx",
      "encapsulation": "none",
      "tag": "bal-data-value",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the button will get disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editable",
          "type": "boolean",
          "mutable": false,
          "attr": "editable",
          "reflectToAttr": false,
          "docs": "If `true` a small button with a edit icon will be shown on the right.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiline",
          "type": "boolean",
          "mutable": false,
          "attr": "multiline",
          "reflectToAttr": false,
          "docs": "If `true` the text will break and the height of the item increases.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the edit button loses focus.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the edit button has focus.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the edit button has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-data-value": [
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-datepicker/bal-datepicker.tsx",
      "encapsulation": "none",
      "tag": "bal-datepicker",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowedDates",
          "type": "((dateString: string) => boolean) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Callback to determine which date in the datepicker should be selectable.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "((dateString: string) => boolean)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeOnSelect",
          "type": "boolean",
          "mutable": false,
          "attr": "close-on-select",
          "reflectToAttr": false,
          "docs": "Closes the datepicker popover after selection",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultDate",
          "type": "string | undefined",
          "mutable": false,
          "attr": "default-date",
          "reflectToAttr": false,
          "docs": "The date to defines where the datepicker popup starts. The prop accepts ISO 8601 date strings (YYYY-MM-DD).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "Set this to `true` when the component is placed on a dark background.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "\"\" | \"de\" | \"en\" | \"fr\" | \"it\"",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Define the locale of month and day names."
            }
          ],
          "default": "''",
          "deprecation": "Define the locale of month and day names.",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "de",
              "type": "string"
            },
            {
              "value": "en",
              "type": "string"
            },
            {
              "value": "fr",
              "type": "string"
            },
            {
              "value": "it",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string | undefined",
          "mutable": true,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum datetime allowed. Value must be a date string\nfollowing the\n[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\n`1996-12-19`. The format does not have to be specific to an exact\ndatetime. For example, the maximum could just be the year, such as `1994`.\nDefaults to the end of this year.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxYearProp",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-year",
          "reflectToAttr": false,
          "docs": "Latest year available for selection",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string | undefined",
          "mutable": true,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum datetime allowed. Value must be a date string\nfollowing the\n[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\nsuch as `1996-12-19`. The format does not have to be specific to an exact\ndatetime. For example, the minimum could just be the year, such as `1994`.\nDefaults to the beginning of the year, 100 years ago from today.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minYearProp",
          "type": "number | undefined",
          "mutable": false,
          "attr": "min-year",
          "reflectToAttr": false,
          "docs": "Earliest year available for selection",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The text to display when the select is empty.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true` the attribute required is added to the native input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "triggerIcon",
          "type": "boolean",
          "mutable": false,
          "attr": "trigger-icon",
          "reflectToAttr": false,
          "docs": "If `true` the datepicker only open on click of the icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the form field, which accepts ISO 8601 date strings (YYYY-MM-DD).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the popover",
          "docsTags": []
        },
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the popover",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select(dateString: string) => Promise<void>",
          "parameters": [],
          "docs": "Selects an option",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "string | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a option got selected.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "string | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-popover",
        "bal-popover-content",
        "bal-input-group",
        "bal-icon",
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-datepicker": [
          "bal-popover",
          "bal-popover-content",
          "bal-input-group",
          "bal-icon",
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-app/bal-doc-app.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-app",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "logComponents",
          "type": "string",
          "mutable": false,
          "attr": "log-components",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "logCustom",
          "type": "boolean",
          "mutable": false,
          "attr": "log-custom",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "logEvents",
          "type": "boolean",
          "mutable": false,
          "attr": "log-events",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "logLifecycle",
          "type": "boolean",
          "mutable": false,
          "attr": "log-lifecycle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "logRender",
          "type": "boolean",
          "mutable": false,
          "attr": "log-render",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-banner",
        "bal-doc-lead",
        "bal-doc-tokens-border",
        "bal-doc-tokens-breakpoints",
        "bal-doc-tokens-colors",
        "bal-doc-tokens-font",
        "bal-doc-tokens-font-sizes",
        "bal-doc-tokens-font-weight",
        "bal-doc-tokens-radius",
        "bal-doc-tokens-shadow",
        "bal-doc-tokens-spacing",
        "bal-doc-usage"
      ],
      "dependencies": [
        "bal-app"
      ],
      "dependencyGraph": {
        "bal-doc-app": [
          "bal-app"
        ],
        "bal-doc-banner": [
          "bal-doc-app"
        ],
        "bal-doc-lead": [
          "bal-doc-app"
        ],
        "bal-doc-tokens-border": [
          "bal-doc-app"
        ],
        "bal-doc-tokens-breakpoints": [
          "bal-doc-app"
        ],
        "bal-doc-tokens-colors": [
          "bal-doc-app"
        ],
        "bal-doc-tokens-font": [
          "bal-doc-app"
        ],
        "bal-doc-tokens-font-sizes": [
          "bal-doc-app"
        ],
        "bal-doc-tokens-font-weight": [
          "bal-doc-app"
        ],
        "bal-doc-tokens-radius": [
          "bal-doc-app"
        ],
        "bal-doc-tokens-shadow": [
          "bal-doc-app"
        ],
        "bal-doc-tokens-spacing": [
          "bal-doc-app"
        ],
        "bal-doc-usage": [
          "bal-doc-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-banner/bal-doc-banner.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-banner",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "subtitle",
          "type": "string",
          "mutable": false,
          "attr": "subtitle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Component'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app",
        "bal-heading"
      ],
      "dependencyGraph": {
        "bal-doc-banner": [
          "bal-doc-app",
          "bal-heading"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-color/bal-doc-color.tsx",
      "encapsulation": "scoped",
      "tag": "bal-doc-color",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "background",
          "type": "boolean",
          "mutable": false,
          "attr": "background",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subject",
          "type": "string",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-shades",
        "bal-doc-support-color"
      ],
      "dependencies": [
        "bal-text"
      ],
      "dependencyGraph": {
        "bal-doc-color": [
          "bal-text"
        ],
        "bal-doc-shades": [
          "bal-doc-color"
        ],
        "bal-doc-support-color": [
          "bal-doc-color"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-download/bal-doc-download.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-download",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "iconLeft",
          "type": "string",
          "mutable": false,
          "attr": "icon-left",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'document'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'download'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "link",
          "type": "string",
          "mutable": false,
          "attr": "link",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subject",
          "type": "string",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subtitle",
          "type": "string",
          "mutable": false,
          "attr": "subtitle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-card",
        "bal-card-content",
        "bal-list",
        "bal-list-item",
        "bal-list-item-icon",
        "bal-icon",
        "bal-list-item-content",
        "bal-list-item-title",
        "bal-list-item-subtitle"
      ],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-card",
          "bal-card-content",
          "bal-list",
          "bal-list-item",
          "bal-list-item-icon",
          "bal-icon",
          "bal-list-item-content",
          "bal-list-item-title",
          "bal-list-item-subtitle"
        ],
        "bal-list-item-title": [
          "bal-heading"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-github/bal-doc-github.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-github",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "link",
          "type": "string",
          "mutable": false,
          "attr": "link",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/docs/bal-doc-icons/bal-doc-icons.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-icons",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "icons",
          "type": "string",
          "mutable": false,
          "attr": "icons",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-doc-icons": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-image/bal-doc-image.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-image",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/docs/bal-doc-lead/bal-doc-lead.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-lead",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-lead": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-link-list/bal-doc-link-list.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-link-list",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "oneColumn",
          "type": "boolean",
          "mutable": false,
          "attr": "one-column",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/docs/bal-doc-link-list-item/bal-doc-link-list-item.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-link-list-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "image",
          "type": "string",
          "mutable": false,
          "attr": "image",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subject",
          "type": "string",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "template",
          "type": "\"\" | \"angular\" | \"html5\" | \"react\" | \"vue\"",
          "mutable": false,
          "attr": "template",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "angular",
              "type": "string"
            },
            {
              "value": "html5",
              "type": "string"
            },
            {
              "value": "react",
              "type": "string"
            },
            {
              "value": "vue",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/docs/bal-doc-shades/bal-doc-shades.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-shades",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-color"
      ],
      "dependencyGraph": {
        "bal-doc-shades": [
          "bal-doc-color"
        ],
        "bal-doc-color": [
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-support-color/bal-doc-support-color.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-support-color",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-color"
      ],
      "dependencyGraph": {
        "bal-doc-support-color": [
          "bal-doc-color"
        ],
        "bal-doc-color": [
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-tabs/bal-doc-tabs.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tabs",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "hashchange",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/docs/bal-doc-tokens/bal-doc-tokens-border.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tokens-border",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-tokens-border": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-tokens/bal-doc-tokens-breakpoints.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tokens-breakpoints",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-tokens-breakpoints": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-tokens/bal-doc-tokens-colors.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tokens-colors",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-tokens-colors": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-tokens/bal-doc-tokens-font.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tokens-font",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-tokens-font": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-tokens/bal-doc-tokens-font-sizes.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tokens-font-sizes",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-tokens-font-sizes": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-tokens/bal-doc-tokens-font-weight.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tokens-font-weight",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-tokens-font-weight": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-tokens/bal-doc-tokens-border-radius.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tokens-radius",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-tokens-radius": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-tokens/bal-doc-tokens-shadow.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tokens-shadow",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-tokens-shadow": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-tokens/bal-doc-tokens-spacing.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-tokens-spacing",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-tokens-spacing": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-usage/bal-doc-usage.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-usage",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-doc-app"
      ],
      "dependencyGraph": {
        "bal-doc-usage": [
          "bal-doc-app"
        ],
        "bal-doc-app": [
          "bal-app"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-usage-item/bal-doc-usage-item.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-usage-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "image",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "image",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "subject",
          "type": "string | undefined",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "theme",
          "type": "\"do\" | \"dont\"",
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'do'",
          "values": [
            {
              "value": "do",
              "type": "string"
            },
            {
              "value": "dont",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-doc-usage-item": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-field/bal-field.tsx",
      "encapsulation": "none",
      "tag": "bal-field",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid red style.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true` a loading spinner is visible at the end of the input",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true` the form control needs to be filled. If it is set to\n`false` an optional label is added to the label..",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": false,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a valid green style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-field/bal-field-control/bal-field-control.tsx",
      "encapsulation": "scoped",
      "tag": "bal-field-control",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expandedOnMobile",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "expanded-on-mobile",
          "reflectToAttr": false,
          "docs": "If `true` on mobile devices the form control children are aligned verticaly and expanded to the full width",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconLeft",
          "type": "string",
          "mutable": false,
          "attr": "icon-left",
          "reflectToAttr": false,
          "docs": "Baloise icon for the left side of the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "Baloise icon for the right side of the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true` a loading spinner is visible at the end of the input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-field-control": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-field/bal-field-hint/bal-field-hint.tsx",
      "encapsulation": "scoped",
      "tag": "bal-field-hint",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeLabel",
          "type": "string",
          "mutable": false,
          "attr": "close-label",
          "reflectToAttr": false,
          "docs": "Text for the close button.",
          "docsTags": [],
          "default": "'Close'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "small",
          "type": "boolean",
          "mutable": false,
          "attr": "small",
          "reflectToAttr": false,
          "docs": "Disables the close button for tablet and desktop",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subject",
          "type": "string | undefined",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "Text of the inputs label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-hint",
        "bal-hint-title",
        "bal-hint-text"
      ],
      "dependencyGraph": {
        "bal-field-hint": [
          "bal-hint",
          "bal-hint-title",
          "bal-hint-text"
        ],
        "bal-hint": [
          "bal-icon",
          "bal-button-group",
          "bal-button",
          "bal-popover",
          "bal-popover-content"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-field/bal-field-label/bal-field-label.tsx",
      "encapsulation": "scoped",
      "tag": "bal-field-label",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid red style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true` the form control needs to be filled. If it is set to\n`false` an optional label is added to the label..",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": false,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a valid green style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "weight",
          "type": "\"bold\" | \"regular\"",
          "mutable": false,
          "attr": "weight",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "'bold'",
          "values": [
            {
              "value": "bold",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-field/bal-field-message/bal-field-message.tsx",
      "encapsulation": "none",
      "tag": "bal-field-message",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the message.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid red style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": false,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a valid green style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-file-upload/bal-file-upload.tsx",
      "encapsulation": "none",
      "tag": "bal-file-upload",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string",
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "Accepted MIME-Types like `image/png,image/jpeg`.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasFileList",
          "type": "boolean",
          "mutable": false,
          "attr": "has-file-list",
          "reflectToAttr": false,
          "docs": "If `true` below the drop-down area it generates a file list.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the drop area.",
          "docsTags": [],
          "default": "'Choose or drop a file...'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true` the file upload is disabled and shows a spinner",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxBundleSize",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-bundle-size",
          "reflectToAttr": false,
          "docs": "Allowed max bundle size in bytes.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxFileSize",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-file-size",
          "reflectToAttr": false,
          "docs": "Allowed max file size in bytes.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxFiles",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-files",
          "reflectToAttr": false,
          "docs": "Allowed number of files in the bundle.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true` multiple file upload is possible.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.uploadId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subTitle",
          "type": "((file: File) => string) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Overrides the default subtitle file size",
          "docsTags": [],
          "values": [
            {
              "type": "((file: File) => string)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "File[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Input value.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "File[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clear",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "clear() => Promise<void>",
          "parameters": [],
          "docs": "Sets the file list to an empty list",
          "docsTags": []
        },
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "File[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a file is added or removed.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFilesAdded",
          "detail": "File[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a file is added.",
          "docsTags": []
        },
        {
          "event": "balFilesRemoved",
          "detail": "File[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a file is removed.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balRejectedFile",
          "detail": "FileUploadRejectedFile",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a file is rejected due to not allowed MIME-Type and so on.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "dragenter",
          "capture": false,
          "passive": false
        },
        {
          "event": "dragover",
          "capture": false,
          "passive": false
        },
        {
          "event": "dragleave",
          "capture": false,
          "passive": false
        },
        {
          "event": "drop",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-card",
        "bal-list",
        "bal-list-item",
        "bal-list-item-icon",
        "bal-icon",
        "bal-list-item-content",
        "bal-list-item-title",
        "bal-list-item-subtitle",
        "bal-spinner"
      ],
      "dependencyGraph": {
        "bal-file-upload": [
          "bal-card",
          "bal-list",
          "bal-list-item",
          "bal-list-item-icon",
          "bal-icon",
          "bal-list-item-content",
          "bal-list-item-title",
          "bal-list-item-subtitle",
          "bal-spinner"
        ],
        "bal-list-item-title": [
          "bal-heading"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-footer/bal-footer.tsx",
      "encapsulation": "none",
      "tag": "bal-footer",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "hideLanguageSelection",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-language-selection",
          "reflectToAttr": false,
          "docs": "If `true` the language selection will be hidden.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideLinks",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-links",
          "reflectToAttr": false,
          "docs": "If `true` the legal Baloise links will be hidden.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "\"\" | \"de\" | \"en\" | \"fr\" | \"it\"",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "The languages in which the links will appear."
            }
          ],
          "default": "''",
          "deprecation": "The languages in which the links will appear.",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "de",
              "type": "string"
            },
            {
              "value": "en",
              "type": "string"
            },
            {
              "value": "fr",
              "type": "string"
            },
            {
              "value": "it",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-form/bal-form.tsx",
      "encapsulation": "none",
      "tag": "bal-form",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "native",
          "type": "boolean",
          "mutable": false,
          "attr": "native",
          "reflectToAttr": false,
          "docs": "If `true` a native form element is added as a wrapper of the slot.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "novalidate",
          "type": "boolean",
          "mutable": false,
          "attr": "novalidate",
          "reflectToAttr": false,
          "docs": "If `true` it adds the novalidate attribute to the native form element.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "scrollToFirstInvalidField",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "scrollToFirstInvalidField() => Promise<void>",
          "parameters": [],
          "docs": "Scrolls to the first invalid field inside this form component.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-form-grid/bal-form-col/bal-form-col.tsx",
      "encapsulation": "none",
      "tag": "bal-form-col",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"fullwidth\" | \"half\" | \"one-quarter\" | \"one-third\" | \"three-quarters\" | \"two-thirds\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'fullwidth'",
          "values": [
            {
              "value": "fullwidth",
              "type": "string"
            },
            {
              "value": "half",
              "type": "string"
            },
            {
              "value": "one-quarter",
              "type": "string"
            },
            {
              "value": "one-third",
              "type": "string"
            },
            {
              "value": "three-quarters",
              "type": "string"
            },
            {
              "value": "two-thirds",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-form-grid/bal-form-grid.tsx",
      "encapsulation": "none",
      "tag": "bal-form-grid",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-heading/bal-heading.tsx",
      "encapsulation": "none",
      "tag": "bal-heading",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"\" | \"blue\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the toast.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the color gets inverted for dark backgrounds",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "level",
          "type": "\"display\" | \"display-2\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\"",
          "mutable": false,
          "attr": "level",
          "reflectToAttr": false,
          "docs": "The actual heading level used in the HTML markup.",
          "docsTags": [],
          "default": "'h1'",
          "values": [
            {
              "value": "display",
              "type": "string"
            },
            {
              "value": "display-2",
              "type": "string"
            },
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shadow",
          "type": "boolean",
          "mutable": false,
          "attr": "shadow",
          "reflectToAttr": false,
          "docs": "If `true` adds a text shadow to improve readability on image background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "space",
          "type": "\"all\" | \"bottom\" | \"none\" | \"top\"",
          "mutable": false,
          "attr": "space",
          "reflectToAttr": false,
          "docs": "Defines at which position the heading has spacing.",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "all",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subtitle",
          "type": "boolean",
          "mutable": false,
          "attr": "subtitle",
          "reflectToAttr": false,
          "docs": "If `true` the heading gets displayed slimmer.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visualLevel",
          "type": "\"display\" | \"display-2\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | undefined",
          "mutable": false,
          "attr": "visual-level",
          "reflectToAttr": false,
          "docs": "Make the visual style mimic a specific heading level.\nThis option allows you to make e.g. h1 visually look like h3,\nbut still keep it h1 in the markup.",
          "docsTags": [],
          "values": [
            {
              "value": "display",
              "type": "string"
            },
            {
              "value": "display-2",
              "type": "string"
            },
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-card-title",
        "bal-doc-banner",
        "bal-list-item-title",
        "bal-modal-header",
        "bal-navigation-menu-list",
        "bal-navigation-popover",
        "bal-snackbar"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-card-title": [
          "bal-heading"
        ],
        "bal-doc-banner": [
          "bal-heading"
        ],
        "bal-list-item-title": [
          "bal-heading"
        ],
        "bal-modal-header": [
          "bal-heading"
        ],
        "bal-navigation-menu-list": [
          "bal-heading"
        ],
        "bal-navigation-popover": [
          "bal-heading"
        ],
        "bal-snackbar": [
          "bal-heading"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-hint/bal-hint.tsx",
      "encapsulation": "none",
      "tag": "bal-hint",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeLabel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "close-label",
          "reflectToAttr": false,
          "docs": "Text for the close button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "small",
          "type": "boolean",
          "mutable": false,
          "attr": "small",
          "reflectToAttr": false,
          "docs": "Disables the close button for tablet and desktop",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "dismiss() => Promise<void>",
          "parameters": [],
          "docs": "Closes the hint box.",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "Opens the hint box.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Toggles the hint box.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-field-hint"
      ],
      "dependencies": [
        "bal-icon",
        "bal-button-group",
        "bal-button",
        "bal-popover",
        "bal-popover-content"
      ],
      "dependencyGraph": {
        "bal-hint": [
          "bal-icon",
          "bal-button-group",
          "bal-button",
          "bal-popover",
          "bal-popover-content"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ],
        "bal-field-hint": [
          "bal-hint"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-hint/bal-hint-text/bal-hint-text.tsx",
      "encapsulation": "none",
      "tag": "bal-hint-text",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-field-hint"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-field-hint": [
          "bal-hint-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-hint/bal-hint-title/bal-hint-title.tsx",
      "encapsulation": "none",
      "tag": "bal-hint-title",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-field-hint"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-field-hint": [
          "bal-hint-title"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-icon/bal-icon.tsx",
      "encapsulation": "none",
      "tag": "bal-icon",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the button.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": false,
          "docs": "If `true` the icon has display inline style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the icon is inverted",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Name of the baloise icon.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shadow",
          "type": "boolean",
          "mutable": false,
          "attr": "shadow",
          "reflectToAttr": false,
          "docs": "If `true` adds a box shadow to improve readability on image background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"large\" | \"medium\" | \"small\" | \"xsmall\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Defines the size of the icon.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xsmall",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "svg",
          "type": "string",
          "mutable": false,
          "attr": "svg",
          "reflectToAttr": false,
          "docs": "Svg content.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "turn",
          "type": "boolean",
          "mutable": false,
          "attr": "turn",
          "reflectToAttr": false,
          "docs": "If `true` the icon is rotated 180deg",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-badge",
        "bal-button",
        "bal-close",
        "bal-datepicker",
        "bal-doc-download",
        "bal-doc-icons",
        "bal-doc-usage-item",
        "bal-field-control",
        "bal-file-upload",
        "bal-hint",
        "bal-list-item-accordion-head",
        "bal-pagination",
        "bal-select",
        "bal-snackbar",
        "bal-stage-back-link",
        "bal-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-badge": [
          "bal-icon"
        ],
        "bal-button": [
          "bal-icon"
        ],
        "bal-close": [
          "bal-icon"
        ],
        "bal-datepicker": [
          "bal-icon"
        ],
        "bal-doc-download": [
          "bal-icon"
        ],
        "bal-doc-icons": [
          "bal-icon"
        ],
        "bal-doc-usage-item": [
          "bal-icon"
        ],
        "bal-field-control": [
          "bal-icon"
        ],
        "bal-file-upload": [
          "bal-icon"
        ],
        "bal-hint": [
          "bal-icon"
        ],
        "bal-list-item-accordion-head": [
          "bal-icon"
        ],
        "bal-pagination": [
          "bal-icon"
        ],
        "bal-select": [
          "bal-icon"
        ],
        "bal-snackbar": [
          "bal-icon"
        ],
        "bal-stage-back-link": [
          "bal-icon"
        ],
        "bal-tabs": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-input/bal-input.tsx",
      "encapsulation": "none",
      "tag": "bal-input",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string | undefined",
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `\"file\"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "allowedKeyPress",
          "type": "string | undefined",
          "mutable": false,
          "attr": "allowed-key-press",
          "reflectToAttr": false,
          "docs": "A regular expression that the key of the key press event is checked against and if not matching the expression the event will be prevented.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "\"name\" | \"off\" | \"tel\" | \"url\" | \"email\" | \"on\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            },
            {
              "value": "honorific-prefix",
              "type": "string"
            },
            {
              "value": "given-name",
              "type": "string"
            },
            {
              "value": "additional-name",
              "type": "string"
            },
            {
              "value": "family-name",
              "type": "string"
            },
            {
              "value": "honorific-suffix",
              "type": "string"
            },
            {
              "value": "nickname",
              "type": "string"
            },
            {
              "value": "username",
              "type": "string"
            },
            {
              "value": "new-password",
              "type": "string"
            },
            {
              "value": "current-password",
              "type": "string"
            },
            {
              "value": "one-time-code",
              "type": "string"
            },
            {
              "value": "organization-title",
              "type": "string"
            },
            {
              "value": "organization",
              "type": "string"
            },
            {
              "value": "street-address",
              "type": "string"
            },
            {
              "value": "address-line1",
              "type": "string"
            },
            {
              "value": "address-line2",
              "type": "string"
            },
            {
              "value": "address-line3",
              "type": "string"
            },
            {
              "value": "address-level4",
              "type": "string"
            },
            {
              "value": "address-level3",
              "type": "string"
            },
            {
              "value": "address-level2",
              "type": "string"
            },
            {
              "value": "address-level1",
              "type": "string"
            },
            {
              "value": "country",
              "type": "string"
            },
            {
              "value": "country-name",
              "type": "string"
            },
            {
              "value": "postal-code",
              "type": "string"
            },
            {
              "value": "cc-name",
              "type": "string"
            },
            {
              "value": "cc-given-name",
              "type": "string"
            },
            {
              "value": "cc-additional-name",
              "type": "string"
            },
            {
              "value": "cc-family-name",
              "type": "string"
            },
            {
              "value": "cc-number",
              "type": "string"
            },
            {
              "value": "cc-exp",
              "type": "string"
            },
            {
              "value": "cc-exp-month",
              "type": "string"
            },
            {
              "value": "cc-exp-year",
              "type": "string"
            },
            {
              "value": "cc-csc",
              "type": "string"
            },
            {
              "value": "cc-type",
              "type": "string"
            },
            {
              "value": "transaction-currency",
              "type": "string"
            },
            {
              "value": "transaction-amount",
              "type": "string"
            },
            {
              "value": "language",
              "type": "string"
            },
            {
              "value": "bday",
              "type": "string"
            },
            {
              "value": "bday-day",
              "type": "string"
            },
            {
              "value": "bday-month",
              "type": "string"
            },
            {
              "value": "bday-year",
              "type": "string"
            },
            {
              "value": "sex",
              "type": "string"
            },
            {
              "value": "tel-country-code",
              "type": "string"
            },
            {
              "value": "tel-national",
              "type": "string"
            },
            {
              "value": "tel-area-code",
              "type": "string"
            },
            {
              "value": "tel-local",
              "type": "string"
            },
            {
              "value": "tel-extension",
              "type": "string"
            },
            {
              "value": "impp",
              "type": "string"
            },
            {
              "value": "photo",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "Whether auto correction should be enabled when the user is entering/editing the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true` the input gets a clickable cursor style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` this component can be placed on dark background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mask",
          "type": "\"claim-number\" | \"contract-number\" | \"offer-number\" | undefined",
          "mutable": false,
          "attr": "mask",
          "reflectToAttr": false,
          "docs": "Mask of the input field. It defines what the user can enter and how the format looks like. Currently, only for Switzerland formatted.\nFormatting for 'contract-number': '99/1.234.567-1'\nFormatting for 'claim-number': ('73/001217/16.9')\nFormatting for 'offer-number': ('98/7.654.321')",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "value": "claim-number",
              "type": "string"
            },
            {
              "value": "contract-number",
              "type": "string"
            },
            {
              "value": "offer-number",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "string | undefined",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum value, which must not be less than its minimum (min attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": false,
          "docs": "Defines the max length of the value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string | undefined",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum value, which must not be greater than its maximum (max attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number | undefined",
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": false,
          "docs": "Defines the min length of the value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `\"email\"` or `\"file\"`, otherwise it is ignored.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string | undefined",
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"date\"`, or `\"password\"`, otherwise it is ignored. When the type attribute is `\"date\"`, `pattern` will only be used in browsers that do not support the `\"date\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Instructional text that shows before the input has a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "If `true`, the element will have its spelling and grammar checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "suffix",
          "type": "string | undefined",
          "mutable": false,
          "attr": "suffix",
          "reflectToAttr": false,
          "docs": "Adds a suffix the the input-value after blur.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "textAlign",
          "type": "\"center\" | \"left\" | \"right\"",
          "mutable": false,
          "attr": "text-align",
          "reflectToAttr": false,
          "docs": "Defines the text align of the input value.",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"checkbox\" | \"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"image\" | \"month\" | \"number\" | \"password\" | \"radio\" | \"range\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Defines the type of the input (text, number, email ...).",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "color",
              "type": "string"
            },
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "image",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            },
            {
              "value": "range",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `bal-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "string | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "string | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balKeyPress",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard key has pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-input-group/bal-input-group.tsx",
      "encapsulation": "none",
      "tag": "bal-input-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-datepicker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-datepicker": [
          "bal-input-group"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-input-slider/bal-input-slider.tsx",
      "encapsulation": "none",
      "tag": "bal-input-slider",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "balTabindex",
          "type": "number",
          "mutable": false,
          "attr": "bal-tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex of the control.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasTicks",
          "type": "boolean",
          "mutable": false,
          "attr": "has-ticks",
          "reflectToAttr": false,
          "docs": "If `true`, small ticks for the steps are shown.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Max value of the model.",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Min value of the model.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "The step size. 0 means no steps.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement | undefined>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement | undefined>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `bal-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "null | number | string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "null | number | string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balKeyPress",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard key has pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-input-stepper/bal-input-stepper.tsx",
      "encapsulation": "none",
      "tag": "bal-input-stepper",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the input is shown as invalid",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The max value the input can have",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The min value the input can have",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "steps",
          "type": "number",
          "mutable": false,
          "attr": "steps",
          "reflectToAttr": false,
          "docs": "The steps in which the input increases or decreases",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input. Only allows values in the range of the min max attribute.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement | undefined>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement | undefined>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balChange",
          "detail": "number | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed.",
          "docsTags": []
        },
        {
          "event": "balDecrease",
          "detail": "number | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has decreased.",
          "docsTags": []
        },
        {
          "event": "balIncrease",
          "detail": "number | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has increased.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "number | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-button",
        "bal-text"
      ],
      "dependencyGraph": {
        "bal-input-stepper": [
          "bal-button",
          "bal-text"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list/bal-list.tsx",
      "encapsulation": "none",
      "tag": "bal-list",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "background",
          "type": "\"color\" | \"dark\" | \"light\"",
          "mutable": false,
          "attr": "background",
          "reflectToAttr": false,
          "docs": "If `true` the list can be used on a light, dark or colored backgrounds",
          "docsTags": [],
          "default": "'light'",
          "values": [
            {
              "value": "color",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "border",
          "type": "boolean",
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "If `true` each list item has a bottom border",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the list item can not be hovered",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inMainNav",
          "type": "boolean",
          "mutable": false,
          "attr": "in-main-nav",
          "reflectToAttr": false,
          "docs": "If `true` the list can be used as an accordion in meta nav",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "If `true` the list can be used on a dark background"
            }
          ],
          "default": "undefined",
          "deprecation": "If `true` the list can be used on a dark background",
          "values": [
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"large\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Defines the min height of the list item",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload",
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-list"
        ],
        "bal-file-upload": [
          "bal-list"
        ],
        "bal-navigation": [
          "bal-list"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list/bal-list-item/bal-list-item.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accordion",
          "type": "boolean",
          "mutable": false,
          "attr": "accordion",
          "reflectToAttr": false,
          "docs": "If `true` the list item can be used as a accordion",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true` the list item shows that it is clickable",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the list item can be hovered",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL of the page the link goes to",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "If `true` the list item has a selected theme",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subAccordionItem",
          "type": "boolean",
          "mutable": false,
          "attr": "sub-accordion-item",
          "reflectToAttr": false,
          "docs": "If `true` the list item can be used as an accordion inside another accordion",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to open the linked document",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balNavigate",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link element has clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload",
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-list-item"
        ],
        "bal-file-upload": [
          "bal-list-item"
        ],
        "bal-navigation": [
          "bal-list-item"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list/bal-list-item-accordion-body/bal-list-item-accordion-body.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-accordion-body",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accordionGroup",
          "type": "string | undefined",
          "mutable": false,
          "attr": "accordion-group",
          "reflectToAttr": false,
          "docs": "Synchronizes the height of the accordion to max of all\nthe other grouped accordion bodies",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "contentAlignment",
          "type": "\"center\" | \"end\" | \"space-between\" | \"start\"",
          "mutable": false,
          "attr": "content-alignment",
          "reflectToAttr": false,
          "docs": "Sets justify-content of the items to start, center, end, or space-between. Default is start",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": false,
          "attr": "open",
          "reflectToAttr": false,
          "docs": "If `true` the body will be open and visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getContentHeight",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "signature": "getContentHeight() => Promise<number>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [
        "bal-list-item-content"
      ],
      "dependencyGraph": {
        "bal-list-item-accordion-body": [
          "bal-list-item-content"
        ],
        "bal-navigation": [
          "bal-list-item-accordion-body"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list/bal-list-item-accordion-head/bal-list-item-accordion-head.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-accordion-head",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accordionOpen",
          "type": "boolean",
          "mutable": false,
          "attr": "accordion-open",
          "reflectToAttr": false,
          "docs": "If `true` the list accordion is open",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon name string with value 'plus' on default",
          "docsTags": [],
          "default": "'plus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balAccordionChange",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the accordion state is changed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [
        "bal-list-item-icon",
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-list-item-accordion-head": [
          "bal-list-item-icon",
          "bal-icon"
        ],
        "bal-navigation": [
          "bal-list-item-accordion-head"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list/bal-list-item-content/bal-list-item-content.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-content",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "contentAlignment",
          "type": "string | undefined",
          "mutable": false,
          "attr": "content-alignment",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload",
        "bal-list-item-accordion-body",
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-list-item-content"
        ],
        "bal-file-upload": [
          "bal-list-item-content"
        ],
        "bal-list-item-accordion-body": [
          "bal-list-item-content"
        ],
        "bal-navigation": [
          "bal-list-item-content"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list/bal-list-item-icon/bal-list-item-icon.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-icon",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "right",
          "type": "boolean",
          "mutable": false,
          "attr": "right",
          "reflectToAttr": false,
          "docs": "If `true` the icon is on the right side of the list item. Default is the left side.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload",
        "bal-list-item-accordion-head"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-list-item-icon"
        ],
        "bal-file-upload": [
          "bal-list-item-icon"
        ],
        "bal-list-item-accordion-head": [
          "bal-list-item-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list/bal-list-item-subtitle/bal-list-item-subtitle.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-subtitle",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-list-item-subtitle"
        ],
        "bal-file-upload": [
          "bal-list-item-subtitle"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list/bal-list-item-title/bal-list-item-title.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-title",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "level",
          "type": "\"display\" | \"display-2\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\"",
          "mutable": false,
          "attr": "level",
          "reflectToAttr": false,
          "docs": "Heading level with value 'h4' on default",
          "docsTags": [],
          "default": "'h5'",
          "values": [
            {
              "value": "display",
              "type": "string"
            },
            {
              "value": "display-2",
              "type": "string"
            },
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visualLevel",
          "type": "\"display\" | \"display-2\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | undefined",
          "mutable": false,
          "attr": "visual-level",
          "reflectToAttr": false,
          "docs": "Make the visual style mimic a specific heading level.\nThis option allows you to make e.g. h1 visually look like h3,\nbut still keep it h1 in the markup.",
          "docsTags": [],
          "values": [
            {
              "value": "display",
              "type": "string"
            },
            {
              "value": "display-2",
              "type": "string"
            },
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload",
        "bal-navigation"
      ],
      "dependencies": [
        "bal-heading"
      ],
      "dependencyGraph": {
        "bal-list-item-title": [
          "bal-heading"
        ],
        "bal-doc-download": [
          "bal-list-item-title"
        ],
        "bal-file-upload": [
          "bal-list-item-title"
        ],
        "bal-navigation": [
          "bal-list-item-title"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-logo/bal-logo.tsx",
      "encapsulation": "none",
      "tag": "bal-logo",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "Defines if the animation should be active",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"blue\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the logo.",
          "docsTags": [],
          "default": "'blue'",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navbar-brand",
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-navbar-brand": [
          "bal-logo"
        ],
        "bal-navigation": [
          "bal-logo"
        ]
      }
    },
    {
      "filePath": "./src/components/notice/bal-modal/bal-modal.tsx",
      "encapsulation": "none",
      "tag": "bal-modal",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "component",
          "type": "Function | HTMLElement | null | string",
          "mutable": false,
          "attr": "component",
          "reflectToAttr": false,
          "docs": "The component to display inside of the modal.",
          "docsTags": [],
          "values": [
            {
              "type": "Function"
            },
            {
              "type": "HTMLElement"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "componentProps",
          "type": "undefined | { [key: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The data to pass to the modal component.",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "cssClass",
          "type": "string | string[] | undefined",
          "mutable": false,
          "attr": "css-class",
          "reflectToAttr": false,
          "docs": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hasBackdrop",
          "type": "boolean",
          "mutable": false,
          "attr": "has-backdrop",
          "reflectToAttr": false,
          "docs": "If `true`, a backdrop will be displayed behind the modal.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isClosable",
          "type": "boolean",
          "mutable": false,
          "attr": "is-closable",
          "reflectToAttr": false,
          "docs": "If `true`, the modal can be closed with the escape key or the little close button.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modalWidth",
          "type": "number",
          "mutable": false,
          "attr": "modal-width",
          "reflectToAttr": false,
          "docs": "Defines the width of the modal body",
          "docsTags": [],
          "default": "640",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "space",
          "type": "\"\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "space",
          "reflectToAttr": false,
          "docs": "Defines the space/padding of the modal",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
          "parameters": [],
          "docs": "Closes the presented modal with the modal controller",
          "docsTags": []
        },
        {
          "name": "onDidDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "Returns a promise that resolves when the modal did dismiss.",
          "docsTags": []
        },
        {
          "name": "onWillDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "Returns a promise that resolves when the modal will dismiss.",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "Presents the modal through the modal controller",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balModalDidDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the modal has dismissed.",
          "docsTags": []
        },
        {
          "event": "balModalDidPresent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the modal has presented.",
          "docsTags": []
        },
        {
          "event": "balModalWillDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted before the modal has dismissed.",
          "docsTags": []
        },
        {
          "event": "balModalWillPresent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted before the modal has presented.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/notice/bal-modal/bal-modal-body/bal-modal-body.tsx",
      "encapsulation": "none",
      "tag": "bal-modal-body",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/notice/bal-modal/bal-modal-header/bal-modal-header.tsx",
      "encapsulation": "none",
      "tag": "bal-modal-header",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-heading",
        "bal-close"
      ],
      "dependencyGraph": {
        "bal-modal-header": [
          "bal-heading",
          "bal-close"
        ],
        "bal-close": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navbar/bal-navbar.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "container",
          "type": "\"\" | \"blog-page\" | \"compact\" | \"detail-page\" | \"fluid\" | \"wide\"",
          "mutable": false,
          "attr": "container",
          "reflectToAttr": false,
          "docs": "Sets the content content width with the regular container classes",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "blog-page",
              "type": "string"
            },
            {
              "value": "compact",
              "type": "string"
            },
            {
              "value": "detail-page",
              "type": "string"
            },
            {
              "value": "fluid",
              "type": "string"
            },
            {
              "value": "wide",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"app\" | \"simple\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the type of navbar. App is used for almost every web applications\nlike the portal app. For our sales funnel we recommend to use the simple navbar.\nMeta and main are used for the website.",
          "docsTags": [],
          "default": "'app'",
          "values": [
            {
              "value": "app",
              "type": "string"
            },
            {
              "value": "simple",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "light",
          "type": "boolean",
          "mutable": false,
          "attr": "light",
          "reflectToAttr": false,
          "docs": "It `true` the navbar has a white background. Always use the blue header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navbar/bal-navbar-brand/bal-navbar-brand.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar-brand",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "Defines if the logo animation should be active",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Link of the logo / title.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "linkTarget",
          "type": "\" _parent\" | \"\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "link-target",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Link target"
            }
          ],
          "default": "''",
          "deprecation": "Link target",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "type": "\"\""
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "logo",
          "type": "string | undefined",
          "mutable": false,
          "attr": "logo",
          "reflectToAttr": false,
          "docs": "Src to display a logo -> replaces the default Baloise Logo",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "simple",
          "type": "boolean",
          "mutable": false,
          "attr": "simple",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use interface on bal-navbar instead.\nIf `true` the navbar does not have a mobil version. Only shows logo and an app title."
            }
          ],
          "default": "false",
          "deprecation": "Use interface on bal-navbar instead.\nIf `true` the navbar does not have a mobil version. Only shows logo and an app title.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balNavigate",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link element has clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-logo",
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-navbar-brand": [
          "bal-logo",
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navbar/bal-navbar-menu/bal-navbar-menu.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar-menu",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navbar/bal-navbar-menu-end/bal-navbar-menu-end.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar-menu-end",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navbar/bal-navbar-menu-start/bal-navbar-menu-start.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar-menu-start",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaLabelMain",
          "type": "string",
          "mutable": false,
          "attr": "aria-label-main",
          "reflectToAttr": false,
          "docs": "Aria label for the main-navigation-wrapper",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ariaLabelMeta",
          "type": "string",
          "mutable": false,
          "attr": "aria-label-meta",
          "reflectToAttr": false,
          "docs": "Aria label for the meta-navigation-wrapper",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "logoAnimated",
          "type": "boolean",
          "mutable": false,
          "attr": "logo-animated",
          "reflectToAttr": false,
          "docs": "Defines if the animation should be active",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "logoPath",
          "type": "string",
          "mutable": false,
          "attr": "logo-path",
          "reflectToAttr": false,
          "docs": "Path to the logo-image",
          "docsTags": [],
          "default": "'/'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "metaValue",
          "type": "string | undefined",
          "mutable": false,
          "attr": "meta-value",
          "reflectToAttr": false,
          "docs": "Defines the initially active meta-navigation-item",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "orientationchange",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "scroll",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-navigation-meta",
        "bal-navigation-meta-start",
        "bal-tabs",
        "bal-tab-item",
        "bal-navigation-meta-end",
        "bal-navigation-main",
        "bal-navigation-main-head",
        "bal-logo",
        "bal-navigation-main-body",
        "bal-navigation-menu",
        "bal-button",
        "bal-list",
        "bal-list-item",
        "bal-list-item-accordion-head",
        "bal-list-item-content",
        "bal-list-item-title",
        "bal-list-item-accordion-body"
      ],
      "dependencyGraph": {
        "bal-navigation": [
          "bal-navigation-meta",
          "bal-navigation-meta-start",
          "bal-tabs",
          "bal-tab-item",
          "bal-navigation-meta-end",
          "bal-navigation-main",
          "bal-navigation-main-head",
          "bal-logo",
          "bal-navigation-main-body",
          "bal-navigation-menu",
          "bal-button",
          "bal-list",
          "bal-list-item",
          "bal-list-item-accordion-head",
          "bal-list-item-content",
          "bal-list-item-title",
          "bal-list-item-accordion-body"
        ],
        "bal-tabs": [
          "bal-select",
          "bal-select-option",
          "bal-icon",
          "bal-badge"
        ],
        "bal-select": [
          "bal-tag",
          "bal-popover",
          "bal-icon",
          "bal-popover-content",
          "bal-checkbox"
        ],
        "bal-tag": [
          "bal-close"
        ],
        "bal-close": [
          "bal-icon"
        ],
        "bal-badge": [
          "bal-icon"
        ],
        "bal-navigation-menu": [
          "bal-navigation-menu-list",
          "bal-navigation-menu-list-item"
        ],
        "bal-navigation-menu-list": [
          "bal-card",
          "bal-card-content",
          "bal-heading"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ],
        "bal-list-item-accordion-head": [
          "bal-list-item-icon",
          "bal-icon"
        ],
        "bal-list-item-title": [
          "bal-heading"
        ],
        "bal-list-item-accordion-body": [
          "bal-list-item-content"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-level-block/bal-navigation-level-block.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-level-block",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"grey\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'white'",
          "values": [
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "link",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "linkLabel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "`block-value-${navigationLevelBlockIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getLevelInfo",
          "returns": {
            "type": "Promise<LevelInfo>",
            "docs": ""
          },
          "signature": "getLevelInfo() => Promise<LevelInfo>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-level-block-item/bal-navigation-level-block-item.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-level-block-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "link",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "linkLabel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "`block-value-${navigationLevelBlockItemIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getLevelInfo",
          "returns": {
            "type": "Promise<LevelInfo>",
            "docs": ""
          },
          "signature": "getLevelInfo() => Promise<LevelInfo>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-level-main/bal-navigation-level-main.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-level-main",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "isTabLink",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "is-tab-link",
          "reflectToAttr": false,
          "docs": "It is 'true' when the meta item is used as a link and not as a tab",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "link",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "linkLabel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "`main-value-${navigationLevelMainIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getLevelInfo",
          "returns": {
            "type": "Promise<LevelInfo>",
            "docs": ""
          },
          "signature": "getLevelInfo() => Promise<LevelInfo>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-level-meta/bal-navigation-level-meta.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-level-meta",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "isTabLink",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "is-tab-link",
          "reflectToAttr": false,
          "docs": "It is 'true' when the meta item is used as a link and not as a tab",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "link",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link",
          "reflectToAttr": false,
          "docs": "sub link of the meta tab, rendered on touch resolution",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "linkLabel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "`meta-value-${navigationLevelMetaIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getLevelInfo",
          "returns": {
            "type": "Promise<LevelInfo>",
            "docs": ""
          },
          "signature": "getLevelInfo() => Promise<LevelInfo>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-levels/bal-navigation-levels.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-levels",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "getLevelInfos",
          "returns": {
            "type": "Promise<LevelInfo[]>",
            "docs": ""
          },
          "signature": "getLevelInfos() => Promise<LevelInfo[]>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-main/bal-navigation-main.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-main",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaLabelMain",
          "type": "string | undefined",
          "mutable": false,
          "attr": "aria-label-main",
          "reflectToAttr": false,
          "docs": "aria label for main navigation bar",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-navigation": [
          "bal-navigation-main"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-main-body/bal-navigation-main-body.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-main-body",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-navigation": [
          "bal-navigation-main-body"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-main-head/bal-navigation-main-head.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-main-head",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-navigation": [
          "bal-navigation-main-head"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-menu/bal-navigation-menu.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-menu",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "elements",
          "type": "LevelInfo[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "LevelInfo[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "linkHref",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link-href",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "linkName",
          "type": "string | undefined",
          "mutable": false,
          "attr": "link-name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tracking",
          "type": "{ [key: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [
        "bal-navigation-menu-list",
        "bal-navigation-menu-list-item"
      ],
      "dependencyGraph": {
        "bal-navigation-menu": [
          "bal-navigation-menu-list",
          "bal-navigation-menu-list-item"
        ],
        "bal-navigation-menu-list": [
          "bal-card",
          "bal-card-content",
          "bal-heading"
        ],
        "bal-navigation": [
          "bal-navigation-menu"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-menu-list/bal-navigation-menu-list.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-menu-list",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"grey\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color of the menu list card background",
          "docsTags": [],
          "default": "'white'",
          "values": [
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headline",
          "type": "string | undefined",
          "mutable": false,
          "attr": "headline",
          "reflectToAttr": false,
          "docs": "Optional headline of the menu list card",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Optional href of the menu list card headline as link",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Target of the menu list card headline target as link",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tracking",
          "type": "{ [key: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation-menu"
      ],
      "dependencies": [
        "bal-card",
        "bal-card-content",
        "bal-heading"
      ],
      "dependencyGraph": {
        "bal-navigation-menu-list": [
          "bal-card",
          "bal-card-content",
          "bal-heading"
        ],
        "bal-navigation-menu": [
          "bal-navigation-menu-list"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-menu-list-item/bal-navigation-menu-list-item.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-menu-list-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "href",
          "type": "string | undefined",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tracking",
          "type": "{ [key: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation-menu"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-navigation-menu": [
          "bal-navigation-menu-list-item"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-meta/bal-navigation-meta.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-meta",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaLabelMeta",
          "type": "string | undefined",
          "mutable": false,
          "attr": "aria-label-meta",
          "reflectToAttr": false,
          "docs": "aria label for meta navigation bar",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-navigation": [
          "bal-navigation-meta"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-meta-end/bal-navigation-meta-end.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-meta-end",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-navigation": [
          "bal-navigation-meta-end"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-meta-start/bal-navigation-meta-start.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-meta-start",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-navigation": [
          "bal-navigation-meta-start"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-navigation/bal-navigation-popover/bal-navigation-popover.tsx",
      "encapsulation": "none",
      "tag": "bal-navigation-popover",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeColor",
          "type": "\"danger\" | \"info\" | \"info-light\" | \"light\" | \"link\" | \"primary\" | \"primary-light\" | \"success\" | \"text\" | \"warning\"",
          "mutable": false,
          "attr": "active-color",
          "reflectToAttr": false,
          "docs": "Color style of the button when the popover is open.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "info-light",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "primary-light",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "arrow",
          "type": "boolean",
          "mutable": false,
          "attr": "arrow",
          "reflectToAttr": false,
          "docs": "If `true` a little arrow is added, which points to the trigger element",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdrop",
          "type": "boolean",
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": false,
          "docs": "If `true` a backdrop is added",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "If 'false', the closing button is not displayed",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentExpanded",
          "type": "boolean",
          "mutable": false,
          "attr": "content-expanded",
          "reflectToAttr": false,
          "docs": "If `true` the content has a min width of 100%.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentMinWidth",
          "type": "number",
          "mutable": false,
          "attr": "content-min-width",
          "reflectToAttr": false,
          "docs": "Define the min width of the popover content.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentNoShadow",
          "type": "boolean",
          "mutable": false,
          "attr": "content-no-shadow",
          "reflectToAttr": false,
          "docs": "If `true` the popover does not have the shadow",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentRadius",
          "type": "\"large\" | \"large-bottom-none\" | \"large-top-none\" | \"none\" | \"normal\" | \"normal-bottom-none\" | \"normal-top-none\"",
          "mutable": false,
          "attr": "content-radius",
          "reflectToAttr": false,
          "docs": "Defines border-radius of popover content.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "large-bottom-none",
              "type": "string"
            },
            {
              "value": "large-top-none",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "normal-bottom-none",
              "type": "string"
            },
            {
              "value": "normal-top-none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentWidth",
          "type": "number",
          "mutable": false,
          "attr": "content-width",
          "reflectToAttr": false,
          "docs": "Define the max width of the popover content.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string | undefined",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Defines the heading of the popover",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string | undefined",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Defines the icon of the trigger button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inactiveColor",
          "type": "\"danger\" | \"info\" | \"info-light\" | \"light\" | \"link\" | \"primary\" | \"primary-light\" | \"success\" | \"text\" | \"warning\"",
          "mutable": false,
          "attr": "inactive-color",
          "reflectToAttr": false,
          "docs": "Color style of the button when the popover is closed.",
          "docsTags": [],
          "default": "'light'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "info-light",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "primary-light",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "Turns the trigger button to inverted style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label of the button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mobileTop",
          "type": "boolean",
          "mutable": false,
          "attr": "mobile-top",
          "reflectToAttr": false,
          "docs": "If `true` its content will have a divider line on top",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetY",
          "type": "number",
          "mutable": false,
          "attr": "offset-y",
          "reflectToAttr": false,
          "docs": "Define the offset of the popover content.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Define the position of the popover content.",
          "docsTags": [],
          "default": "'bottom-start'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Defines the size of the button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "square",
          "type": "boolean",
          "mutable": false,
          "attr": "square",
          "reflectToAttr": false,
          "docs": "If `true` the width of the buttons is limited",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-popover",
        "bal-button",
        "bal-popover-content",
        "bal-heading",
        "bal-close"
      ],
      "dependencyGraph": {
        "bal-navigation-popover": [
          "bal-popover",
          "bal-button",
          "bal-popover-content",
          "bal-heading",
          "bal-close"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ],
        "bal-close": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/notice/bal-notices/bal-notices.tsx",
      "encapsulation": "none",
      "tag": "bal-notices",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/notice/bal-notification/bal-notification.tsx",
      "encapsulation": "none",
      "tag": "bal-notification",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the element\nColor type primary is deprecated, please use info instead.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-number-input/bal-number-input.tsx",
      "encapsulation": "none",
      "tag": "bal-number-input",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "decimal",
          "type": "number",
          "mutable": false,
          "attr": "decimal",
          "reflectToAttr": false,
          "docs": "Defines the allowed decimal points for the `number-input`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "exactNumber",
          "type": "boolean",
          "mutable": false,
          "attr": "exact-number",
          "reflectToAttr": false,
          "docs": "If `true` the input value has 0 as default value",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Instructional text that shows before the input has a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "suffix",
          "type": "string | undefined",
          "mutable": false,
          "attr": "suffix",
          "reflectToAttr": false,
          "docs": "Adds a suffix the the input-value after blur.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "number | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "number | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balKeyPress",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard key has pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-pagination/bal-pagination.tsx",
      "encapsulation": "none",
      "tag": "bal-pagination",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"\" | \"small\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the pagination",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageRange",
          "type": "number",
          "mutable": false,
          "attr": "page-range",
          "reflectToAttr": false,
          "docs": "Specify the max visible pages before and after the selected page",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sticky",
          "type": "boolean",
          "mutable": false,
          "attr": "sticky",
          "reflectToAttr": false,
          "docs": "If 'true, the pagination will be sticky to the top",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "top",
          "type": "number",
          "mutable": false,
          "attr": "top",
          "reflectToAttr": false,
          "docs": "If sticky, the top position will be determined by this value",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "The total amount of pages",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Current selected page",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "next",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "next() => Promise<void>",
          "parameters": [],
          "docs": "Go to the next page",
          "docsTags": []
        },
        {
          "name": "previous",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "previous() => Promise<void>",
          "parameters": [],
          "docs": "Go to the previous page",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balChange",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a page change happens",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-carousel"
      ],
      "dependencies": [
        "bal-text",
        "bal-button",
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-pagination": [
          "bal-text",
          "bal-button",
          "bal-icon"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ],
        "bal-carousel": [
          "bal-pagination"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-popover/bal-popover.tsx",
      "encapsulation": "none",
      "tag": "bal-popover",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "arrow",
          "type": "boolean",
          "mutable": false,
          "attr": "arrow",
          "reflectToAttr": false,
          "docs": "If `true` a little arrow is added, which points to the trigger element",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdrop",
          "type": "boolean",
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": false,
          "docs": "If `true` a backdrop is added",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hint",
          "type": "boolean",
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "If `true` the popover has max-width on tablet and desktop. On mobile it uses the whole viewport.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hover",
          "type": "boolean",
          "mutable": false,
          "attr": "hover",
          "reflectToAttr": false,
          "docs": "If `true` the popover shows on hover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mobileTop",
          "type": "boolean",
          "mutable": false,
          "attr": "mobile-top",
          "reflectToAttr": false,
          "docs": "If `true` there will be no backdrop",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetX",
          "type": "number",
          "mutable": false,
          "attr": "offset-x",
          "reflectToAttr": false,
          "docs": "Define the offset of the popover content.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetY",
          "type": "number",
          "mutable": false,
          "attr": "offset-y",
          "reflectToAttr": false,
          "docs": "Define the offset of the popover content.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "padding",
          "type": "number",
          "mutable": false,
          "attr": "padding",
          "reflectToAttr": false,
          "docs": "Define padding of the overflow",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Define the position of the popover content.",
          "docsTags": [],
          "default": "'bottom-start'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "boolean",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "If `true` the popover is shown as a tooltip",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "boolean",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "If `true` the popover content is open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "dismiss(options?: PopoverPresentOptions) => Promise<void>",
          "parameters": [],
          "docs": "Closes the popover",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "present(options?: PopoverPresentOptions) => Promise<void>",
          "parameters": [],
          "docs": "Open the popover",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle(options?: PopoverPresentOptions) => Promise<void>",
          "parameters": [],
          "docs": "Open or closes the popover",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balChange",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Listen when the popover opens or closes. Returns the current value.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "balPopoverPrepare",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-datepicker",
        "bal-hint",
        "bal-navigation-popover",
        "bal-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-datepicker": [
          "bal-popover"
        ],
        "bal-hint": [
          "bal-popover"
        ],
        "bal-navigation-popover": [
          "bal-popover"
        ],
        "bal-select": [
          "bal-popover"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-popover/bal-popover-content/bal-popover-content.tsx",
      "encapsulation": "none",
      "tag": "bal-popover-content",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"grey\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines background color of the content.",
          "docsTags": [],
          "default": "'white'",
          "values": [
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentMinWidth",
          "type": "number",
          "mutable": false,
          "attr": "content-min-width",
          "reflectToAttr": false,
          "docs": "Define the min width of the popover content.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentWidth",
          "type": "number",
          "mutable": false,
          "attr": "content-width",
          "reflectToAttr": false,
          "docs": "Define the max width of the popover content.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the content has a min width of 100%.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mobileTop",
          "type": "boolean",
          "mutable": false,
          "attr": "mobile-top",
          "reflectToAttr": false,
          "docs": "If `true` the content will have a divider line on top",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noShadow",
          "type": "boolean",
          "mutable": false,
          "attr": "no-shadow",
          "reflectToAttr": false,
          "docs": "If `true` the popover does not have the shadow",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "radius",
          "type": "\"large\" | \"large-bottom-none\" | \"large-top-none\" | \"none\" | \"normal\" | \"normal-bottom-none\" | \"normal-top-none\"",
          "mutable": false,
          "attr": "radius",
          "reflectToAttr": false,
          "docs": "Defines border-radius of popover content.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "large-bottom-none",
              "type": "string"
            },
            {
              "value": "large-top-none",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "normal-bottom-none",
              "type": "string"
            },
            {
              "value": "normal-top-none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollable",
          "type": "number",
          "mutable": false,
          "attr": "scrollable",
          "reflectToAttr": false,
          "docs": "Limit the height of the popover content. Pass the amount of pixel.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spaceless",
          "type": "boolean",
          "mutable": false,
          "attr": "spaceless",
          "reflectToAttr": false,
          "docs": "If `true` the popover has no padding space.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-datepicker",
        "bal-hint",
        "bal-navigation-popover",
        "bal-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-datepicker": [
          "bal-popover-content"
        ],
        "bal-hint": [
          "bal-popover-content"
        ],
        "bal-navigation-popover": [
          "bal-popover-content"
        ],
        "bal-select": [
          "bal-popover-content"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-radio/bal-radio.tsx",
      "encapsulation": "none",
      "tag": "bal-radio",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flat",
          "type": "boolean",
          "mutable": false,
          "attr": "flat",
          "reflectToAttr": false,
          "docs": "If `true` the control is no padding",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": false,
          "docs": "If `true`, the value will not be send with a form submit",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"radio\" | \"select-button\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the radio button",
          "docsTags": [],
          "default": "'radio'",
          "values": [
            {
              "value": "radio",
              "type": "string"
            },
            {
              "value": "select-button",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isEmpty",
          "type": "undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "If `true` the radio has no label"
            }
          ],
          "default": "undefined",
          "deprecation": "If `true` the radio has no label",
          "values": [
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the radio item.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelHidden",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hidden",
          "reflectToAttr": false,
          "docs": "If `true` the radio has no label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the radio.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement | undefined>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement | undefined>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle loses focus.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checked property has changed.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-radio/bal-radio-group/bal-radio-group.tsx",
      "encapsulation": "none",
      "tag": "bal-radio-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowEmptySelection",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-empty-selection",
          "reflectToAttr": false,
          "docs": "If `true`, the radios can be deselected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Uses the whole width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"radio\" | \"select-button\" | undefined",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the radio button",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "value": "radio",
              "type": "string"
            },
            {
              "value": "select-button",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the radio group.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "vertical",
          "type": "boolean",
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": false,
          "docs": "Displays the checkboxes vertically",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "verticalOnMobile",
          "type": "boolean",
          "mutable": false,
          "attr": "vertical-on-mobile",
          "reflectToAttr": false,
          "docs": "If `true`, the controls will be vertically on mobile devices.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle loses focus.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "boolean | number | string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checked property has changed.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "boolean | number | string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checked property has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "balFocus",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "balBlur",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/form/bal-select/bal-select.tsx",
      "encapsulation": "none",
      "tag": "bal-select",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autocomplete",
          "type": "\"name\" | \"off\" | \"tel\" | \"url\" | \"email\" | \"on\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            },
            {
              "value": "honorific-prefix",
              "type": "string"
            },
            {
              "value": "given-name",
              "type": "string"
            },
            {
              "value": "additional-name",
              "type": "string"
            },
            {
              "value": "family-name",
              "type": "string"
            },
            {
              "value": "honorific-suffix",
              "type": "string"
            },
            {
              "value": "nickname",
              "type": "string"
            },
            {
              "value": "username",
              "type": "string"
            },
            {
              "value": "new-password",
              "type": "string"
            },
            {
              "value": "current-password",
              "type": "string"
            },
            {
              "value": "one-time-code",
              "type": "string"
            },
            {
              "value": "organization-title",
              "type": "string"
            },
            {
              "value": "organization",
              "type": "string"
            },
            {
              "value": "street-address",
              "type": "string"
            },
            {
              "value": "address-line1",
              "type": "string"
            },
            {
              "value": "address-line2",
              "type": "string"
            },
            {
              "value": "address-line3",
              "type": "string"
            },
            {
              "value": "address-level4",
              "type": "string"
            },
            {
              "value": "address-level3",
              "type": "string"
            },
            {
              "value": "address-level2",
              "type": "string"
            },
            {
              "value": "address-level1",
              "type": "string"
            },
            {
              "value": "country",
              "type": "string"
            },
            {
              "value": "country-name",
              "type": "string"
            },
            {
              "value": "postal-code",
              "type": "string"
            },
            {
              "value": "cc-name",
              "type": "string"
            },
            {
              "value": "cc-given-name",
              "type": "string"
            },
            {
              "value": "cc-additional-name",
              "type": "string"
            },
            {
              "value": "cc-family-name",
              "type": "string"
            },
            {
              "value": "cc-number",
              "type": "string"
            },
            {
              "value": "cc-exp",
              "type": "string"
            },
            {
              "value": "cc-exp-month",
              "type": "string"
            },
            {
              "value": "cc-exp-year",
              "type": "string"
            },
            {
              "value": "cc-csc",
              "type": "string"
            },
            {
              "value": "cc-type",
              "type": "string"
            },
            {
              "value": "transaction-currency",
              "type": "string"
            },
            {
              "value": "transaction-amount",
              "type": "string"
            },
            {
              "value": "language",
              "type": "string"
            },
            {
              "value": "bday",
              "type": "string"
            },
            {
              "value": "bday-day",
              "type": "string"
            },
            {
              "value": "bday-month",
              "type": "string"
            },
            {
              "value": "bday-year",
              "type": "string"
            },
            {
              "value": "sex",
              "type": "string"
            },
            {
              "value": "tel-country-code",
              "type": "string"
            },
            {
              "value": "tel-national",
              "type": "string"
            },
            {
              "value": "tel-area-code",
              "type": "string"
            },
            {
              "value": "tel-local",
              "type": "string"
            },
            {
              "value": "tel-extension",
              "type": "string"
            },
            {
              "value": "impp",
              "type": "string"
            },
            {
              "value": "photo",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "balTabindex",
          "type": "number",
          "mutable": false,
          "attr": "bal-tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex of the control.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filter",
          "type": "\"includes\" | \"starts-with\"",
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "'includes'",
          "values": [
            {
              "value": "includes",
              "type": "string"
            },
            {
              "value": "starts-with",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasMovement",
          "type": "boolean",
          "mutable": false,
          "attr": "has-movement",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Enables the slide in animation for the option items."
            }
          ],
          "default": "false",
          "deprecation": "Enables the slide in animation for the option items.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Set this to `true` when the component is placed on a dark background.\nSet this to `true` when the component is placed on a dark background."
            }
          ],
          "default": "false",
          "deprecation": "Set this to `true` when the component is placed on a dark background.\nSet this to `true` when the component is placed on a dark background.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Defines if the select is in a loading state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": false,
          "docs": "Defines the max length of the value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true` multiple option can be selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noBorder",
          "type": "boolean",
          "mutable": false,
          "attr": "no-border",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Removes the border of the input."
            }
          ],
          "default": "false",
          "deprecation": "Removes the border of the input.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noDataLabel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "no-data-label",
          "reflectToAttr": false,
          "docs": "This label is shown if typeahead is active and all the options are filtered out.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The text to display when the select is empty.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "remote",
          "type": "boolean",
          "mutable": false,
          "attr": "remote",
          "reflectToAttr": false,
          "docs": "If `true` the filtering is done outside the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollable",
          "type": "number",
          "mutable": false,
          "attr": "scrollable",
          "reflectToAttr": false,
          "docs": "Defines the height of the popover list.",
          "docsTags": [],
          "default": "250",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionOptional",
          "type": "boolean",
          "mutable": false,
          "attr": "selection-optional",
          "reflectToAttr": false,
          "docs": "If `true` the options are a proposal and the user can also create his\nown value. Can only be used with the typeahead property.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "typeahead",
          "type": "boolean",
          "mutable": false,
          "attr": "typeahead",
          "reflectToAttr": false,
          "docs": "If `true` the user can search by typing into the input field.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | string[] | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Selected option values. Could also be passed as a string, which gets transformed.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "cancel",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "cancel() => Promise<void>",
          "parameters": [],
          "docs": "Cancel the popover",
          "docsTags": []
        },
        {
          "name": "clear",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "clear() => Promise<void>",
          "parameters": [],
          "docs": "Sets the value to `[]`, the input value to ´''´ and the focus index to ´0´.",
          "docsTags": []
        },
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the popover",
          "docsTags": []
        },
        {
          "name": "getValue",
          "returns": {
            "type": "Promise<string[] | undefined>",
            "docs": ""
          },
          "signature": "getValue() => Promise<string[] | undefined>",
          "parameters": [],
          "docs": "Sets the focus on the input element",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the popover",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select(value: string) => Promise<void>",
          "parameters": [],
          "docs": "Select option by passed value",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets the focus on the input element",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "balCancel",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the user cancels the input.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "string | string[] | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a option got selected.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input got clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balKeyPress",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus and key from the keyboard go hit.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-tabs"
      ],
      "dependencies": [
        "bal-tag",
        "bal-popover",
        "bal-icon",
        "bal-popover-content",
        "bal-checkbox"
      ],
      "dependencyGraph": {
        "bal-select": [
          "bal-tag",
          "bal-popover",
          "bal-icon",
          "bal-popover-content",
          "bal-checkbox"
        ],
        "bal-tag": [
          "bal-close"
        ],
        "bal-close": [
          "bal-icon"
        ],
        "bal-tabs": [
          "bal-select"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-select/bal-select-option/bal-select-option.tsx",
      "encapsulation": "none",
      "tag": "bal-select-option",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the option.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string | undefined",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Label will be shown in the input element when it got selected",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The value of the select option. This value will be returned by the parent `<bal-select>` element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-tabs": [
          "bal-select-option"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-shape/bal-shape.tsx",
      "encapsulation": "none",
      "tag": "bal-shape",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"green\" | \"green-light\" | \"purple\" | \"purple-light\" | \"red\" | \"red-light\" | \"yellow\" | \"yellow-light\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The shape color",
          "docsTags": [],
          "default": "'green'",
          "values": [
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "green-light",
              "type": "string"
            },
            {
              "value": "purple",
              "type": "string"
            },
            {
              "value": "purple-light",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "red-light",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            },
            {
              "value": "yellow-light",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rotation",
          "type": "\"0\" | \"180\" | \"270\" | \"90\" | undefined",
          "mutable": false,
          "attr": "rotation",
          "reflectToAttr": false,
          "docs": "The shape rotation",
          "docsTags": [],
          "default": "'0'",
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "180",
              "type": "string"
            },
            {
              "value": "270",
              "type": "string"
            },
            {
              "value": "90",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "variation",
          "type": "\"1\" | \"2\" | \"3\"",
          "mutable": false,
          "attr": "variation",
          "reflectToAttr": false,
          "docs": "The shape variation",
          "docsTags": [],
          "default": "'1'",
          "values": [
            {
              "value": "1",
              "type": "string"
            },
            {
              "value": "2",
              "type": "string"
            },
            {
              "value": "3",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-stage"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-stage": [
          "bal-shape"
        ]
      }
    },
    {
      "filePath": "./src/components/notice/bal-sheet/bal-sheet.tsx",
      "encapsulation": "none",
      "tag": "bal-sheet",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "containerSize",
          "type": "\"\" | \"blog-page\" | \"compact\" | \"detail-page\" | \"fluid\"",
          "mutable": false,
          "attr": "container-size",
          "reflectToAttr": false,
          "docs": "Defines content width of the stage",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "blog-page",
              "type": "string"
            },
            {
              "value": "compact",
              "type": "string"
            },
            {
              "value": "detail-page",
              "type": "string"
            },
            {
              "value": "fluid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/notice/bal-snackbar/bal-snackbar.tsx",
      "encapsulation": "none",
      "tag": "bal-snackbar",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "action",
          "type": "string",
          "mutable": false,
          "attr": "action",
          "reflectToAttr": false,
          "docs": "Label text for the action button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the snackbar.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "The duration of the snackbar",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The icon of the snackbar header",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "The message of the snackbar as html content",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subject",
          "type": "string",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "The subject of the snackbar header",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes this snackbar",
          "docsTags": []
        },
        {
          "name": "closeIn",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "closeIn(duration: number) => Promise<void>",
          "parameters": [],
          "docs": "Closes the snackbar after the given duration in ms",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balAction",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the action button is clicked",
          "docsTags": []
        },
        {
          "event": "balClose",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when snackbar is closed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-icon",
        "bal-heading",
        "bal-close",
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-snackbar": [
          "bal-icon",
          "bal-heading",
          "bal-close",
          "bal-button"
        ],
        "bal-close": [
          "bal-icon"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-spinner/bal-spinner.tsx",
      "encapsulation": "none",
      "tag": "bal-spinner",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"blue\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the spinner.",
          "docsTags": [],
          "default": "'blue'",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "deactivated",
          "type": "boolean",
          "mutable": false,
          "attr": "deactivated",
          "reflectToAttr": false,
          "docs": "If `true` the component will not add the spinner animation svg",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the component can be used on dark background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "small",
          "type": "boolean",
          "mutable": false,
          "attr": "small",
          "reflectToAttr": false,
          "docs": "If `true` the component is smaller",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-button",
        "bal-file-upload"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-button": [
          "bal-spinner"
        ],
        "bal-file-upload": [
          "bal-spinner"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-stage/bal-stage.tsx",
      "encapsulation": "none",
      "tag": "bal-stage",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"blue\" | \"green\" | \"purple\" | \"red\" | \"yellow\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the background color of the stage section",
          "docsTags": [],
          "default": "'purple'",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "purple",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "containerSize",
          "type": "string",
          "mutable": false,
          "attr": "container-size",
          "reflectToAttr": false,
          "docs": "Defines content width of the stage",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasShape",
          "type": "boolean",
          "mutable": false,
          "attr": "has-shape",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "If true the Baloise Shape is set"
            }
          ],
          "default": "false",
          "deprecation": "If true the Baloise Shape is set",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "sets text color to white for images and dark backgrounds (optional)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "shape",
          "type": "boolean",
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": false,
          "docs": "If true the Baloise Shape is set",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shapeRotation",
          "type": "\"0\" | \"180\" | \"270\" | \"90\" | undefined",
          "mutable": false,
          "attr": "shape-rotation",
          "reflectToAttr": false,
          "docs": "Shape Rotation",
          "docsTags": [],
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "180",
              "type": "string"
            },
            {
              "value": "270",
              "type": "string"
            },
            {
              "value": "90",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "shapeVariation",
          "type": "\"1\" | \"2\" | \"3\" | undefined",
          "mutable": false,
          "attr": "shape-variation",
          "reflectToAttr": false,
          "docs": "Shape Variation",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "string"
            },
            {
              "value": "2",
              "type": "string"
            },
            {
              "value": "3",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"large\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Defines size of the stage",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-shape"
      ],
      "dependencyGraph": {
        "bal-stage": [
          "bal-shape"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-stage/bal-stage-back-link/bal-stage-back-link.tsx",
      "encapsulation": "none",
      "tag": "bal-stage-back-link",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the color gets inverted for dark backgrounds",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shadow",
          "type": "boolean",
          "mutable": false,
          "attr": "shadow",
          "reflectToAttr": false,
          "docs": "If `true` adds a text shadow to improve readability on image background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-stage-back-link": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-stage/bal-stage-body/bal-stage-body.tsx",
      "encapsulation": "none",
      "tag": "bal-stage-body",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-stage/bal-stage-foot/bal-stage-foot.tsx",
      "encapsulation": "none",
      "tag": "bal-stage-foot",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-stage/bal-stage-head/bal-stage-head.tsx",
      "encapsulation": "none",
      "tag": "bal-stage-head",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-stage/bal-stage-image/bal-stage-image.tsx",
      "encapsulation": "none",
      "tag": "bal-stage-image",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "fallback",
          "type": "string | undefined",
          "mutable": false,
          "attr": "fallback",
          "reflectToAttr": false,
          "docs": "optional fallback image in case the srcSet fails",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "srcSet",
          "type": "string",
          "mutable": false,
          "attr": "src-set",
          "reflectToAttr": false,
          "docs": "set of images to be used as background image",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-tabs/bal-tab-item/bal-tab-item.tsx",
      "encapsulation": "none",
      "tag": "bal-tab-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Tells if this route is active and overrides the bal-tabs value property.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "bubble",
          "type": "boolean | string",
          "mutable": false,
          "attr": "bubble",
          "reflectToAttr": true,
          "docs": "If `true` a small red bubble is added to the tab.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If `true` the tab is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "done",
          "type": "boolean",
          "mutable": false,
          "attr": "done",
          "reflectToAttr": true,
          "docs": "If `true` the step is marked as done.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "failed",
          "type": "boolean",
          "mutable": false,
          "attr": "failed",
          "reflectToAttr": true,
          "docs": "If `true` the step is marked as failed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "If `true` the step is hidden.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Link to path.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string | undefined",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Tab icon not available for the steps.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Label for the tab.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "prevent",
          "type": "boolean",
          "mutable": false,
          "attr": "prevent",
          "reflectToAttr": false,
          "docs": "Tell's if the linking is done by a router.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "This is the key of the tab.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getOptions",
          "returns": {
            "type": "Promise<BalTabOption>",
            "docs": ""
          },
          "signature": "getOptions() => Promise<BalTabOption>",
          "parameters": [],
          "docs": "Options of the tab like label, value etc.",
          "docsTags": []
        },
        {
          "name": "setActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setActive(active: boolean) => Promise<void>",
          "parameters": [],
          "docs": "Sets the tab active.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balNavigate",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link element has clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-navigation": [
          "bal-tab-item"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-table/bal-table.tsx",
      "encapsulation": "none",
      "tag": "bal-table",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the table has a full width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-tabs/bal-tabs.tsx",
      "encapsulation": "none",
      "tag": "bal-tabs",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "If `true` a light border is shown for the tabs.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true` the tabs or steps can be clicked.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the field expands over the whole width.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "float",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "float",
          "reflectToAttr": false,
          "docs": "Defines the layout of the tabs. Right only works from the breakpoint\nhigh-definition and beyond.",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullwidth",
          "type": "boolean",
          "mutable": false,
          "attr": "fullwidth",
          "reflectToAttr": false,
          "docs": "If `true` the tabs is a block element and uses 100% of the width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPosition",
          "type": "\"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": false,
          "docs": "Defines the layout of the tabs.",
          "docsTags": [],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"meta\" | \"navbar\" | \"navigation\" | \"o-steps\" | \"steps\" | \"tabs\" | \"tabs-sub\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the tabs.",
          "docsTags": [],
          "default": "'tabs'",
          "values": [
            {
              "value": "meta",
              "type": "string"
            },
            {
              "value": "navbar",
              "type": "string"
            },
            {
              "value": "navigation",
              "type": "string"
            },
            {
              "value": "o-steps",
              "type": "string"
            },
            {
              "value": "steps",
              "type": "string"
            },
            {
              "value": "tabs",
              "type": "string"
            },
            {
              "value": "tabs-sub",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the field expands over the whole width.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOnMobile",
          "type": "boolean",
          "mutable": false,
          "attr": "select-on-mobile",
          "reflectToAttr": false,
          "docs": "If `true` the tabs are shown as a select component on mobile",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spaceless",
          "type": "boolean",
          "mutable": false,
          "attr": "spaceless",
          "reflectToAttr": false,
          "docs": "If `true` the tabs container does not have a padding left or right.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "vertical",
          "type": "\"mobile\" | \"tablet\" | boolean",
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": false,
          "docs": "If `true` tabs are align vertically.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "tablet",
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "verticalColSize",
          "type": "\"full\" | \"half\" | \"one-quarter\" | \"one-third\" | \"three-quarters\" | \"two-thirds\"",
          "mutable": false,
          "attr": "vertical-col-size",
          "reflectToAttr": false,
          "docs": "The col size of the tabs on vertical mode.",
          "docsTags": [],
          "default": "'one-third'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "half",
              "type": "string"
            },
            {
              "value": "one-quarter",
              "type": "string"
            },
            {
              "value": "one-third",
              "type": "string"
            },
            {
              "value": "three-quarters",
              "type": "string"
            },
            {
              "value": "two-thirds",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getOptionByValue",
          "returns": {
            "type": "Promise<BalTabOption | undefined>",
            "docs": ""
          },
          "signature": "getOptionByValue(value: string) => Promise<BalTabOption | undefined>",
          "parameters": [],
          "docs": "Find the options properties by its value",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select(tab: BalTabOption) => Promise<void>",
          "parameters": [],
          "docs": "Go to tab with the given value",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the changes has finished.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "balPopoverPrepare",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "balChange",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-navigation"
      ],
      "dependencies": [
        "bal-select",
        "bal-select-option",
        "bal-icon",
        "bal-badge"
      ],
      "dependencyGraph": {
        "bal-tabs": [
          "bal-select",
          "bal-select-option",
          "bal-icon",
          "bal-badge"
        ],
        "bal-select": [
          "bal-tag",
          "bal-popover",
          "bal-icon",
          "bal-popover-content",
          "bal-checkbox"
        ],
        "bal-tag": [
          "bal-close"
        ],
        "bal-close": [
          "bal-icon"
        ],
        "bal-badge": [
          "bal-icon"
        ],
        "bal-navigation": [
          "bal-tabs"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-tag/bal-tag.tsx",
      "encapsulation": "none",
      "tag": "bal-tag",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "The theme type of the tag.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"\" | \"blue\" | \"danger\" | \"green\" | \"grey\" | \"info\" | \"primary\" | \"purple\" | \"red\" | \"success\" | \"warning\" | \"yellow\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the tag.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "purple",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Overwrites the default color to invalid style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "light",
          "type": "boolean",
          "mutable": false,
          "attr": "light",
          "reflectToAttr": false,
          "docs": "If `true` a light version of the color is displayed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"center\" | \"left\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Choosing left or center the tag is aligned to that side in the bal-card.",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the tag element",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balCloseClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input got clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-select"
      ],
      "dependencies": [
        "bal-close"
      ],
      "dependencyGraph": {
        "bal-tag": [
          "bal-close"
        ],
        "bal-close": [
          "bal-icon"
        ],
        "bal-select": [
          "bal-tag"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-tag/bal-tag-group/bal-tag-group.tsx",
      "encapsulation": "none",
      "tag": "bal-tag-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-text/bal-text.tsx",
      "encapsulation": "none",
      "tag": "bal-text",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bold",
          "type": "boolean",
          "mutable": false,
          "attr": "bold",
          "reflectToAttr": false,
          "docs": "If `true` the text is bold",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"\" | \"black\" | \"blue\" | \"blue-dark\" | \"blue-light\" | \"danger\" | \"grey\" | \"info\" | \"light-blue\" | \"primary\" | \"primary-light\" | \"success\" | \"warning\" | \"white\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the text.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "black",
              "type": "string"
            },
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "blue-dark",
              "type": "string"
            },
            {
              "value": "blue-light",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "light-blue",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "primary-light",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "boolean",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "If `true` the text has heading font family",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": false,
          "docs": "If `true` the text is shown as a display inline",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the color gets inverted for dark backgrounds",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shadow",
          "type": "boolean",
          "mutable": false,
          "attr": "shadow",
          "reflectToAttr": false,
          "docs": "If `true` adds a text shadow to improve readability on image background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"block\" | \"lead\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Defines the size of the paragraph",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "block",
              "type": "string"
            },
            {
              "value": "lead",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "space",
          "type": "\"\" | \"all\" | \"bottom\" | \"none\" | \"top\"",
          "mutable": false,
          "attr": "space",
          "reflectToAttr": false,
          "docs": "Defines at which position the heading has spacing.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "all",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-card-subtitle",
        "bal-doc-color",
        "bal-input-stepper",
        "bal-pagination"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-card-subtitle": [
          "bal-text"
        ],
        "bal-doc-color": [
          "bal-text"
        ],
        "bal-input-stepper": [
          "bal-text"
        ],
        "bal-pagination": [
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/form/bal-textarea/bal-textarea.tsx",
      "encapsulation": "none",
      "tag": "bal-textarea",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true` the input gets a clickable cursor style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cols",
          "type": "number | undefined",
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the element is not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` this component can be placed on dark background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number | undefined",
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Instructional text that shows before the input has a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the element can not mutated, meaning the user can not edit the control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number | undefined",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "The number of visible text lines for the control.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the textarea.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "wrap",
          "type": "\"hard\" | \"off\" | \"soft\" | undefined",
          "mutable": false,
          "attr": "wrap",
          "reflectToAttr": false,
          "docs": "Indicates how the control wraps text.",
          "docsTags": [],
          "values": [
            {
              "value": "hard",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "soft",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLTextAreaElement | undefined>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLTextAreaElement | undefined>",
          "parameters": [],
          "docs": "Returns the native `<textarea>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `bal-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "string | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed..",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "string | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balKeyPress",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard key has pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "reset",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/notice/bal-toast/bal-toast.tsx",
      "encapsulation": "none",
      "tag": "bal-toast",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the toast.\nColor type primary is deprecated, please use info instead.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "The duration of the toast in milliseconds.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "Content message",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes this toast",
          "docsTags": []
        },
        {
          "name": "closeIn",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "closeIn(duration: number) => Promise<void>",
          "parameters": [],
          "docs": "Closes the toast after the given duration in ms",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balClose",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when toast is closed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-close"
      ],
      "dependencyGraph": {
        "bal-toast": [
          "bal-close"
        ],
        "bal-close": [
          "bal-icon"
        ]
      }
    }
  ]
}