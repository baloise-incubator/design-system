const o=["Tab","ArrowDown","Space","Escape"," ","Shift","Enter","ArrowLeft","ArrowRight","ArrowUp","Home","End"],t=t=>{let e=[],s=!0;const c=t?t.shadowRoot:document,u=t||document.body,n=o=>{e.forEach((o=>o.classList.remove("bal-focused"))),o.forEach((o=>o.classList.add("bal-focused"))),e=o},r=()=>{s=!1,n([])},d=t=>{s=o.includes(t.key),s||n([])},f=o=>{if(s&&void 0!==o.composedPath){const t=o.composedPath().filter((o=>!!o.classList&&o.classList.contains("bal-focusable")));n(t)}},a=()=>{c.activeElement===u&&n([])};return c.addEventListener("keydown",d),c.addEventListener("focusin",f),c.addEventListener("focusout",a),c.addEventListener("touchstart",r),c.addEventListener("mousedown",r),{destroy:()=>{c.removeEventListener("keydown",d),c.removeEventListener("focusin",f),c.removeEventListener("focusout",a),c.removeEventListener("touchstart",r),c.removeEventListener("mousedown",r)},setFocus:n}};export{o as FOCUS_KEYS,t as startFocusVisible}